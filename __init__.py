# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _seisware_sdk_37
else:
    import _seisware_sdk_37

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_SwigPyIterator

    def value(self):
        return _seisware_sdk_37.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _seisware_sdk_37.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _seisware_sdk_37.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _seisware_sdk_37.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _seisware_sdk_37.SwigPyIterator_equal(self, x)

    def copy(self):
        return _seisware_sdk_37.SwigPyIterator_copy(self)

    def next(self):
        return _seisware_sdk_37.SwigPyIterator_next(self)

    def __next__(self):
        return _seisware_sdk_37.SwigPyIterator___next__(self)

    def previous(self):
        return _seisware_sdk_37.SwigPyIterator_previous(self)

    def advance(self, n):
        return _seisware_sdk_37.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _seisware_sdk_37.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _seisware_sdk_37.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _seisware_sdk_37.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _seisware_sdk_37.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _seisware_sdk_37.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _seisware_sdk_37.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _seisware_sdk_37:
_seisware_sdk_37.SwigPyIterator_swigregister(SwigPyIterator)

class IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IntList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IntList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IntList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.IntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.IntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.IntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.IntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.IntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.IntList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.IntList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.IntList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.IntList_empty(self)

    def size(self):
        return _seisware_sdk_37.IntList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.IntList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.IntList_begin(self)

    def end(self):
        return _seisware_sdk_37.IntList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IntList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IntList_rend(self)

    def clear(self):
        return _seisware_sdk_37.IntList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.IntList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.IntList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.IntList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.IntList_swiginit(self, _seisware_sdk_37.new_IntList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.IntList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.IntList_front(self)

    def back(self):
        return _seisware_sdk_37.IntList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.IntList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.IntList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.IntList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.IntList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.IntList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_IntList

# Register IntList in _seisware_sdk_37:
_seisware_sdk_37.IntList_swigregister(IntList)

class DoublesList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DoublesList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DoublesList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DoublesList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DoublesList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DoublesList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DoublesList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DoublesList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DoublesList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DoublesList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DoublesList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DoublesList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DoublesList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DoublesList_empty(self)

    def size(self):
        return _seisware_sdk_37.DoublesList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DoublesList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DoublesList_begin(self)

    def end(self):
        return _seisware_sdk_37.DoublesList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DoublesList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DoublesList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DoublesList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DoublesList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DoublesList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DoublesList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DoublesList_swiginit(self, _seisware_sdk_37.new_DoublesList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DoublesList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DoublesList_front(self)

    def back(self):
        return _seisware_sdk_37.DoublesList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DoublesList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DoublesList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DoublesList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DoublesList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DoublesList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DoublesList

# Register DoublesList in _seisware_sdk_37:
_seisware_sdk_37.DoublesList_swigregister(DoublesList)

class FloatList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FloatList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FloatList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FloatList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FloatList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FloatList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FloatList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FloatList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FloatList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FloatList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FloatList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FloatList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FloatList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FloatList_empty(self)

    def size(self):
        return _seisware_sdk_37.FloatList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FloatList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FloatList_begin(self)

    def end(self):
        return _seisware_sdk_37.FloatList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FloatList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FloatList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FloatList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FloatList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FloatList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FloatList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FloatList_swiginit(self, _seisware_sdk_37.new_FloatList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FloatList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FloatList_front(self)

    def back(self):
        return _seisware_sdk_37.FloatList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FloatList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FloatList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FloatList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FloatList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FloatList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FloatList

# Register FloatList in _seisware_sdk_37:
_seisware_sdk_37.FloatList_swigregister(FloatList)

class StringsList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.StringsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.StringsList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.StringsList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.StringsList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.StringsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.StringsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.StringsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.StringsList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.StringsList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.StringsList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.StringsList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.StringsList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.StringsList_empty(self)

    def size(self):
        return _seisware_sdk_37.StringsList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.StringsList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.StringsList_begin(self)

    def end(self):
        return _seisware_sdk_37.StringsList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.StringsList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.StringsList_rend(self)

    def clear(self):
        return _seisware_sdk_37.StringsList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.StringsList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.StringsList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.StringsList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.StringsList_swiginit(self, _seisware_sdk_37.new_StringsList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.StringsList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.StringsList_front(self)

    def back(self):
        return _seisware_sdk_37.StringsList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.StringsList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.StringsList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.StringsList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.StringsList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.StringsList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_StringsList

# Register StringsList in _seisware_sdk_37:
_seisware_sdk_37.StringsList_swigregister(StringsList)

class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.StringPair_swiginit(self, _seisware_sdk_37.new_StringPair(*args))
    first = property(_seisware_sdk_37.StringPair_first_get, _seisware_sdk_37.StringPair_first_set)
    second = property(_seisware_sdk_37.StringPair_second_get, _seisware_sdk_37.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_StringPair

# Register StringPair in _seisware_sdk_37:
_seisware_sdk_37.StringPair_swigregister(StringPair)

class StringPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.StringPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.StringPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.StringPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.StringPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.StringPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.StringPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.StringPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.StringPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.StringPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.StringPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.StringPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.StringPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.StringPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.StringPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.StringPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.StringPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.StringPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.StringPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.StringPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.StringPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.StringPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.StringPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.StringPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.StringPairList_swiginit(self, _seisware_sdk_37.new_StringPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.StringPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.StringPairList_front(self)

    def back(self):
        return _seisware_sdk_37.StringPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.StringPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.StringPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.StringPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.StringPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.StringPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_StringPairList

# Register StringPairList in _seisware_sdk_37:
_seisware_sdk_37.StringPairList_swigregister(StringPairList)

LengthUnit_Meter = _seisware_sdk_37.LengthUnit_Meter
LengthUnit_Foot = _seisware_sdk_37.LengthUnit_Foot
UnitDomain_Length = _seisware_sdk_37.UnitDomain_Length
UnitDomain_Time = _seisware_sdk_37.UnitDomain_Time
UnitDomain_Velocity = _seisware_sdk_37.UnitDomain_Velocity
UnitDomain_Frequency = _seisware_sdk_37.UnitDomain_Frequency
class WellSymbol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_seisware_sdk_37.WellSymbol_index_get, _seisware_sdk_37.WellSymbol_index_set)
    name = property(_seisware_sdk_37.WellSymbol_name_get, _seisware_sdk_37.WellSymbol_name_set)
    fileName = property(_seisware_sdk_37.WellSymbol_fileName_get, _seisware_sdk_37.WellSymbol_fileName_set)

    def __init__(self, *args):
        _seisware_sdk_37.WellSymbol_swiginit(self, _seisware_sdk_37.new_WellSymbol(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_WellSymbol

# Register WellSymbol in _seisware_sdk_37:
_seisware_sdk_37.WellSymbol_swigregister(WellSymbol)

class Point2DF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_seisware_sdk_37.Point2DF_x_get, _seisware_sdk_37.Point2DF_x_set)
    y = property(_seisware_sdk_37.Point2DF_y_get, _seisware_sdk_37.Point2DF_y_set)

    def __init__(self, *args):
        _seisware_sdk_37.Point2DF_swiginit(self, _seisware_sdk_37.new_Point2DF(*args))

    def __eq__(self, b):
        return _seisware_sdk_37.Point2DF___eq__(self, b)

    def __ne__(self, b):
        return _seisware_sdk_37.Point2DF___ne__(self, b)
    __swig_destroy__ = _seisware_sdk_37.delete_Point2DF

# Register Point2DF in _seisware_sdk_37:
_seisware_sdk_37.Point2DF_swigregister(Point2DF)

class Point2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_seisware_sdk_37.Point2D_x_get, _seisware_sdk_37.Point2D_x_set)
    y = property(_seisware_sdk_37.Point2D_y_get, _seisware_sdk_37.Point2D_y_set)

    def __init__(self, *args):
        _seisware_sdk_37.Point2D_swiginit(self, _seisware_sdk_37.new_Point2D(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Point2D

# Register Point2D in _seisware_sdk_37:
_seisware_sdk_37.Point2D_swigregister(Point2D)

class Rectangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minimum = property(_seisware_sdk_37.Rectangle_minimum_get, _seisware_sdk_37.Rectangle_minimum_set)
    maximum = property(_seisware_sdk_37.Rectangle_maximum_get, _seisware_sdk_37.Rectangle_maximum_set)

    def __init__(self):
        _seisware_sdk_37.Rectangle_swiginit(self, _seisware_sdk_37.new_Rectangle())
    __swig_destroy__ = _seisware_sdk_37.delete_Rectangle

# Register Rectangle in _seisware_sdk_37:
_seisware_sdk_37.Rectangle_swigregister(Rectangle)

class DateStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_seisware_sdk_37.DateStruct_year_get, _seisware_sdk_37.DateStruct_year_set)
    month = property(_seisware_sdk_37.DateStruct_month_get, _seisware_sdk_37.DateStruct_month_set)
    day = property(_seisware_sdk_37.DateStruct_day_get, _seisware_sdk_37.DateStruct_day_set)
    hour = property(_seisware_sdk_37.DateStruct_hour_get, _seisware_sdk_37.DateStruct_hour_set)
    minute = property(_seisware_sdk_37.DateStruct_minute_get, _seisware_sdk_37.DateStruct_minute_set)
    second = property(_seisware_sdk_37.DateStruct_second_get, _seisware_sdk_37.DateStruct_second_set)

    def __init__(self, *args):
        _seisware_sdk_37.DateStruct_swiginit(self, _seisware_sdk_37.new_DateStruct(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.DateStruct___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.DateStruct___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.DateStruct___lt__(self, rhs)

    def __le__(self, rhs):
        return _seisware_sdk_37.DateStruct___le__(self, rhs)

    def __gt__(self, rhs):
        return _seisware_sdk_37.DateStruct___gt__(self, rhs)

    def __ge__(self, rhs):
        return _seisware_sdk_37.DateStruct___ge__(self, rhs)
    __swig_destroy__ = _seisware_sdk_37.delete_DateStruct

# Register DateStruct in _seisware_sdk_37:
_seisware_sdk_37.DateStruct_swigregister(DateStruct)

class RGBColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    red = property(_seisware_sdk_37.RGBColor_red_get, _seisware_sdk_37.RGBColor_red_set)
    green = property(_seisware_sdk_37.RGBColor_green_get, _seisware_sdk_37.RGBColor_green_set)
    blue = property(_seisware_sdk_37.RGBColor_blue_get, _seisware_sdk_37.RGBColor_blue_set)

    def __init__(self, *args):
        _seisware_sdk_37.RGBColor_swiginit(self, _seisware_sdk_37.new_RGBColor(*args))

    def __eq__(self, color):
        return _seisware_sdk_37.RGBColor___eq__(self, color)

    def __ne__(self, color):
        return _seisware_sdk_37.RGBColor___ne__(self, color)
    __swig_destroy__ = _seisware_sdk_37.delete_RGBColor

# Register RGBColor in _seisware_sdk_37:
_seisware_sdk_37.RGBColor_swigregister(RGBColor)

class Palette(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_seisware_sdk_37.Palette_name_get, _seisware_sdk_37.Palette_name_set)
    colors = property(_seisware_sdk_37.Palette_colors_get, _seisware_sdk_37.Palette_colors_set)

    def __init__(self, *args):
        _seisware_sdk_37.Palette_swiginit(self, _seisware_sdk_37.new_Palette(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Palette

# Register Palette in _seisware_sdk_37:
_seisware_sdk_37.Palette_swigregister(Palette)

class ID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_seisware_sdk_37.ID_data_get, _seisware_sdk_37.ID_data_set)

    def __init__(self, *args):
        _seisware_sdk_37.ID_swiginit(self, _seisware_sdk_37.new_ID(*args))

    def getData(self, idx):
        return _seisware_sdk_37.ID_getData(self, idx)

    def __lt__(self, id):
        return _seisware_sdk_37.ID___lt__(self, id)

    def __eq__(self, id):
        return _seisware_sdk_37.ID___eq__(self, id)

    def __ne__(self, id):
        return _seisware_sdk_37.ID___ne__(self, id)

    def __hash__(self):
        return _seisware_sdk_37.ID___hash__(self)

    def toString(self):
        return _seisware_sdk_37.ID_toString(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ID

# Register ID in _seisware_sdk_37:
_seisware_sdk_37.ID_swigregister(ID)

class VersionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.VersionInfo_swiginit(self, _seisware_sdk_37.new_VersionInfo())
    major = property(_seisware_sdk_37.VersionInfo_major_get, _seisware_sdk_37.VersionInfo_major_set)
    minor = property(_seisware_sdk_37.VersionInfo_minor_get, _seisware_sdk_37.VersionInfo_minor_set)
    product = property(_seisware_sdk_37.VersionInfo_product_get, _seisware_sdk_37.VersionInfo_product_set)
    __swig_destroy__ = _seisware_sdk_37.delete_VersionInfo

# Register VersionInfo in _seisware_sdk_37:
_seisware_sdk_37.VersionInfo_swigregister(VersionInfo)

class ServerInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.ServerInfo_swiginit(self, _seisware_sdk_37.new_ServerInfo())

    def Endpoint(self):
        return _seisware_sdk_37.ServerInfo_Endpoint(self)
    hostname = property(_seisware_sdk_37.ServerInfo_hostname_get, _seisware_sdk_37.ServerInfo_hostname_set)
    port = property(_seisware_sdk_37.ServerInfo_port_get, _seisware_sdk_37.ServerInfo_port_set)
    pid = property(_seisware_sdk_37.ServerInfo_pid_get, _seisware_sdk_37.ServerInfo_pid_set)
    sdkVersion = property(_seisware_sdk_37.ServerInfo_sdkVersion_get, _seisware_sdk_37.ServerInfo_sdkVersion_set)
    __swig_destroy__ = _seisware_sdk_37.delete_ServerInfo

# Register ServerInfo in _seisware_sdk_37:
_seisware_sdk_37.ServerInfo_swigregister(ServerInfo)

class IDList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IDList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IDList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IDList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IDList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.IDList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.IDList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.IDList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.IDList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.IDList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.IDList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.IDList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.IDList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.IDList_empty(self)

    def size(self):
        return _seisware_sdk_37.IDList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.IDList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.IDList_begin(self)

    def end(self):
        return _seisware_sdk_37.IDList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IDList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IDList_rend(self)

    def clear(self):
        return _seisware_sdk_37.IDList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.IDList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.IDList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.IDList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.IDList_swiginit(self, _seisware_sdk_37.new_IDList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.IDList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.IDList_front(self)

    def back(self):
        return _seisware_sdk_37.IDList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.IDList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.IDList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.IDList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.IDList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.IDList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_IDList

# Register IDList in _seisware_sdk_37:
_seisware_sdk_37.IDList_swigregister(IDList)

class IDPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.IDPair_swiginit(self, _seisware_sdk_37.new_IDPair(*args))
    first = property(_seisware_sdk_37.IDPair_first_get, _seisware_sdk_37.IDPair_first_set)
    second = property(_seisware_sdk_37.IDPair_second_get, _seisware_sdk_37.IDPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_IDPair

# Register IDPair in _seisware_sdk_37:
_seisware_sdk_37.IDPair_swigregister(IDPair)

class IDPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IDPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IDPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IDPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IDPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.IDPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.IDPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.IDPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.IDPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.IDPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.IDPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.IDPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.IDPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.IDPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.IDPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.IDPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.IDPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.IDPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IDPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IDPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.IDPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.IDPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.IDPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.IDPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.IDPairList_swiginit(self, _seisware_sdk_37.new_IDPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.IDPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.IDPairList_front(self)

    def back(self):
        return _seisware_sdk_37.IDPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.IDPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.IDPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.IDPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.IDPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.IDPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_IDPairList

# Register IDPairList in _seisware_sdk_37:
_seisware_sdk_37.IDPairList_swigregister(IDPairList)

class IDLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IDLookup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IDLookup___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IDLookup___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IDLookup___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.IDLookup___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.IDLookup___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.IDLookup_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.IDLookup_keys(self)

    def values(self):
        return _seisware_sdk_37.IDLookup_values(self)

    def items(self):
        return _seisware_sdk_37.IDLookup_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.IDLookup___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.IDLookup_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.IDLookup_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.IDLookup___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.IDLookup_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.IDLookup_swiginit(self, _seisware_sdk_37.new_IDLookup(*args))

    def empty(self):
        return _seisware_sdk_37.IDLookup_empty(self)

    def size(self):
        return _seisware_sdk_37.IDLookup_size(self)

    def swap(self, v):
        return _seisware_sdk_37.IDLookup_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.IDLookup_begin(self)

    def end(self):
        return _seisware_sdk_37.IDLookup_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IDLookup_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IDLookup_rend(self)

    def clear(self):
        return _seisware_sdk_37.IDLookup_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.IDLookup_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.IDLookup_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.IDLookup_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.IDLookup_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.IDLookup_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.IDLookup_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_IDLookup

# Register IDLookup in _seisware_sdk_37:
_seisware_sdk_37.IDLookup_swigregister(IDLookup)

class DirectionalSurveyPointList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DirectionalSurveyPointList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DirectionalSurveyPointList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DirectionalSurveyPointList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyPointList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyPointList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DirectionalSurveyPointList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_empty(self)

    def size(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DirectionalSurveyPointList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_begin(self)

    def end(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurveyPointList_swiginit(self, _seisware_sdk_37.new_DirectionalSurveyPointList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DirectionalSurveyPointList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_front(self)

    def back(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DirectionalSurveyPointList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DirectionalSurveyPointList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DirectionalSurveyPointList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DirectionalSurveyPointList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyPointList

# Register DirectionalSurveyPointList in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyPointList_swigregister(DirectionalSurveyPointList)

class PointListF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.PointListF_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.PointListF___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.PointListF___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.PointListF___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.PointListF___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.PointListF___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.PointListF___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.PointListF___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.PointListF___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.PointListF___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.PointListF_pop(self)

    def append(self, x):
        return _seisware_sdk_37.PointListF_append(self, x)

    def empty(self):
        return _seisware_sdk_37.PointListF_empty(self)

    def size(self):
        return _seisware_sdk_37.PointListF_size(self)

    def swap(self, v):
        return _seisware_sdk_37.PointListF_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.PointListF_begin(self)

    def end(self):
        return _seisware_sdk_37.PointListF_end(self)

    def rbegin(self):
        return _seisware_sdk_37.PointListF_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.PointListF_rend(self)

    def clear(self):
        return _seisware_sdk_37.PointListF_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.PointListF_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.PointListF_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.PointListF_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.PointListF_swiginit(self, _seisware_sdk_37.new_PointListF(*args))

    def push_back(self, x):
        return _seisware_sdk_37.PointListF_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.PointListF_front(self)

    def back(self):
        return _seisware_sdk_37.PointListF_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.PointListF_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.PointListF_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.PointListF_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.PointListF_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.PointListF_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_PointListF

# Register PointListF in _seisware_sdk_37:
_seisware_sdk_37.PointListF_swigregister(PointListF)

class ListPointListF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ListPointListF_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ListPointListF___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ListPointListF___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ListPointListF___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ListPointListF___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ListPointListF___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ListPointListF___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ListPointListF___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ListPointListF___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ListPointListF___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ListPointListF_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ListPointListF_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ListPointListF_empty(self)

    def size(self):
        return _seisware_sdk_37.ListPointListF_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ListPointListF_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ListPointListF_begin(self)

    def end(self):
        return _seisware_sdk_37.ListPointListF_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ListPointListF_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ListPointListF_rend(self)

    def clear(self):
        return _seisware_sdk_37.ListPointListF_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ListPointListF_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ListPointListF_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ListPointListF_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ListPointListF_swiginit(self, _seisware_sdk_37.new_ListPointListF(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ListPointListF_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ListPointListF_front(self)

    def back(self):
        return _seisware_sdk_37.ListPointListF_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ListPointListF_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ListPointListF_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ListPointListF_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ListPointListF_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ListPointListF_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ListPointListF

# Register ListPointListF in _seisware_sdk_37:
_seisware_sdk_37.ListPointListF_swigregister(ListPointListF)

class RGBColorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.RGBColorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.RGBColorList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.RGBColorList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.RGBColorList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.RGBColorList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.RGBColorList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.RGBColorList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.RGBColorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.RGBColorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.RGBColorList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.RGBColorList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.RGBColorList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.RGBColorList_empty(self)

    def size(self):
        return _seisware_sdk_37.RGBColorList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.RGBColorList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.RGBColorList_begin(self)

    def end(self):
        return _seisware_sdk_37.RGBColorList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.RGBColorList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.RGBColorList_rend(self)

    def clear(self):
        return _seisware_sdk_37.RGBColorList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.RGBColorList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.RGBColorList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.RGBColorList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.RGBColorList_swiginit(self, _seisware_sdk_37.new_RGBColorList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.RGBColorList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.RGBColorList_front(self)

    def back(self):
        return _seisware_sdk_37.RGBColorList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.RGBColorList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.RGBColorList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.RGBColorList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.RGBColorList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.RGBColorList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_RGBColorList

# Register RGBColorList in _seisware_sdk_37:
_seisware_sdk_37.RGBColorList_swigregister(RGBColorList)

class GridIndex2List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.GridIndex2List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.GridIndex2List___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.GridIndex2List___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.GridIndex2List___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.GridIndex2List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.GridIndex2List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.GridIndex2List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.GridIndex2List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.GridIndex2List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.GridIndex2List___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.GridIndex2List_pop(self)

    def append(self, x):
        return _seisware_sdk_37.GridIndex2List_append(self, x)

    def empty(self):
        return _seisware_sdk_37.GridIndex2List_empty(self)

    def size(self):
        return _seisware_sdk_37.GridIndex2List_size(self)

    def swap(self, v):
        return _seisware_sdk_37.GridIndex2List_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.GridIndex2List_begin(self)

    def end(self):
        return _seisware_sdk_37.GridIndex2List_end(self)

    def rbegin(self):
        return _seisware_sdk_37.GridIndex2List_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.GridIndex2List_rend(self)

    def clear(self):
        return _seisware_sdk_37.GridIndex2List_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.GridIndex2List_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.GridIndex2List_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.GridIndex2List_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.GridIndex2List_swiginit(self, _seisware_sdk_37.new_GridIndex2List(*args))

    def push_back(self, x):
        return _seisware_sdk_37.GridIndex2List_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.GridIndex2List_front(self)

    def back(self):
        return _seisware_sdk_37.GridIndex2List_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.GridIndex2List_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.GridIndex2List_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.GridIndex2List_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.GridIndex2List_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.GridIndex2List_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndex2List

# Register GridIndex2List in _seisware_sdk_37:
_seisware_sdk_37.GridIndex2List_swigregister(GridIndex2List)

class ServerInfoList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ServerInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ServerInfoList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ServerInfoList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ServerInfoList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ServerInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ServerInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ServerInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ServerInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ServerInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ServerInfoList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ServerInfoList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ServerInfoList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ServerInfoList_empty(self)

    def size(self):
        return _seisware_sdk_37.ServerInfoList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ServerInfoList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ServerInfoList_begin(self)

    def end(self):
        return _seisware_sdk_37.ServerInfoList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ServerInfoList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ServerInfoList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ServerInfoList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ServerInfoList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ServerInfoList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ServerInfoList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ServerInfoList_swiginit(self, _seisware_sdk_37.new_ServerInfoList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ServerInfoList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ServerInfoList_front(self)

    def back(self):
        return _seisware_sdk_37.ServerInfoList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ServerInfoList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ServerInfoList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ServerInfoList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ServerInfoList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ServerInfoList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ServerInfoList

# Register ServerInfoList in _seisware_sdk_37:
_seisware_sdk_37.ServerInfoList_swigregister(ServerInfoList)

class VersionInfoList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.VersionInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.VersionInfoList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.VersionInfoList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.VersionInfoList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.VersionInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.VersionInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.VersionInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.VersionInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.VersionInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.VersionInfoList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.VersionInfoList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.VersionInfoList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.VersionInfoList_empty(self)

    def size(self):
        return _seisware_sdk_37.VersionInfoList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.VersionInfoList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.VersionInfoList_begin(self)

    def end(self):
        return _seisware_sdk_37.VersionInfoList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.VersionInfoList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.VersionInfoList_rend(self)

    def clear(self):
        return _seisware_sdk_37.VersionInfoList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.VersionInfoList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.VersionInfoList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.VersionInfoList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.VersionInfoList_swiginit(self, _seisware_sdk_37.new_VersionInfoList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.VersionInfoList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.VersionInfoList_front(self)

    def back(self):
        return _seisware_sdk_37.VersionInfoList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.VersionInfoList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.VersionInfoList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.VersionInfoList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.VersionInfoList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.VersionInfoList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_VersionInfoList

# Register VersionInfoList in _seisware_sdk_37:
_seisware_sdk_37.VersionInfoList_swigregister(VersionInfoList)

class VariantMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.VariantMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.VariantMap___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.VariantMap___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.VariantMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.VariantMap___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.VariantMap___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.VariantMap_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.VariantMap_keys(self)

    def values(self):
        return _seisware_sdk_37.VariantMap_values(self)

    def items(self):
        return _seisware_sdk_37.VariantMap_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.VariantMap___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.VariantMap_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.VariantMap_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.VariantMap___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.VariantMap_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.VariantMap_swiginit(self, _seisware_sdk_37.new_VariantMap(*args))

    def empty(self):
        return _seisware_sdk_37.VariantMap_empty(self)

    def size(self):
        return _seisware_sdk_37.VariantMap_size(self)

    def swap(self, v):
        return _seisware_sdk_37.VariantMap_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.VariantMap_begin(self)

    def end(self):
        return _seisware_sdk_37.VariantMap_end(self)

    def rbegin(self):
        return _seisware_sdk_37.VariantMap_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.VariantMap_rend(self)

    def clear(self):
        return _seisware_sdk_37.VariantMap_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.VariantMap_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.VariantMap_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.VariantMap_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.VariantMap_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.VariantMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.VariantMap_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_VariantMap

# Register VariantMap in _seisware_sdk_37:
_seisware_sdk_37.VariantMap_swigregister(VariantMap)

class IDSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IDSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IDSet___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IDSet___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IDSet___len__(self)

    def append(self, x):
        return _seisware_sdk_37.IDSet_append(self, x)

    def __contains__(self, x):
        return _seisware_sdk_37.IDSet___contains__(self, x)

    def __getitem__(self, i):
        return _seisware_sdk_37.IDSet___getitem__(self, i)

    def add(self, x):
        return _seisware_sdk_37.IDSet_add(self, x)

    def discard(self, x):
        return _seisware_sdk_37.IDSet_discard(self, x)

    def __init__(self, *args):
        _seisware_sdk_37.IDSet_swiginit(self, _seisware_sdk_37.new_IDSet(*args))

    def empty(self):
        return _seisware_sdk_37.IDSet_empty(self)

    def size(self):
        return _seisware_sdk_37.IDSet_size(self)

    def clear(self):
        return _seisware_sdk_37.IDSet_clear(self)

    def swap(self, v):
        return _seisware_sdk_37.IDSet_swap(self, v)

    def count(self, x):
        return _seisware_sdk_37.IDSet_count(self, x)

    def begin(self):
        return _seisware_sdk_37.IDSet_begin(self)

    def end(self):
        return _seisware_sdk_37.IDSet_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IDSet_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IDSet_rend(self)

    def erase(self, *args):
        return _seisware_sdk_37.IDSet_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.IDSet_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.IDSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.IDSet_upper_bound(self, x)

    def equal_range(self, x):
        return _seisware_sdk_37.IDSet_equal_range(self, x)

    def insert(self, __x):
        return _seisware_sdk_37.IDSet_insert(self, __x)

    def ToList(self):
        return _seisware_sdk_37.IDSet_ToList(self)
    __swig_destroy__ = _seisware_sdk_37.delete_IDSet

# Register IDSet in _seisware_sdk_37:
_seisware_sdk_37.IDSet_swigregister(IDSet)

class StringSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.StringSet___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.StringSet___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.StringSet___len__(self)

    def append(self, x):
        return _seisware_sdk_37.StringSet_append(self, x)

    def __contains__(self, x):
        return _seisware_sdk_37.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _seisware_sdk_37.StringSet___getitem__(self, i)

    def add(self, x):
        return _seisware_sdk_37.StringSet_add(self, x)

    def discard(self, x):
        return _seisware_sdk_37.StringSet_discard(self, x)

    def __init__(self, *args):
        _seisware_sdk_37.StringSet_swiginit(self, _seisware_sdk_37.new_StringSet(*args))

    def empty(self):
        return _seisware_sdk_37.StringSet_empty(self)

    def size(self):
        return _seisware_sdk_37.StringSet_size(self)

    def clear(self):
        return _seisware_sdk_37.StringSet_clear(self)

    def swap(self, v):
        return _seisware_sdk_37.StringSet_swap(self, v)

    def count(self, x):
        return _seisware_sdk_37.StringSet_count(self, x)

    def begin(self):
        return _seisware_sdk_37.StringSet_begin(self)

    def end(self):
        return _seisware_sdk_37.StringSet_end(self)

    def rbegin(self):
        return _seisware_sdk_37.StringSet_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.StringSet_rend(self)

    def erase(self, *args):
        return _seisware_sdk_37.StringSet_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.StringSet_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _seisware_sdk_37.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _seisware_sdk_37.StringSet_insert(self, __x)

    def ToList(self):
        return _seisware_sdk_37.StringSet_ToList(self)
    __swig_destroy__ = _seisware_sdk_37.delete_StringSet

# Register StringSet in _seisware_sdk_37:
_seisware_sdk_37.StringSet_swigregister(StringSet)

class Int64Set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.Int64Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.Int64Set___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.Int64Set___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.Int64Set___len__(self)

    def append(self, x):
        return _seisware_sdk_37.Int64Set_append(self, x)

    def __contains__(self, x):
        return _seisware_sdk_37.Int64Set___contains__(self, x)

    def __getitem__(self, i):
        return _seisware_sdk_37.Int64Set___getitem__(self, i)

    def add(self, x):
        return _seisware_sdk_37.Int64Set_add(self, x)

    def discard(self, x):
        return _seisware_sdk_37.Int64Set_discard(self, x)

    def __init__(self, *args):
        _seisware_sdk_37.Int64Set_swiginit(self, _seisware_sdk_37.new_Int64Set(*args))

    def empty(self):
        return _seisware_sdk_37.Int64Set_empty(self)

    def size(self):
        return _seisware_sdk_37.Int64Set_size(self)

    def clear(self):
        return _seisware_sdk_37.Int64Set_clear(self)

    def swap(self, v):
        return _seisware_sdk_37.Int64Set_swap(self, v)

    def count(self, x):
        return _seisware_sdk_37.Int64Set_count(self, x)

    def begin(self):
        return _seisware_sdk_37.Int64Set_begin(self)

    def end(self):
        return _seisware_sdk_37.Int64Set_end(self)

    def rbegin(self):
        return _seisware_sdk_37.Int64Set_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.Int64Set_rend(self)

    def erase(self, *args):
        return _seisware_sdk_37.Int64Set_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.Int64Set_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.Int64Set_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.Int64Set_upper_bound(self, x)

    def equal_range(self, x):
        return _seisware_sdk_37.Int64Set_equal_range(self, x)

    def insert(self, __x):
        return _seisware_sdk_37.Int64Set_insert(self, __x)
    __swig_destroy__ = _seisware_sdk_37.delete_Int64Set

# Register Int64Set in _seisware_sdk_37:
_seisware_sdk_37.Int64Set_swigregister(Int64Set)

class MeasurementList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.MeasurementList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.MeasurementList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.MeasurementList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.MeasurementList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.MeasurementList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.MeasurementList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.MeasurementList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.MeasurementList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.MeasurementList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.MeasurementList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.MeasurementList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.MeasurementList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.MeasurementList_empty(self)

    def size(self):
        return _seisware_sdk_37.MeasurementList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.MeasurementList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.MeasurementList_begin(self)

    def end(self):
        return _seisware_sdk_37.MeasurementList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.MeasurementList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.MeasurementList_rend(self)

    def clear(self):
        return _seisware_sdk_37.MeasurementList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.MeasurementList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.MeasurementList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.MeasurementList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.MeasurementList_swiginit(self, _seisware_sdk_37.new_MeasurementList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.MeasurementList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.MeasurementList_front(self)

    def back(self):
        return _seisware_sdk_37.MeasurementList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.MeasurementList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.MeasurementList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.MeasurementList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.MeasurementList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.MeasurementList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_MeasurementList

# Register MeasurementList in _seisware_sdk_37:
_seisware_sdk_37.MeasurementList_swigregister(MeasurementList)

class LicenseRoleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.LicenseRoleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.LicenseRoleList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.LicenseRoleList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.LicenseRoleList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.LicenseRoleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.LicenseRoleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.LicenseRoleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.LicenseRoleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.LicenseRoleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.LicenseRoleList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.LicenseRoleList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.LicenseRoleList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.LicenseRoleList_empty(self)

    def size(self):
        return _seisware_sdk_37.LicenseRoleList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.LicenseRoleList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.LicenseRoleList_begin(self)

    def end(self):
        return _seisware_sdk_37.LicenseRoleList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.LicenseRoleList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.LicenseRoleList_rend(self)

    def clear(self):
        return _seisware_sdk_37.LicenseRoleList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.LicenseRoleList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.LicenseRoleList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.LicenseRoleList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.LicenseRoleList_swiginit(self, _seisware_sdk_37.new_LicenseRoleList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.LicenseRoleList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.LicenseRoleList_front(self)

    def back(self):
        return _seisware_sdk_37.LicenseRoleList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.LicenseRoleList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.LicenseRoleList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.LicenseRoleList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.LicenseRoleList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.LicenseRoleList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseRoleList

# Register LicenseRoleList in _seisware_sdk_37:
_seisware_sdk_37.LicenseRoleList_swigregister(LicenseRoleList)

class Unit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Unit_swiginit(self, _seisware_sdk_37.new_Unit(*args))

    def Name(self, *args):
        return _seisware_sdk_37.Unit_Name(self, *args)

    def ShortName(self, *args):
        return _seisware_sdk_37.Unit_ShortName(self, *args)

    def Domain(self, *args):
        return _seisware_sdk_37.Unit_Domain(self, *args)

    def ConversionFactor(self, *args):
        return _seisware_sdk_37.Unit_ConversionFactor(self, *args)
    __swig_destroy__ = _seisware_sdk_37.delete_Unit

# Register Unit in _seisware_sdk_37:
_seisware_sdk_37.Unit_swigregister(Unit)
cvar = _seisware_sdk_37.cvar
Unit.Foot = _seisware_sdk_37.cvar.Unit_Foot
Unit.Meter = _seisware_sdk_37.cvar.Unit_Meter
Unit.Millimeter = _seisware_sdk_37.cvar.Unit_Millimeter
Unit.Micrometer = _seisware_sdk_37.cvar.Unit_Micrometer
Unit.Nanometer = _seisware_sdk_37.cvar.Unit_Nanometer
Unit.Second = _seisware_sdk_37.cvar.Unit_Second
Unit.Millisecond = _seisware_sdk_37.cvar.Unit_Millisecond
Unit.Microsecond = _seisware_sdk_37.cvar.Unit_Microsecond
Unit.Nanosecond = _seisware_sdk_37.cvar.Unit_Nanosecond
Unit.Kilohertz = _seisware_sdk_37.cvar.Unit_Kilohertz
Unit.Hertz = _seisware_sdk_37.cvar.Unit_Hertz
Unit.Millihertz = _seisware_sdk_37.cvar.Unit_Millihertz
Unit.Microhertz = _seisware_sdk_37.cvar.Unit_Microhertz
Unit.Nanohertz = _seisware_sdk_37.cvar.Unit_Nanohertz
Unit.MeterPerSecond = _seisware_sdk_37.cvar.Unit_MeterPerSecond

class Measurement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Measurement_swiginit(self, _seisware_sdk_37.new_Measurement(*args))

    def Value(self, unit):
        return _seisware_sdk_37.Measurement_Value(self, unit)

    def Domain(self):
        return _seisware_sdk_37.Measurement_Domain(self)

    def SetValue(self, value, unit):
        return _seisware_sdk_37.Measurement_SetValue(self, value, unit)

    def ToSI(self):
        return _seisware_sdk_37.Measurement_ToSI(self)

    @staticmethod
    def FromSI(value, domain):
        return _seisware_sdk_37.Measurement_FromSI(value, domain)

    def __add__(self, rhs):
        return _seisware_sdk_37.Measurement___add__(self, rhs)

    def __sub__(self, rhs):
        return _seisware_sdk_37.Measurement___sub__(self, rhs)

    def __eq__(self, rhs):
        return _seisware_sdk_37.Measurement___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.Measurement___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.Measurement___lt__(self, rhs)

    def __le__(self, rhs):
        return _seisware_sdk_37.Measurement___le__(self, rhs)

    def __gt__(self, rhs):
        return _seisware_sdk_37.Measurement___gt__(self, rhs)

    def __ge__(self, rhs):
        return _seisware_sdk_37.Measurement___ge__(self, rhs)

    def __mul__(self, rhs):
        return _seisware_sdk_37.Measurement___mul__(self, rhs)

    def __truediv__(self, *args):
        return _seisware_sdk_37.Measurement___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _seisware_sdk_37.delete_Measurement

# Register Measurement in _seisware_sdk_37:
_seisware_sdk_37.Measurement_swigregister(Measurement)

def Measurement_FromSI(value, domain):
    return _seisware_sdk_37.Measurement_FromSI(value, domain)


def Equal(a, b):
    return _seisware_sdk_37.Equal(a, b)
class WorldPos2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WorldPos2_swiginit(self, _seisware_sdk_37.new_WorldPos2(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.WorldPos2___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.WorldPos2___ne__(self, rhs)
    x = property(_seisware_sdk_37.WorldPos2_x_get, _seisware_sdk_37.WorldPos2_x_set)
    y = property(_seisware_sdk_37.WorldPos2_y_get, _seisware_sdk_37.WorldPos2_y_set)
    __swig_destroy__ = _seisware_sdk_37.delete_WorldPos2

# Register WorldPos2 in _seisware_sdk_37:
_seisware_sdk_37.WorldPos2_swigregister(WorldPos2)

class WorldPos3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WorldPos3_swiginit(self, _seisware_sdk_37.new_WorldPos3(*args))

    def Get2D(self):
        return _seisware_sdk_37.WorldPos3_Get2D(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.WorldPos3___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.WorldPos3___ne__(self, rhs)
    x = property(_seisware_sdk_37.WorldPos3_x_get, _seisware_sdk_37.WorldPos3_x_set)
    y = property(_seisware_sdk_37.WorldPos3_y_get, _seisware_sdk_37.WorldPos3_y_set)
    z = property(_seisware_sdk_37.WorldPos3_z_get, _seisware_sdk_37.WorldPos3_z_set)
    __swig_destroy__ = _seisware_sdk_37.delete_WorldPos3

# Register WorldPos3 in _seisware_sdk_37:
_seisware_sdk_37.WorldPos3_swigregister(WorldPos3)

class WorldBounds2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WorldBounds2_swiginit(self, _seisware_sdk_37.new_WorldBounds2(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.WorldBounds2___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.WorldBounds2___ne__(self, rhs)
    minPos = property(_seisware_sdk_37.WorldBounds2_minPos_get, _seisware_sdk_37.WorldBounds2_minPos_set)
    maxPos = property(_seisware_sdk_37.WorldBounds2_maxPos_get, _seisware_sdk_37.WorldBounds2_maxPos_set)
    __swig_destroy__ = _seisware_sdk_37.delete_WorldBounds2

# Register WorldBounds2 in _seisware_sdk_37:
_seisware_sdk_37.WorldBounds2_swigregister(WorldBounds2)

class GridIndex2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridIndex2_swiginit(self, _seisware_sdk_37.new_GridIndex2(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridIndex2___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridIndex2___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.GridIndex2___lt__(self, rhs)
    i = property(_seisware_sdk_37.GridIndex2_i_get, _seisware_sdk_37.GridIndex2_i_set)
    j = property(_seisware_sdk_37.GridIndex2_j_get, _seisware_sdk_37.GridIndex2_j_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndex2

# Register GridIndex2 in _seisware_sdk_37:
_seisware_sdk_37.GridIndex2_swigregister(GridIndex2)

class GridIndex3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridIndex3_swiginit(self, _seisware_sdk_37.new_GridIndex3(*args))

    def Get2D(self):
        return _seisware_sdk_37.GridIndex3_Get2D(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridIndex3___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridIndex3___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.GridIndex3___lt__(self, rhs)
    i = property(_seisware_sdk_37.GridIndex3_i_get, _seisware_sdk_37.GridIndex3_i_set)
    j = property(_seisware_sdk_37.GridIndex3_j_get, _seisware_sdk_37.GridIndex3_j_set)
    k = property(_seisware_sdk_37.GridIndex3_k_get, _seisware_sdk_37.GridIndex3_k_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndex3

# Register GridIndex3 in _seisware_sdk_37:
_seisware_sdk_37.GridIndex3_swigregister(GridIndex3)

class GridIndex2F(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridIndex2F_swiginit(self, _seisware_sdk_37.new_GridIndex2F(*args))

    def Nearest(self):
        return _seisware_sdk_37.GridIndex2F_Nearest(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridIndex2F___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridIndex2F___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.GridIndex2F___lt__(self, rhs)
    i = property(_seisware_sdk_37.GridIndex2F_i_get, _seisware_sdk_37.GridIndex2F_i_set)
    j = property(_seisware_sdk_37.GridIndex2F_j_get, _seisware_sdk_37.GridIndex2F_j_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndex2F

# Register GridIndex2F in _seisware_sdk_37:
_seisware_sdk_37.GridIndex2F_swigregister(GridIndex2F)

class GridIndex3F(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridIndex3F_swiginit(self, _seisware_sdk_37.new_GridIndex3F(*args))

    def Nearest(self):
        return _seisware_sdk_37.GridIndex3F_Nearest(self)

    def Get2D(self):
        return _seisware_sdk_37.GridIndex3F_Get2D(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridIndex3F___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridIndex3F___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.GridIndex3F___lt__(self, rhs)
    i = property(_seisware_sdk_37.GridIndex3F_i_get, _seisware_sdk_37.GridIndex3F_i_set)
    j = property(_seisware_sdk_37.GridIndex3F_j_get, _seisware_sdk_37.GridIndex3F_j_set)
    k = property(_seisware_sdk_37.GridIndex3F_k_get, _seisware_sdk_37.GridIndex3F_k_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndex3F

# Register GridIndex3F in _seisware_sdk_37:
_seisware_sdk_37.GridIndex3F_swigregister(GridIndex3F)

class GridSize2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridSize2_swiginit(self, _seisware_sdk_37.new_GridSize2(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridSize2___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridSize2___ne__(self, rhs)
    iCount = property(_seisware_sdk_37.GridSize2_iCount_get, _seisware_sdk_37.GridSize2_iCount_set)
    jCount = property(_seisware_sdk_37.GridSize2_jCount_get, _seisware_sdk_37.GridSize2_jCount_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridSize2

# Register GridSize2 in _seisware_sdk_37:
_seisware_sdk_37.GridSize2_swigregister(GridSize2)

class GridSize3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridSize3_swiginit(self, _seisware_sdk_37.new_GridSize3(*args))

    def Get2D(self):
        return _seisware_sdk_37.GridSize3_Get2D(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.GridSize3___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.GridSize3___ne__(self, rhs)
    iCount = property(_seisware_sdk_37.GridSize3_iCount_get, _seisware_sdk_37.GridSize3_iCount_set)
    jCount = property(_seisware_sdk_37.GridSize3_jCount_get, _seisware_sdk_37.GridSize3_jCount_set)
    kCount = property(_seisware_sdk_37.GridSize3_kCount_get, _seisware_sdk_37.GridSize3_kCount_set)
    __swig_destroy__ = _seisware_sdk_37.delete_GridSize3

# Register GridSize3 in _seisware_sdk_37:
_seisware_sdk_37.GridSize3_swigregister(GridSize3)

class Range(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Range_swiginit(self, _seisware_sdk_37.new_Range(*args))

    def End(self):
        return _seisware_sdk_37.Range_End(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.Range___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.Range___ne__(self, rhs)
    start = property(_seisware_sdk_37.Range_start_get, _seisware_sdk_37.Range_start_set)
    delta = property(_seisware_sdk_37.Range_delta_get, _seisware_sdk_37.Range_delta_set)
    count = property(_seisware_sdk_37.Range_count_get, _seisware_sdk_37.Range_count_set)
    __swig_destroy__ = _seisware_sdk_37.delete_Range

# Register Range in _seisware_sdk_37:
_seisware_sdk_37.Range_swigregister(Range)

class RangeF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.RangeF_swiginit(self, _seisware_sdk_37.new_RangeF(*args))

    def End(self):
        return _seisware_sdk_37.RangeF_End(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.RangeF___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.RangeF___ne__(self, rhs)
    start = property(_seisware_sdk_37.RangeF_start_get, _seisware_sdk_37.RangeF_start_set)
    delta = property(_seisware_sdk_37.RangeF_delta_get, _seisware_sdk_37.RangeF_delta_set)
    count = property(_seisware_sdk_37.RangeF_count_get, _seisware_sdk_37.RangeF_count_set)
    __swig_destroy__ = _seisware_sdk_37.delete_RangeF

# Register RangeF in _seisware_sdk_37:
_seisware_sdk_37.RangeF_swigregister(RangeF)

class SeismicPos2F(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.SeismicPos2F_swiginit(self, _seisware_sdk_37.new_SeismicPos2F(*args))

    def __eq__(self, rhs):
        return _seisware_sdk_37.SeismicPos2F___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.SeismicPos2F___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.SeismicPos2F___lt__(self, rhs)
    inlineValue = property(_seisware_sdk_37.SeismicPos2F_inlineValue_get, _seisware_sdk_37.SeismicPos2F_inlineValue_set)
    crosslineValue = property(_seisware_sdk_37.SeismicPos2F_crosslineValue_get, _seisware_sdk_37.SeismicPos2F_crosslineValue_set)
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicPos2F

# Register SeismicPos2F in _seisware_sdk_37:
_seisware_sdk_37.SeismicPos2F_swigregister(SeismicPos2F)

class SeismicPos3F(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.SeismicPos3F_swiginit(self, _seisware_sdk_37.new_SeismicPos3F(*args))

    def Get2D(self):
        return _seisware_sdk_37.SeismicPos3F_Get2D(self)

    def __eq__(self, rhs):
        return _seisware_sdk_37.SeismicPos3F___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.SeismicPos3F___ne__(self, rhs)

    def __lt__(self, rhs):
        return _seisware_sdk_37.SeismicPos3F___lt__(self, rhs)
    inlineValue = property(_seisware_sdk_37.SeismicPos3F_inlineValue_get, _seisware_sdk_37.SeismicPos3F_inlineValue_set)
    crosslineValue = property(_seisware_sdk_37.SeismicPos3F_crosslineValue_get, _seisware_sdk_37.SeismicPos3F_crosslineValue_set)
    zValue = property(_seisware_sdk_37.SeismicPos3F_zValue_get, _seisware_sdk_37.SeismicPos3F_zValue_set)
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicPos3F

# Register SeismicPos3F in _seisware_sdk_37:
_seisware_sdk_37.SeismicPos3F_swigregister(SeismicPos3F)

EpsgLengthType_Meter = _seisware_sdk_37.EpsgLengthType_Meter
EpsgLengthType_Foot = _seisware_sdk_37.EpsgLengthType_Foot
EpsgLengthType_UsSurveyFoot = _seisware_sdk_37.EpsgLengthType_UsSurveyFoot
EpsgLengthType_ClarkesFoot = _seisware_sdk_37.EpsgLengthType_ClarkesFoot
class CoordinateSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.CoordinateSystem_swiginit(self, _seisware_sdk_37.new_CoordinateSystem(*args))
    Name = property(_seisware_sdk_37.CoordinateSystem_Name_get, _seisware_sdk_37.CoordinateSystem_Name_set)
    EPSGAreaOfUse = property(_seisware_sdk_37.CoordinateSystem_EPSGAreaOfUse_get, _seisware_sdk_37.CoordinateSystem_EPSGAreaOfUse_set)
    EPSGCode = property(_seisware_sdk_37.CoordinateSystem_EPSGCode_get, _seisware_sdk_37.CoordinateSystem_EPSGCode_set)
    EPSGLengthUnits = property(_seisware_sdk_37.CoordinateSystem_EPSGLengthUnits_get, _seisware_sdk_37.CoordinateSystem_EPSGLengthUnits_set)
    SurfaceUnit = property(_seisware_sdk_37.CoordinateSystem_SurfaceUnit_get, _seisware_sdk_37.CoordinateSystem_SurfaceUnit_set)
    WKTDefinition = property(_seisware_sdk_37.CoordinateSystem_WKTDefinition_get, _seisware_sdk_37.CoordinateSystem_WKTDefinition_set)
    __swig_destroy__ = _seisware_sdk_37.delete_CoordinateSystem

# Register CoordinateSystem in _seisware_sdk_37:
_seisware_sdk_37.CoordinateSystem_swigregister(CoordinateSystem)

VariantType__None = _seisware_sdk_37.VariantType__None
VariantType_Int = _seisware_sdk_37.VariantType_Int
VariantType_Int64 = _seisware_sdk_37.VariantType_Int64
VariantType_Double = _seisware_sdk_37.VariantType_Double
VariantType_String = _seisware_sdk_37.VariantType_String
VariantType_IntVector = _seisware_sdk_37.VariantType_IntVector
VariantType_DoubleVector = _seisware_sdk_37.VariantType_DoubleVector
VariantType_StringVector = _seisware_sdk_37.VariantType_StringVector
VariantType_ID = _seisware_sdk_37.VariantType_ID
VariantType_IDVector = _seisware_sdk_37.VariantType_IDVector
class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Variant_swiginit(self, _seisware_sdk_37.new_Variant(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Variant

    def Type(self):
        return _seisware_sdk_37.Variant_Type(self)

    def ToInt(self):
        return _seisware_sdk_37.Variant_ToInt(self)

    def ToLong(self):
        return _seisware_sdk_37.Variant_ToLong(self)

    def ToDouble(self):
        return _seisware_sdk_37.Variant_ToDouble(self)

    def ToString(self):
        return _seisware_sdk_37.Variant_ToString(self)

    def ToIntVector(self):
        return _seisware_sdk_37.Variant_ToIntVector(self)

    def ToDoubleVector(self):
        return _seisware_sdk_37.Variant_ToDoubleVector(self)

    def ToStringVector(self):
        return _seisware_sdk_37.Variant_ToStringVector(self)

    def ToID(self):
        return _seisware_sdk_37.Variant_ToID(self)

    def ToIDVector(self):
        return _seisware_sdk_37.Variant_ToIDVector(self)

# Register Variant in _seisware_sdk_37:
_seisware_sdk_37.Variant_swigregister(Variant)

class Connection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.Connection_swiginit(self, _seisware_sdk_37.new_Connection())
    __swig_destroy__ = _seisware_sdk_37.delete_Connection

    @staticmethod
    def CreateServer():
        return _seisware_sdk_37.Connection_CreateServer()

    def Connect(self, *args):
        return _seisware_sdk_37.Connection_Connect(self, *args)

    def Disconnect(self):
        return _seisware_sdk_37.Connection_Disconnect(self)

    def AuthenticateUser(self, *args):
        return _seisware_sdk_37.Connection_AuthenticateUser(self, *args)

    def Authenticated(self):
        return _seisware_sdk_37.Connection_Authenticated(self)

    def Endpoint(self, *args):
        return _seisware_sdk_37.Connection_Endpoint(self, *args)

    def ConnectionTimeout(self, *args):
        return _seisware_sdk_37.Connection_ConnectionTimeout(self, *args)

    def Login(self):
        return _seisware_sdk_37.Connection_Login(self)

    def ServerVersion(self):
        return _seisware_sdk_37.Connection_ServerVersion(self)

    def SeisWareVersion(self):
        return _seisware_sdk_37.Connection_SeisWareVersion(self)

    def ProjectManager(self):
        return _seisware_sdk_37.Connection_ProjectManager(self)

    def GroupMessageManager(self, groupName):
        return _seisware_sdk_37.Connection_GroupMessageManager(self, groupName)

    def LoadExceptionMessages(self, path):
        return _seisware_sdk_37.Connection_LoadExceptionMessages(self, path)

    @staticmethod
    def FindServers(broadcastPort, msTimeout=1000, numMessages=1):
        return _seisware_sdk_37.Connection_FindServers(broadcastPort, msTimeout, numMessages)

    @staticmethod
    def FindServerByName(serverName, broadcastPort=-1, msTimeout=1000):
        return _seisware_sdk_37.Connection_FindServerByName(serverName, broadcastPort, msTimeout)

    def GetLicense(self, *args):
        return _seisware_sdk_37.Connection_GetLicense(self, *args)

    def CanCheckoutLicense(self, *args):
        return _seisware_sdk_37.Connection_CanCheckoutLicense(self, *args)

    def CheckoutOfflineLicense(self, *args):
        return _seisware_sdk_37.Connection_CheckoutOfflineLicense(self, *args)

    def QueryOrganizationLicenseRolesForUser(self, *args):
        return _seisware_sdk_37.Connection_QueryOrganizationLicenseRolesForUser(self, *args)

    def QueryLicenseInfo(self, includeSubFeatures):
        return _seisware_sdk_37.Connection_QueryLicenseInfo(self, includeSubFeatures)

    def QueryLicenseUsage(self):
        return _seisware_sdk_37.Connection_QueryLicenseUsage(self)

    def QueryOrganizationUsers(self, getRoles=False):
        return _seisware_sdk_37.Connection_QueryOrganizationUsers(self, getRoles)

    def SetLicenseRolesForUser(self, userID, roles):
        return _seisware_sdk_37.Connection_SetLicenseRolesForUser(self, userID, roles)

    def GetPreferredLicenseComponent(self):
        return _seisware_sdk_37.Connection_GetPreferredLicenseComponent(self)

    def SetPreferredLicenseComponent(self, componentName):
        return _seisware_sdk_37.Connection_SetPreferredLicenseComponent(self, componentName)

# Register Connection in _seisware_sdk_37:
_seisware_sdk_37.Connection_swigregister(Connection)

def Connection_CreateServer():
    return _seisware_sdk_37.Connection_CreateServer()

def Connection_FindServers(broadcastPort, msTimeout=1000, numMessages=1):
    return _seisware_sdk_37.Connection_FindServers(broadcastPort, msTimeout, numMessages)

def Connection_FindServerByName(serverName, broadcastPort=-1, msTimeout=1000):
    return _seisware_sdk_37.Connection_FindServerByName(serverName, broadcastPort, msTimeout)

class Version(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Version_swiginit(self, _seisware_sdk_37.new_Version(*args))
    major = property(_seisware_sdk_37.Version_major_get, _seisware_sdk_37.Version_major_set)
    minor = property(_seisware_sdk_37.Version_minor_get, _seisware_sdk_37.Version_minor_set)
    build = property(_seisware_sdk_37.Version_build_get, _seisware_sdk_37.Version_build_set)

    @staticmethod
    def ThisClient():
        return _seisware_sdk_37.Version_ThisClient()

    @staticmethod
    def IsCompatible(clientVersion, serverVersion):
        return _seisware_sdk_37.Version_IsCompatible(clientVersion, serverVersion)
    __swig_destroy__ = _seisware_sdk_37.delete_Version

# Register Version in _seisware_sdk_37:
_seisware_sdk_37.Version_swigregister(Version)

def Version_ThisClient():
    return _seisware_sdk_37.Version_ThisClient()

def Version_IsCompatible(clientVersion, serverVersion):
    return _seisware_sdk_37.Version_IsCompatible(clientVersion, serverVersion)

class LicenseComponentRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.LicenseComponentRequest_swiginit(self, _seisware_sdk_37.new_LicenseComponentRequest(*args))
    name = property(_seisware_sdk_37.LicenseComponentRequest_name_get, _seisware_sdk_37.LicenseComponentRequest_name_set)
    licenseID = property(_seisware_sdk_37.LicenseComponentRequest_licenseID_get, _seisware_sdk_37.LicenseComponentRequest_licenseID_set)
    count = property(_seisware_sdk_37.LicenseComponentRequest_count_get, _seisware_sdk_37.LicenseComponentRequest_count_set)
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseComponentRequest

# Register LicenseComponentRequest in _seisware_sdk_37:
_seisware_sdk_37.LicenseComponentRequest_swigregister(LicenseComponentRequest)

class LicenseRole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_seisware_sdk_37.LicenseRole_id_get, _seisware_sdk_37.LicenseRole_id_set)
    name = property(_seisware_sdk_37.LicenseRole_name_get, _seisware_sdk_37.LicenseRole_name_set)

    def __init__(self):
        _seisware_sdk_37.LicenseRole_swiginit(self, _seisware_sdk_37.new_LicenseRole())
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseRole

# Register LicenseRole in _seisware_sdk_37:
_seisware_sdk_37.LicenseRole_swigregister(LicenseRole)

class LicenseComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.LicenseComponent_swiginit(self, _seisware_sdk_37.new_LicenseComponent())
    name = property(_seisware_sdk_37.LicenseComponent_name_get, _seisware_sdk_37.LicenseComponent_name_set)
    displayName = property(_seisware_sdk_37.LicenseComponent_displayName_get, _seisware_sdk_37.LicenseComponent_displayName_set)
    owner = property(_seisware_sdk_37.LicenseComponent_owner_get, _seisware_sdk_37.LicenseComponent_owner_set)
    totalCount = property(_seisware_sdk_37.LicenseComponent_totalCount_get, _seisware_sdk_37.LicenseComponent_totalCount_set)
    licenseStartDate = property(_seisware_sdk_37.LicenseComponent_licenseStartDate_get, _seisware_sdk_37.LicenseComponent_licenseStartDate_set)
    licenseEndDate = property(_seisware_sdk_37.LicenseComponent_licenseEndDate_get, _seisware_sdk_37.LicenseComponent_licenseEndDate_set)
    licenseID = property(_seisware_sdk_37.LicenseComponent_licenseID_get, _seisware_sdk_37.LicenseComponent_licenseID_set)
    mainComponent = property(_seisware_sdk_37.LicenseComponent_mainComponent_get, _seisware_sdk_37.LicenseComponent_mainComponent_set)
    isExpiring = property(_seisware_sdk_37.LicenseComponent_isExpiring_get, _seisware_sdk_37.LicenseComponent_isExpiring_set)
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseComponent

# Register LicenseComponent in _seisware_sdk_37:
_seisware_sdk_37.LicenseComponent_swigregister(LicenseComponent)

class LicenseInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    components = property(_seisware_sdk_37.LicenseInfo_components_get, _seisware_sdk_37.LicenseInfo_components_set)

    def __init__(self):
        _seisware_sdk_37.LicenseInfo_swiginit(self, _seisware_sdk_37.new_LicenseInfo())
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseInfo

# Register LicenseInfo in _seisware_sdk_37:
_seisware_sdk_37.LicenseInfo_swigregister(LicenseInfo)

class UserLicenseUsage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _seisware_sdk_37.UserLicenseUsage___eq__(self, other)
    userName = property(_seisware_sdk_37.UserLicenseUsage_userName_get, _seisware_sdk_37.UserLicenseUsage_userName_set)
    inUse = property(_seisware_sdk_37.UserLicenseUsage_inUse_get, _seisware_sdk_37.UserLicenseUsage_inUse_set)
    reserved = property(_seisware_sdk_37.UserLicenseUsage_reserved_get, _seisware_sdk_37.UserLicenseUsage_reserved_set)

    def __init__(self):
        _seisware_sdk_37.UserLicenseUsage_swiginit(self, _seisware_sdk_37.new_UserLicenseUsage())
    __swig_destroy__ = _seisware_sdk_37.delete_UserLicenseUsage

# Register UserLicenseUsage in _seisware_sdk_37:
_seisware_sdk_37.UserLicenseUsage_swigregister(UserLicenseUsage)

class LicenseUsageInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _seisware_sdk_37.LicenseUsageInfo___eq__(self, other)
    licenseType = property(_seisware_sdk_37.LicenseUsageInfo_licenseType_get, _seisware_sdk_37.LicenseUsageInfo_licenseType_set)
    totalCount = property(_seisware_sdk_37.LicenseUsageInfo_totalCount_get, _seisware_sdk_37.LicenseUsageInfo_totalCount_set)
    totalInUse = property(_seisware_sdk_37.LicenseUsageInfo_totalInUse_get, _seisware_sdk_37.LicenseUsageInfo_totalInUse_set)
    totalReserved = property(_seisware_sdk_37.LicenseUsageInfo_totalReserved_get, _seisware_sdk_37.LicenseUsageInfo_totalReserved_set)
    licenseEndDate = property(_seisware_sdk_37.LicenseUsageInfo_licenseEndDate_get, _seisware_sdk_37.LicenseUsageInfo_licenseEndDate_set)
    userUsages = property(_seisware_sdk_37.LicenseUsageInfo_userUsages_get, _seisware_sdk_37.LicenseUsageInfo_userUsages_set)

    def __init__(self):
        _seisware_sdk_37.LicenseUsageInfo_swiginit(self, _seisware_sdk_37.new_LicenseUsageInfo())
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseUsageInfo

# Register LicenseUsageInfo in _seisware_sdk_37:
_seisware_sdk_37.LicenseUsageInfo_swigregister(LicenseUsageInfo)

class OrganizationLicenseRoles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.OrganizationLicenseRoles_swiginit(self, _seisware_sdk_37.new_OrganizationLicenseRoles())
    id = property(_seisware_sdk_37.OrganizationLicenseRoles_id_get, _seisware_sdk_37.OrganizationLicenseRoles_id_set)
    name = property(_seisware_sdk_37.OrganizationLicenseRoles_name_get, _seisware_sdk_37.OrganizationLicenseRoles_name_set)
    roles = property(_seisware_sdk_37.OrganizationLicenseRoles_roles_get, _seisware_sdk_37.OrganizationLicenseRoles_roles_set)
    __swig_destroy__ = _seisware_sdk_37.delete_OrganizationLicenseRoles

# Register OrganizationLicenseRoles in _seisware_sdk_37:
_seisware_sdk_37.OrganizationLicenseRoles_swigregister(OrganizationLicenseRoles)

class LicenseUserInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_seisware_sdk_37.LicenseUserInfo_id_get, _seisware_sdk_37.LicenseUserInfo_id_set)
    email = property(_seisware_sdk_37.LicenseUserInfo_email_get, _seisware_sdk_37.LicenseUserInfo_email_set)
    roles = property(_seisware_sdk_37.LicenseUserInfo_roles_get, _seisware_sdk_37.LicenseUserInfo_roles_set)

    def __init__(self):
        _seisware_sdk_37.LicenseUserInfo_swiginit(self, _seisware_sdk_37.new_LicenseUserInfo())
    __swig_destroy__ = _seisware_sdk_37.delete_LicenseUserInfo

# Register LicenseUserInfo in _seisware_sdk_37:
_seisware_sdk_37.LicenseUserInfo_swigregister(LicenseUserInfo)

class LoginInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _seisware_sdk_37.LoginInstance_swiginit(self, _seisware_sdk_37.new_LoginInstance())
    __swig_destroy__ = _seisware_sdk_37.delete_LoginInstance

    def ID(self):
        return _seisware_sdk_37.LoginInstance_ID(self)

    def Open(self, *args):
        return _seisware_sdk_37.LoginInstance_Open(self, *args)

    def Connection(self):
        return _seisware_sdk_37.LoginInstance_Connection(self)

    def Refresh(self):
        return _seisware_sdk_37.LoginInstance_Refresh(self)

    def EffectiveOwner(self):
        return _seisware_sdk_37.LoginInstance_EffectiveOwner(self)

    def CurrentRole(self, *args):
        return _seisware_sdk_37.LoginInstance_CurrentRole(self, *args)

    def HasMessagingServer(self):
        return _seisware_sdk_37.LoginInstance_HasMessagingServer(self)

    def Project(self):
        return _seisware_sdk_37.LoginInstance_Project(self)

    def GridManager(self):
        return _seisware_sdk_37.LoginInstance_GridManager(self)

    def WellManager(self):
        return _seisware_sdk_37.LoginInstance_WellManager(self)

    def WellTopManager(self):
        return _seisware_sdk_37.LoginInstance_WellTopManager(self)

    def LogCurveManager(self):
        return _seisware_sdk_37.LoginInstance_LogCurveManager(self)

    def LogRasterManager(self):
        return _seisware_sdk_37.LoginInstance_LogRasterManager(self)

    def DirectionalSurveyManager(self):
        return _seisware_sdk_37.LoginInstance_DirectionalSurveyManager(self)

    def CultureManager(self):
        return _seisware_sdk_37.LoginInstance_CultureManager(self)

    def ProductionManager(self):
        return _seisware_sdk_37.LoginInstance_ProductionManager(self)

    def FaultManager(self):
        return _seisware_sdk_37.LoginInstance_FaultManager(self)

    def HorizonManager(self):
        return _seisware_sdk_37.LoginInstance_HorizonManager(self)

    def HorizonPicksManager(self):
        return _seisware_sdk_37.LoginInstance_HorizonPicksManager(self)

    def SeismicSurveyManager(self):
        return _seisware_sdk_37.LoginInstance_SeismicSurveyManager(self)

    def SeismicVolumeManager(self):
        return _seisware_sdk_37.LoginInstance_SeismicVolumeManager(self)

    def MessageManager(self):
        return _seisware_sdk_37.LoginInstance_MessageManager(self)

    def TimeDepthCurveManager(self):
        return _seisware_sdk_37.LoginInstance_TimeDepthCurveManager(self)

    def FilterManager(self):
        return _seisware_sdk_37.LoginInstance_FilterManager(self)

    def RasterManager(self):
        return _seisware_sdk_37.LoginInstance_RasterManager(self)

    def BlobManager(self):
        return _seisware_sdk_37.LoginInstance_BlobManager(self)

    def ZoneManager(self):
        return _seisware_sdk_37.LoginInstance_ZoneManager(self)

    def ZoneAttributeManager(self):
        return _seisware_sdk_37.LoginInstance_ZoneAttributeManager(self)

    def WellZoneManager(self):
        return _seisware_sdk_37.LoginInstance_WellZoneManager(self)

    def FormationManager(self):
        return _seisware_sdk_37.LoginInstance_FormationManager(self)

    def SourceManager(self):
        return _seisware_sdk_37.LoginInstance_SourceManager(self)

    def UserManager(self):
        return _seisware_sdk_37.LoginInstance_UserManager(self)

    def CompletionManager(self):
        return _seisware_sdk_37.LoginInstance_CompletionManager(self)

    def AliasManager(self):
        return _seisware_sdk_37.LoginInstance_AliasManager(self)

    def CrossSectionManager(self):
        return _seisware_sdk_37.LoginInstance_CrossSectionManager(self)

    def TracksTemplateManager(self):
        return _seisware_sdk_37.LoginInstance_TracksTemplateManager(self)

    def ZoneTypeManager(self):
        return _seisware_sdk_37.LoginInstance_ZoneTypeManager(self)

    def DisplayedZonesManager(self):
        return _seisware_sdk_37.LoginInstance_DisplayedZonesManager(self)

    def Timeout(self, *args):
        return _seisware_sdk_37.LoginInstance_Timeout(self, *args)

    def Token(self):
        return _seisware_sdk_37.LoginInstance_Token(self)

    def Terminate(self):
        return _seisware_sdk_37.LoginInstance_Terminate(self)

# Register LoginInstance in _seisware_sdk_37:
_seisware_sdk_37.LoginInstance_swigregister(LoginInstance)

DatabaseType_Default = _seisware_sdk_37.DatabaseType_Default
DatabaseType_Access = _seisware_sdk_37.DatabaseType_Access
DatabaseType_SqlServer = _seisware_sdk_37.DatabaseType_SqlServer
DatabaseType_SqlLocalDB = _seisware_sdk_37.DatabaseType_SqlLocalDB
ProjectStatus_Unknown = _seisware_sdk_37.ProjectStatus_Unknown
ProjectStatus_NeedsUpgrade = _seisware_sdk_37.ProjectStatus_NeedsUpgrade
ProjectStatus_ForwardCompatible = _seisware_sdk_37.ProjectStatus_ForwardCompatible
ProjectStatus_Incompatible = _seisware_sdk_37.ProjectStatus_Incompatible
ProjectStatus_Equivalent = _seisware_sdk_37.ProjectStatus_Equivalent
ProjectStatus_InvalidLocalDB = _seisware_sdk_37.ProjectStatus_InvalidLocalDB
ProjectStatus_ReadOnly = _seisware_sdk_37.ProjectStatus_ReadOnly
class Project(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Project_swiginit(self, _seisware_sdk_37.new_Project(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Project

    def ID(self):
        return _seisware_sdk_37.Project_ID(self)

    def Name(self, *args):
        return _seisware_sdk_37.Project_Name(self, *args)

    def SeismicDataDirectory(self, *args):
        return _seisware_sdk_37.Project_SeismicDataDirectory(self, *args)

    def Directory(self, *args):
        return _seisware_sdk_37.Project_Directory(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.Project_Description(self, *args)

    def ServerName(self, *args):
        return _seisware_sdk_37.Project_ServerName(self, *args)

    def MessagingServerEndpoint(self, *args):
        return _seisware_sdk_37.Project_MessagingServerEndpoint(self, *args)

    def MessagingServerName(self, *args):
        return _seisware_sdk_37.Project_MessagingServerName(self, *args)

    def MessagingServerPort(self, *args):
        return _seisware_sdk_37.Project_MessagingServerPort(self, *args)

    def DatabaseName(self, *args):
        return _seisware_sdk_37.Project_DatabaseName(self, *args)

    def DatabaseFile(self, *args):
        return _seisware_sdk_37.Project_DatabaseFile(self, *args)

    def DatabaseType(self, *args):
        return _seisware_sdk_37.Project_DatabaseType(self, *args)

    def SeisxCompatible(self, *args):
        return _seisware_sdk_37.Project_SeisxCompatible(self, *args)

    def CoordinateSystem(self):
        return _seisware_sdk_37.Project_CoordinateSystem(self)

    def SetCoordinateSystem(self, coordSystem):
        return _seisware_sdk_37.Project_SetCoordinateSystem(self, coordSystem)

    def DepthDatum(self):
        return _seisware_sdk_37.Project_DepthDatum(self)

    def TimeDatum(self):
        return _seisware_sdk_37.Project_TimeDatum(self)

    def DefaultDepthUnit(self):
        return _seisware_sdk_37.Project_DefaultDepthUnit(self)

    def SetDefaultDepthUnit(self, defaultDepthUnit):
        return _seisware_sdk_37.Project_SetDefaultDepthUnit(self, defaultDepthUnit)

    def DefaultSurfaceUnit(self):
        return _seisware_sdk_37.Project_DefaultSurfaceUnit(self)

    def Palettes(self):
        return _seisware_sdk_37.Project_Palettes(self)

# Register Project in _seisware_sdk_37:
_seisware_sdk_37.Project_swigregister(Project)

class ProjectManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_ProjectManager

    def GetAll(self, projects):
        return _seisware_sdk_37.ProjectManager_GetAll(self, projects)

    def GetByKeys(self, keys, projects, failedKeys):
        return _seisware_sdk_37.ProjectManager_GetByKeys(self, keys, projects, failedKeys)

    def Add(self, project):
        return _seisware_sdk_37.ProjectManager_Add(self, project)

    def Attach(self, projectPath):
        return _seisware_sdk_37.ProjectManager_Attach(self, projectPath)

    def Remove(self, project):
        return _seisware_sdk_37.ProjectManager_Remove(self, project)

    def Update(self, project):
        return _seisware_sdk_37.ProjectManager_Update(self, project)

    def Upgrade(self, *args):
        return _seisware_sdk_37.ProjectManager_Upgrade(self, *args)

    def DoesRequireUpgrade(self, *args):
        return _seisware_sdk_37.ProjectManager_DoesRequireUpgrade(self, *args)

    def Populate(self, project):
        return _seisware_sdk_37.ProjectManager_Populate(self, project)

    def GetStatus(self, *args):
        return _seisware_sdk_37.ProjectManager_GetStatus(self, *args)

    def GetLoginUser(self, key):
        return _seisware_sdk_37.ProjectManager_GetLoginUser(self, key)

# Register ProjectManager in _seisware_sdk_37:
_seisware_sdk_37.ProjectManager_swigregister(ProjectManager)

class ProjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ProjectList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ProjectList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ProjectList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ProjectList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ProjectList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ProjectList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ProjectList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ProjectList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ProjectList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ProjectList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ProjectList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ProjectList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ProjectList_empty(self)

    def size(self):
        return _seisware_sdk_37.ProjectList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ProjectList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ProjectList_begin(self)

    def end(self):
        return _seisware_sdk_37.ProjectList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ProjectList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ProjectList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ProjectList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ProjectList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ProjectList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ProjectList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ProjectList_swiginit(self, _seisware_sdk_37.new_ProjectList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ProjectList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ProjectList_front(self)

    def back(self):
        return _seisware_sdk_37.ProjectList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ProjectList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ProjectList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ProjectList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ProjectList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ProjectList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ProjectList

# Register ProjectList in _seisware_sdk_37:
_seisware_sdk_37.ProjectList_swigregister(ProjectList)

class PaletteList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.PaletteList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.PaletteList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.PaletteList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.PaletteList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.PaletteList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.PaletteList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.PaletteList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.PaletteList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.PaletteList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.PaletteList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.PaletteList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.PaletteList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.PaletteList_empty(self)

    def size(self):
        return _seisware_sdk_37.PaletteList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.PaletteList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.PaletteList_begin(self)

    def end(self):
        return _seisware_sdk_37.PaletteList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.PaletteList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.PaletteList_rend(self)

    def clear(self):
        return _seisware_sdk_37.PaletteList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.PaletteList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.PaletteList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.PaletteList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.PaletteList_swiginit(self, _seisware_sdk_37.new_PaletteList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.PaletteList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.PaletteList_front(self)

    def back(self):
        return _seisware_sdk_37.PaletteList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.PaletteList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.PaletteList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.PaletteList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.PaletteList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.PaletteList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_PaletteList

# Register PaletteList in _seisware_sdk_37:
_seisware_sdk_37.PaletteList_swigregister(PaletteList)

GridType_SeisX = _seisware_sdk_37.GridType_SeisX
GridType_Surfer = _seisware_sdk_37.GridType_Surfer
GridType_Surfer7 = _seisware_sdk_37.GridType_Surfer7
class Grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Grid_swiginit(self, _seisware_sdk_37.new_Grid(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Grid

    def ID(self, *args):
        return _seisware_sdk_37.Grid_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Grid_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.Grid_Description(self, *args)

    def Filename(self):
        return _seisware_sdk_37.Grid_Filename(self)

    def GridFormat(self):
        return _seisware_sdk_37.Grid_GridFormat(self)

    def OwnerID(self):
        return _seisware_sdk_37.Grid_OwnerID(self)

    def RmsError(self, *args):
        return _seisware_sdk_37.Grid_RmsError(self, *args)

    def MinZ(self):
        return _seisware_sdk_37.Grid_MinZ(self)

    def MaxZ(self):
        return _seisware_sdk_37.Grid_MaxZ(self)

    def DataLastModified(self):
        return _seisware_sdk_37.Grid_DataLastModified(self)

    def Definition(self, *args):
        return _seisware_sdk_37.Grid_Definition(self, *args)

    def Values(self, values):
        return _seisware_sdk_37.Grid_Values(self, values)

    def SetValues(self, values):
        return _seisware_sdk_37.Grid_SetValues(self, values)

# Register Grid in _seisware_sdk_37:
_seisware_sdk_37.Grid_swigregister(Grid)

class GridDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridDefinition_swiginit(self, _seisware_sdk_37.new_GridDefinition(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_GridDefinition

    def Define(self, rangeX, rangeY):
        return _seisware_sdk_37.GridDefinition_Define(self, rangeX, rangeY)

    def RangeX(self):
        return _seisware_sdk_37.GridDefinition_RangeX(self)

    def RangeY(self):
        return _seisware_sdk_37.GridDefinition_RangeY(self)

    def ToWorld(self, *args):
        return _seisware_sdk_37.GridDefinition_ToWorld(self, *args)

    def ToGrid(self, worldPos):
        return _seisware_sdk_37.GridDefinition_ToGrid(self, worldPos)

    def ToNearestGrid(self, worldPos):
        return _seisware_sdk_37.GridDefinition_ToNearestGrid(self, worldPos)

    def Bounds(self):
        return _seisware_sdk_37.GridDefinition_Bounds(self)

# Register GridDefinition in _seisware_sdk_37:
_seisware_sdk_37.GridDefinition_swigregister(GridDefinition)

class GridManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_GridManager

    def LoadCache(self):
        return _seisware_sdk_37.GridManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.GridManager_GetAll(self, items)

    def GetByKeys(self, *args):
        return _seisware_sdk_37.GridManager_GetByKeys(self, *args)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.GridManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.GridManager_Add(self, *args)

    def Remove(self, item):
        return _seisware_sdk_37.GridManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.GridManager_Update(self, item)

    def ChangeOwner(self, item, ownerID):
        return _seisware_sdk_37.GridManager_ChangeOwner(self, item, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.GridManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.GridManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.GridManager_CanUpdate(self, item)

    def CanChangeOwner(self, item):
        return _seisware_sdk_37.GridManager_CanChangeOwner(self, item)

    def PopulateValues(self, item):
        return _seisware_sdk_37.GridManager_PopulateValues(self, item)

# Register GridManager in _seisware_sdk_37:
_seisware_sdk_37.GridManager_swigregister(GridManager)

class GridValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridValues_swiginit(self, _seisware_sdk_37.new_GridValues(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_GridValues

    def GetValue(self, index):
        return _seisware_sdk_37.GridValues_GetValue(self, index)

    def SetValue(self, index, value):
        return _seisware_sdk_37.GridValues_SetValue(self, index, value)

    def Width(self):
        return _seisware_sdk_37.GridValues_Width(self)

    def Height(self):
        return _seisware_sdk_37.GridValues_Height(self)

    def Size(self):
        return _seisware_sdk_37.GridValues_Size(self)

    def Data(self, *args):
        return _seisware_sdk_37.GridValues_Data(self, *args)

    def NullValue(self, *args):
        return _seisware_sdk_37.GridValues_NullValue(self, *args)

# Register GridValues in _seisware_sdk_37:
_seisware_sdk_37.GridValues_swigregister(GridValues)

class GridList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.GridList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.GridList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.GridList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.GridList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.GridList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.GridList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.GridList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.GridList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.GridList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.GridList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.GridList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.GridList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.GridList_empty(self)

    def size(self):
        return _seisware_sdk_37.GridList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.GridList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.GridList_begin(self)

    def end(self):
        return _seisware_sdk_37.GridList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.GridList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.GridList_rend(self)

    def clear(self):
        return _seisware_sdk_37.GridList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.GridList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.GridList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.GridList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.GridList_swiginit(self, _seisware_sdk_37.new_GridList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.GridList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.GridList_front(self)

    def back(self):
        return _seisware_sdk_37.GridList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.GridList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.GridList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.GridList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.GridList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.GridList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_GridList

# Register GridList in _seisware_sdk_37:
_seisware_sdk_37.GridList_swigregister(GridList)

DepthDatum_KB = _seisware_sdk_37.DepthDatum_KB
DepthDatum_Surface = _seisware_sdk_37.DepthDatum_Surface
DepthDatum_Unknown = _seisware_sdk_37.DepthDatum_Unknown
class Well(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InvalidWellSymbolCode = _seisware_sdk_37.Well_InvalidWellSymbolCode

    def __init__(self, *args):
        _seisware_sdk_37.Well_swiginit(self, _seisware_sdk_37.new_Well(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Well

    def ID(self, *args):
        return _seisware_sdk_37.Well_ID(self, *args)

    def UWI(self, *args):
        return _seisware_sdk_37.Well_UWI(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Well_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Well_OwnerID(self)

    def Description(self, *args):
        return _seisware_sdk_37.Well_Description(self, *args)

    def Symbol(self, *args):
        return _seisware_sdk_37.Well_Symbol(self, *args)

    def Number(self, *args):
        return _seisware_sdk_37.Well_Number(self, *args)

    def GovernmentID(self, *args):
        return _seisware_sdk_37.Well_GovernmentID(self, *args)

    def PlatformID(self, *args):
        return _seisware_sdk_37.Well_PlatformID(self, *args)

    def LeaseOperator(self, *args):
        return _seisware_sdk_37.Well_LeaseOperator(self, *args)

    def LeaseName(self, *args):
        return _seisware_sdk_37.Well_LeaseName(self, *args)

    def State(self, *args):
        return _seisware_sdk_37.Well_State(self, *args)

    def County(self, *args):
        return _seisware_sdk_37.Well_County(self, *args)

    def Field(self, *args):
        return _seisware_sdk_37.Well_Field(self, *args)

    def SpudDate(self, *args):
        return _seisware_sdk_37.Well_SpudDate(self, *args)

    def StatusDate(self, *args):
        return _seisware_sdk_37.Well_StatusDate(self, *args)

    def RigRelDate(self, *args):
        return _seisware_sdk_37.Well_RigRelDate(self, *args)

    def TopHole(self, *args):
        return _seisware_sdk_37.Well_TopHole(self, *args)

    def BottomHole(self, *args):
        return _seisware_sdk_37.Well_BottomHole(self, *args)

    def SurfaceLoc(self, *args):
        return _seisware_sdk_37.Well_SurfaceLoc(self, *args)

    def BottomLoc(self, *args):
        return _seisware_sdk_37.Well_BottomLoc(self, *args)

    def DatumElevation(self, *args):
        return _seisware_sdk_37.Well_DatumElevation(self, *args)

    def KB(self, *args):
        return _seisware_sdk_37.Well_KB(self, *args)

    def GroundElevation(self, *args):
        return _seisware_sdk_37.Well_GroundElevation(self, *args)

    def TotalDepth(self, *args):
        return _seisware_sdk_37.Well_TotalDepth(self, *args)

    def VerticalDepth(self, *args):
        return _seisware_sdk_37.Well_VerticalDepth(self, *args)

    def WaterDepth(self, *args):
        return _seisware_sdk_37.Well_WaterDepth(self, *args)

    def DepthDatumUnit(self, *args):
        return _seisware_sdk_37.Well_DepthDatumUnit(self, *args)

    def WellStatus(self, *args):
        return _seisware_sdk_37.Well_WellStatus(self, *args)

# Register Well in _seisware_sdk_37:
_seisware_sdk_37.Well_swigregister(Well)

class WellManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_WellManager

    def LoadCache(self):
        return _seisware_sdk_37.WellManager_LoadCache(self)

    def GetAll(self, wellList):
        return _seisware_sdk_37.WellManager_GetAll(self, wellList)

    def GetByKeys(self, keys, wellList, failedKeys):
        return _seisware_sdk_37.WellManager_GetByKeys(self, keys, wellList, failedKeys)

    def GetByNaturalKeys(self, uwis, wellList, failedUWIs):
        return _seisware_sdk_37.WellManager_GetByNaturalKeys(self, uwis, wellList, failedUWIs)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.WellManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.WellManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.WellManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.WellManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.WellManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.WellManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.WellManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.WellManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.WellManager_CanChangeOwner(self, *args)

    def GetAllWellSymbols(self):
        return _seisware_sdk_37.WellManager_GetAllWellSymbols(self)

# Register WellManager in _seisware_sdk_37:
_seisware_sdk_37.WellManager_swigregister(WellManager)

class WellList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellList_swiginit(self, _seisware_sdk_37.new_WellList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellList_front(self)

    def back(self):
        return _seisware_sdk_37.WellList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellList

# Register WellList in _seisware_sdk_37:
_seisware_sdk_37.WellList_swigregister(WellList)

class WellSymbolLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellSymbolLookup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellSymbolLookup___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellSymbolLookup___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellSymbolLookup___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.WellSymbolLookup___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.WellSymbolLookup___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.WellSymbolLookup_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.WellSymbolLookup_keys(self)

    def values(self):
        return _seisware_sdk_37.WellSymbolLookup_values(self)

    def items(self):
        return _seisware_sdk_37.WellSymbolLookup_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.WellSymbolLookup___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.WellSymbolLookup_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.WellSymbolLookup_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellSymbolLookup___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.WellSymbolLookup_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.WellSymbolLookup_swiginit(self, _seisware_sdk_37.new_WellSymbolLookup(*args))

    def empty(self):
        return _seisware_sdk_37.WellSymbolLookup_empty(self)

    def size(self):
        return _seisware_sdk_37.WellSymbolLookup_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellSymbolLookup_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellSymbolLookup_begin(self)

    def end(self):
        return _seisware_sdk_37.WellSymbolLookup_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellSymbolLookup_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellSymbolLookup_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellSymbolLookup_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellSymbolLookup_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.WellSymbolLookup_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.WellSymbolLookup_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.WellSymbolLookup_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.WellSymbolLookup_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.WellSymbolLookup_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_WellSymbolLookup

# Register WellSymbolLookup in _seisware_sdk_37:
_seisware_sdk_37.WellSymbolLookup_swigregister(WellSymbolLookup)

class WellOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellOwnerPair_swiginit(self, _seisware_sdk_37.new_WellOwnerPair(*args))
    first = property(_seisware_sdk_37.WellOwnerPair_first_get, _seisware_sdk_37.WellOwnerPair_first_set)
    second = property(_seisware_sdk_37.WellOwnerPair_second_get, _seisware_sdk_37.WellOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_WellOwnerPair

# Register WellOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.WellOwnerPair_swigregister(WellOwnerPair)

class WellOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellOwnerPairList_swiginit(self, _seisware_sdk_37.new_WellOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.WellOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellOwnerPairList

# Register WellOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.WellOwnerPairList_swigregister(WellOwnerPairList)

WellTopType_TVD = _seisware_sdk_37.WellTopType_TVD
WellTopType_MD = _seisware_sdk_37.WellTopType_MD
class WellTop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellTop_swiginit(self, _seisware_sdk_37.new_WellTop(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_WellTop

    def ID(self, *args):
        return _seisware_sdk_37.WellTop_ID(self, *args)

    def Formation(self, *args):
        return _seisware_sdk_37.WellTop_Formation(self, *args)

    def MD(self, *args):
        return _seisware_sdk_37.WellTop_MD(self, *args)

    def TVD(self, *args):
        return _seisware_sdk_37.WellTop_TVD(self, *args)

    def Depth(self, *args):
        return _seisware_sdk_37.WellTop_Depth(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.WellTop_OwnerID(self)

    def TopType(self, *args):
        return _seisware_sdk_37.WellTop_TopType(self, *args)

    def Source(self, *args):
        return _seisware_sdk_37.WellTop_Source(self, *args)

    def ParentID(self, *args):
        return _seisware_sdk_37.WellTop_ParentID(self, *args)

# Register WellTop in _seisware_sdk_37:
_seisware_sdk_37.WellTop_swigregister(WellTop)

class WellTopManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_WellTopManager

    def LoadCache(self):
        return _seisware_sdk_37.WellTopManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.WellTopManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.WellTopManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.WellTopManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForWell(self, wellKey, items):
        return _seisware_sdk_37.WellTopManager_GetAllForWell(self, wellKey, items)

    def Add(self, *args):
        return _seisware_sdk_37.WellTopManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.WellTopManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.WellTopManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.WellTopManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.WellTopManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.WellTopManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.WellTopManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.WellTopManager_CanChangeOwner(self, *args)

# Register WellTopManager in _seisware_sdk_37:
_seisware_sdk_37.WellTopManager_swigregister(WellTopManager)

class WellTopList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellTopList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellTopList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellTopList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellTopList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellTopList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellTopList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellTopList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellTopList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellTopList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellTopList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellTopList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellTopList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellTopList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellTopList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellTopList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellTopList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellTopList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellTopList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellTopList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellTopList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellTopList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellTopList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellTopList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellTopList_swiginit(self, _seisware_sdk_37.new_WellTopList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellTopList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellTopList_front(self)

    def back(self):
        return _seisware_sdk_37.WellTopList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellTopList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellTopList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellTopList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellTopList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellTopList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellTopList

# Register WellTopList in _seisware_sdk_37:
_seisware_sdk_37.WellTopList_swigregister(WellTopList)

class WellTopOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellTopOwnerPair_swiginit(self, _seisware_sdk_37.new_WellTopOwnerPair(*args))
    first = property(_seisware_sdk_37.WellTopOwnerPair_first_get, _seisware_sdk_37.WellTopOwnerPair_first_set)
    second = property(_seisware_sdk_37.WellTopOwnerPair_second_get, _seisware_sdk_37.WellTopOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_WellTopOwnerPair

# Register WellTopOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.WellTopOwnerPair_swigregister(WellTopOwnerPair)

class WellTopOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellTopOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellTopOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellTopOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellTopOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellTopOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellTopOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellTopOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellTopOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellTopOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellTopOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellTopOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellTopOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellTopOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellTopOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellTopOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellTopOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellTopOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellTopOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellTopOwnerPairList_swiginit(self, _seisware_sdk_37.new_WellTopOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellTopOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellTopOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.WellTopOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellTopOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellTopOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellTopOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellTopOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellTopOwnerPairList

# Register WellTopOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.WellTopOwnerPairList_swigregister(WellTopOwnerPairList)

LogCurveType_Sonic = _seisware_sdk_37.LogCurveType_Sonic
LogCurveType_Density = _seisware_sdk_37.LogCurveType_Density
LogCurveType_GammaRay = _seisware_sdk_37.LogCurveType_GammaRay
LogCurveType_Depth = _seisware_sdk_37.LogCurveType_Depth
LogCurveType_Synthetic = _seisware_sdk_37.LogCurveType_Synthetic
LogCurveType_Unknown = _seisware_sdk_37.LogCurveType_Unknown
class LogCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.LogCurve_swiginit(self, _seisware_sdk_37.new_LogCurve(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_LogCurve

    def ID(self, *args):
        return _seisware_sdk_37.LogCurve_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.LogCurve_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.LogCurve_OwnerID(self)

    def Description(self, *args):
        return _seisware_sdk_37.LogCurve_Description(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.LogCurve_Type(self, *args)

    def CurveUom(self, *args):
        return _seisware_sdk_37.LogCurve_CurveUom(self, *args)

    def Source(self, *args):
        return _seisware_sdk_37.LogCurve_Source(self, *args)

    def NullValue(self, *args):
        return _seisware_sdk_37.LogCurve_NullValue(self, *args)

    def BaseDepth(self, *args):
        return _seisware_sdk_37.LogCurve_BaseDepth(self, *args)

    def TopDepth(self, *args):
        return _seisware_sdk_37.LogCurve_TopDepth(self, *args)

    def DepthInc(self, *args):
        return _seisware_sdk_37.LogCurve_DepthInc(self, *args)

    def ParentID(self, *args):
        return _seisware_sdk_37.LogCurve_ParentID(self, *args)

    def DataLastModified(self):
        return _seisware_sdk_37.LogCurve_DataLastModified(self)

    def Values(self, values):
        return _seisware_sdk_37.LogCurve_Values(self, values)

    def SetValues(self, values):
        return _seisware_sdk_37.LogCurve_SetValues(self, values)

# Register LogCurve in _seisware_sdk_37:
_seisware_sdk_37.LogCurve_swigregister(LogCurve)

class LogCurveManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_LogCurveManager

    def LoadCache(self):
        return _seisware_sdk_37.LogCurveManager_LoadCache(self)

    def GetAll(self, logCurveList):
        return _seisware_sdk_37.LogCurveManager_GetAll(self, logCurveList)

    def GetByKeys(self, keys, logCurveList, failedKeys):
        return _seisware_sdk_37.LogCurveManager_GetByKeys(self, keys, logCurveList, failedKeys)

    def GetAllForWell(self, wellKey, logCurveList):
        return _seisware_sdk_37.LogCurveManager_GetAllForWell(self, wellKey, logCurveList)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.LogCurveManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.LogCurveManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.LogCurveManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.LogCurveManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.LogCurveManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.LogCurveManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.LogCurveManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.LogCurveManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.LogCurveManager_CanChangeOwner(self, *args)

    def PopulateValues(self, *args):
        return _seisware_sdk_37.LogCurveManager_PopulateValues(self, *args)

# Register LogCurveManager in _seisware_sdk_37:
_seisware_sdk_37.LogCurveManager_swigregister(LogCurveManager)

class LogCurveList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.LogCurveList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.LogCurveList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.LogCurveList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.LogCurveList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.LogCurveList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.LogCurveList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.LogCurveList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.LogCurveList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.LogCurveList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.LogCurveList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.LogCurveList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.LogCurveList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.LogCurveList_empty(self)

    def size(self):
        return _seisware_sdk_37.LogCurveList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.LogCurveList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.LogCurveList_begin(self)

    def end(self):
        return _seisware_sdk_37.LogCurveList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.LogCurveList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.LogCurveList_rend(self)

    def clear(self):
        return _seisware_sdk_37.LogCurveList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.LogCurveList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.LogCurveList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.LogCurveList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.LogCurveList_swiginit(self, _seisware_sdk_37.new_LogCurveList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.LogCurveList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.LogCurveList_front(self)

    def back(self):
        return _seisware_sdk_37.LogCurveList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.LogCurveList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.LogCurveList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.LogCurveList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.LogCurveList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.LogCurveList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_LogCurveList

# Register LogCurveList in _seisware_sdk_37:
_seisware_sdk_37.LogCurveList_swigregister(LogCurveList)

class LogCurveOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.LogCurveOwnerPair_swiginit(self, _seisware_sdk_37.new_LogCurveOwnerPair(*args))
    first = property(_seisware_sdk_37.LogCurveOwnerPair_first_get, _seisware_sdk_37.LogCurveOwnerPair_first_set)
    second = property(_seisware_sdk_37.LogCurveOwnerPair_second_get, _seisware_sdk_37.LogCurveOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_LogCurveOwnerPair

# Register LogCurveOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.LogCurveOwnerPair_swigregister(LogCurveOwnerPair)

class LogCurveOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.LogCurveOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.LogCurveOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.LogCurveOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.LogCurveOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.LogCurveOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.LogCurveOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.LogCurveOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.LogCurveOwnerPairList_swiginit(self, _seisware_sdk_37.new_LogCurveOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.LogCurveOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.LogCurveOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.LogCurveOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.LogCurveOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.LogCurveOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_LogCurveOwnerPairList

# Register LogCurveOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.LogCurveOwnerPairList_swigregister(LogCurveOwnerPairList)

class LogRasterCalibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.LogRasterCalibration_swiginit(self, _seisware_sdk_37.new_LogRasterCalibration(*args))
    leftPixel = property(_seisware_sdk_37.LogRasterCalibration_leftPixel_get, _seisware_sdk_37.LogRasterCalibration_leftPixel_set)
    rightPixel = property(_seisware_sdk_37.LogRasterCalibration_rightPixel_get, _seisware_sdk_37.LogRasterCalibration_rightPixel_set)
    depth = property(_seisware_sdk_37.LogRasterCalibration_depth_get, _seisware_sdk_37.LogRasterCalibration_depth_set)
    __swig_destroy__ = _seisware_sdk_37.delete_LogRasterCalibration

# Register LogRasterCalibration in _seisware_sdk_37:
_seisware_sdk_37.LogRasterCalibration_swigregister(LogRasterCalibration)

class LogRaster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.LogRaster_swiginit(self, _seisware_sdk_37.new_LogRaster(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_LogRaster

    def ID(self, *args):
        return _seisware_sdk_37.LogRaster_ID(self, *args)

    def ParentID(self, *args):
        return _seisware_sdk_37.LogRaster_ParentID(self, *args)

    def ImagePath(self, *args):
        return _seisware_sdk_37.LogRaster_ImagePath(self, *args)

    def Calibrations(self, calibrations):
        return _seisware_sdk_37.LogRaster_Calibrations(self, calibrations)

    def SetCalibrations(self, calibrations):
        return _seisware_sdk_37.LogRaster_SetCalibrations(self, calibrations)

# Register LogRaster in _seisware_sdk_37:
_seisware_sdk_37.LogRaster_swigregister(LogRaster)

class LogRasterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_LogRasterManager

    def GetAll(self, items):
        return _seisware_sdk_37.LogRasterManager_GetAll(self, items)

    def GetByKeys(self, keys, logRasters, failedKeys):
        return _seisware_sdk_37.LogRasterManager_GetByKeys(self, keys, logRasters, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.LogRasterManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForLogCurve(self, logCurveKey, items):
        return _seisware_sdk_37.LogRasterManager_GetAllForLogCurve(self, logCurveKey, items)

    def Add(self, item):
        return _seisware_sdk_37.LogRasterManager_Add(self, item)

    def Remove(self, item):
        return _seisware_sdk_37.LogRasterManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.LogRasterManager_Update(self, item)

    def CanAdd(self):
        return _seisware_sdk_37.LogRasterManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.LogRasterManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.LogRasterManager_CanUpdate(self, item)

# Register LogRasterManager in _seisware_sdk_37:
_seisware_sdk_37.LogRasterManager_swigregister(LogRasterManager)

class LogRasterCalibrationList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.LogRasterCalibrationList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.LogRasterCalibrationList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.LogRasterCalibrationList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.LogRasterCalibrationList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.LogRasterCalibrationList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.LogRasterCalibrationList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.LogRasterCalibrationList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.LogRasterCalibrationList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.LogRasterCalibrationList_empty(self)

    def size(self):
        return _seisware_sdk_37.LogRasterCalibrationList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.LogRasterCalibrationList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.LogRasterCalibrationList_begin(self)

    def end(self):
        return _seisware_sdk_37.LogRasterCalibrationList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.LogRasterCalibrationList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.LogRasterCalibrationList_rend(self)

    def clear(self):
        return _seisware_sdk_37.LogRasterCalibrationList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.LogRasterCalibrationList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.LogRasterCalibrationList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.LogRasterCalibrationList_swiginit(self, _seisware_sdk_37.new_LogRasterCalibrationList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.LogRasterCalibrationList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.LogRasterCalibrationList_front(self)

    def back(self):
        return _seisware_sdk_37.LogRasterCalibrationList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.LogRasterCalibrationList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.LogRasterCalibrationList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.LogRasterCalibrationList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.LogRasterCalibrationList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_LogRasterCalibrationList

# Register LogRasterCalibrationList in _seisware_sdk_37:
_seisware_sdk_37.LogRasterCalibrationList_swigregister(LogRasterCalibrationList)

class LogRasterList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.LogRasterList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.LogRasterList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.LogRasterList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.LogRasterList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.LogRasterList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.LogRasterList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.LogRasterList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.LogRasterList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.LogRasterList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.LogRasterList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.LogRasterList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.LogRasterList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.LogRasterList_empty(self)

    def size(self):
        return _seisware_sdk_37.LogRasterList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.LogRasterList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.LogRasterList_begin(self)

    def end(self):
        return _seisware_sdk_37.LogRasterList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.LogRasterList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.LogRasterList_rend(self)

    def clear(self):
        return _seisware_sdk_37.LogRasterList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.LogRasterList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.LogRasterList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.LogRasterList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.LogRasterList_swiginit(self, _seisware_sdk_37.new_LogRasterList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.LogRasterList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.LogRasterList_front(self)

    def back(self):
        return _seisware_sdk_37.LogRasterList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.LogRasterList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.LogRasterList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.LogRasterList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.LogRasterList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.LogRasterList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_LogRasterList

# Register LogRasterList in _seisware_sdk_37:
_seisware_sdk_37.LogRasterList_swigregister(LogRasterList)

DirectionType_TrueNorth = _seisware_sdk_37.DirectionType_TrueNorth
DirectionType_UTMNorth = _seisware_sdk_37.DirectionType_UTMNorth
class DirectionalSurvey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurvey_swiginit(self, _seisware_sdk_37.new_DirectionalSurvey(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurvey

    def ID(self, *args):
        return _seisware_sdk_37.DirectionalSurvey_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.DirectionalSurvey_OwnerID(self)

    def OffsetNorthType(self, *args):
        return _seisware_sdk_37.DirectionalSurvey_OffsetNorthType(self, *args)

    def ParentID(self, *args):
        return _seisware_sdk_37.DirectionalSurvey_ParentID(self, *args)

    def Values(self, values):
        return _seisware_sdk_37.DirectionalSurvey_Values(self, values)

    def SetValues(self, values):
        return _seisware_sdk_37.DirectionalSurvey_SetValues(self, values)

# Register DirectionalSurvey in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurvey_swigregister(DirectionalSurvey)

class DirectionalSurveyManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyManager

    def GetAll(self, items):
        return _seisware_sdk_37.DirectionalSurveyManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.DirectionalSurveyManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.DirectionalSurveyManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForWell(self, wellKey, items):
        return _seisware_sdk_37.DirectionalSurveyManager_GetAllForWell(self, wellKey, items)

    def Add(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.DirectionalSurveyManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_CanChangeOwner(self, *args)

    def PopulateValues(self, *args):
        return _seisware_sdk_37.DirectionalSurveyManager_PopulateValues(self, *args)

# Register DirectionalSurveyManager in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyManager_swigregister(DirectionalSurveyManager)

class DirectionalSurveyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurveyPoint_swiginit(self, _seisware_sdk_37.new_DirectionalSurveyPoint(*args))
    xOffset = property(_seisware_sdk_37.DirectionalSurveyPoint_xOffset_get, _seisware_sdk_37.DirectionalSurveyPoint_xOffset_set)
    yOffset = property(_seisware_sdk_37.DirectionalSurveyPoint_yOffset_get, _seisware_sdk_37.DirectionalSurveyPoint_yOffset_set)
    md = property(_seisware_sdk_37.DirectionalSurveyPoint_md_get, _seisware_sdk_37.DirectionalSurveyPoint_md_set)
    tvd = property(_seisware_sdk_37.DirectionalSurveyPoint_tvd_get, _seisware_sdk_37.DirectionalSurveyPoint_tvd_set)
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyPoint

# Register DirectionalSurveyPoint in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyPoint_swigregister(DirectionalSurveyPoint)

class DirectionalSurveyList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DirectionalSurveyList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DirectionalSurveyList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DirectionalSurveyList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DirectionalSurveyList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DirectionalSurveyList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DirectionalSurveyList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DirectionalSurveyList_empty(self)

    def size(self):
        return _seisware_sdk_37.DirectionalSurveyList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DirectionalSurveyList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DirectionalSurveyList_begin(self)

    def end(self):
        return _seisware_sdk_37.DirectionalSurveyList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DirectionalSurveyList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DirectionalSurveyList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DirectionalSurveyList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DirectionalSurveyList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DirectionalSurveyList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurveyList_swiginit(self, _seisware_sdk_37.new_DirectionalSurveyList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DirectionalSurveyList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DirectionalSurveyList_front(self)

    def back(self):
        return _seisware_sdk_37.DirectionalSurveyList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DirectionalSurveyList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DirectionalSurveyList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DirectionalSurveyList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DirectionalSurveyList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyList

# Register DirectionalSurveyList in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyList_swigregister(DirectionalSurveyList)

class DirectionalSurveyOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurveyOwnerPair_swiginit(self, _seisware_sdk_37.new_DirectionalSurveyOwnerPair(*args))
    first = property(_seisware_sdk_37.DirectionalSurveyOwnerPair_first_get, _seisware_sdk_37.DirectionalSurveyOwnerPair_first_set)
    second = property(_seisware_sdk_37.DirectionalSurveyOwnerPair_second_get, _seisware_sdk_37.DirectionalSurveyOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyOwnerPair

# Register DirectionalSurveyOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyOwnerPair_swigregister(DirectionalSurveyOwnerPair)

class DirectionalSurveyOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DirectionalSurveyOwnerPairList_swiginit(self, _seisware_sdk_37.new_DirectionalSurveyOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DirectionalSurveyOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DirectionalSurveyOwnerPairList

# Register DirectionalSurveyOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.DirectionalSurveyOwnerPairList_swigregister(DirectionalSurveyOwnerPairList)

TextJustification_TopLeft = _seisware_sdk_37.TextJustification_TopLeft
TextJustification_TopCenter = _seisware_sdk_37.TextJustification_TopCenter
TextJustification_TopRight = _seisware_sdk_37.TextJustification_TopRight
TextJustification_BaseLeft = _seisware_sdk_37.TextJustification_BaseLeft
TextJustification_BaseCenter = _seisware_sdk_37.TextJustification_BaseCenter
TextJustification_BaseRight = _seisware_sdk_37.TextJustification_BaseRight
TextJustification_BottomLeft = _seisware_sdk_37.TextJustification_BottomLeft
TextJustification_BottomCenter = _seisware_sdk_37.TextJustification_BottomCenter
TextJustification_BottomRight = _seisware_sdk_37.TextJustification_BottomRight
class TextObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.TextObject_swiginit(self, _seisware_sdk_37.new_TextObject(*args))
    text = property(_seisware_sdk_37.TextObject_text_get, _seisware_sdk_37.TextObject_text_set)
    underline = property(_seisware_sdk_37.TextObject_underline_get, _seisware_sdk_37.TextObject_underline_set)
    width = property(_seisware_sdk_37.TextObject_width_get, _seisware_sdk_37.TextObject_width_set)
    height = property(_seisware_sdk_37.TextObject_height_get, _seisware_sdk_37.TextObject_height_set)
    position = property(_seisware_sdk_37.TextObject_position_get, _seisware_sdk_37.TextObject_position_set)
    z = property(_seisware_sdk_37.TextObject_z_get, _seisware_sdk_37.TextObject_z_set)
    textJustification = property(_seisware_sdk_37.TextObject_textJustification_get, _seisware_sdk_37.TextObject_textJustification_set)
    italic = property(_seisware_sdk_37.TextObject_italic_get, _seisware_sdk_37.TextObject_italic_set)
    font = property(_seisware_sdk_37.TextObject_font_get, _seisware_sdk_37.TextObject_font_set)
    fixedSize = property(_seisware_sdk_37.TextObject_fixedSize_get, _seisware_sdk_37.TextObject_fixedSize_set)
    color = property(_seisware_sdk_37.TextObject_color_get, _seisware_sdk_37.TextObject_color_set)
    transparentText = property(_seisware_sdk_37.TextObject_transparentText_get, _seisware_sdk_37.TextObject_transparentText_set)
    bold = property(_seisware_sdk_37.TextObject_bold_get, _seisware_sdk_37.TextObject_bold_set)
    angle = property(_seisware_sdk_37.TextObject_angle_get, _seisware_sdk_37.TextObject_angle_set)
    __swig_destroy__ = _seisware_sdk_37.delete_TextObject

# Register TextObject in _seisware_sdk_37:
_seisware_sdk_37.TextObject_swigregister(TextObject)

LineStyle_Solid = _seisware_sdk_37.LineStyle_Solid
LineStyle_Dash = _seisware_sdk_37.LineStyle_Dash
LineStyle_DoubleDash = _seisware_sdk_37.LineStyle_DoubleDash
LineStyle_ArrowHead = _seisware_sdk_37.LineStyle_ArrowHead
LineStyle_ArrowTail = _seisware_sdk_37.LineStyle_ArrowTail
LineStyle_ArrowBoth = _seisware_sdk_37.LineStyle_ArrowBoth
FillStyle_Hollow = _seisware_sdk_37.FillStyle_Hollow
FillStyle_Solid = _seisware_sdk_37.FillStyle_Solid
FillStyle_DiagDown = _seisware_sdk_37.FillStyle_DiagDown
FillStyle_DiagUp = _seisware_sdk_37.FillStyle_DiagUp
FillStyle_Vertical = _seisware_sdk_37.FillStyle_Vertical
FillStyle_Horizontal = _seisware_sdk_37.FillStyle_Horizontal
FillStyle_VertHatch = _seisware_sdk_37.FillStyle_VertHatch
FillStyle_DiagHatch = _seisware_sdk_37.FillStyle_DiagHatch
class PolygonObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.PolygonObject_swiginit(self, _seisware_sdk_37.new_PolygonObject(*args))
    closed = property(_seisware_sdk_37.PolygonObject_closed_get, _seisware_sdk_37.PolygonObject_closed_set)
    color = property(_seisware_sdk_37.PolygonObject_color_get, _seisware_sdk_37.PolygonObject_color_set)
    fillColor = property(_seisware_sdk_37.PolygonObject_fillColor_get, _seisware_sdk_37.PolygonObject_fillColor_set)
    fillStyle = property(_seisware_sdk_37.PolygonObject_fillStyle_get, _seisware_sdk_37.PolygonObject_fillStyle_set)
    lineStyle = property(_seisware_sdk_37.PolygonObject_lineStyle_get, _seisware_sdk_37.PolygonObject_lineStyle_set)
    lineWidth = property(_seisware_sdk_37.PolygonObject_lineWidth_get, _seisware_sdk_37.PolygonObject_lineWidth_set)
    points = property(_seisware_sdk_37.PolygonObject_points_get, _seisware_sdk_37.PolygonObject_points_set)
    segmentsPerLine = property(_seisware_sdk_37.PolygonObject_segmentsPerLine_get, _seisware_sdk_37.PolygonObject_segmentsPerLine_set)
    smooth = property(_seisware_sdk_37.PolygonObject_smooth_get, _seisware_sdk_37.PolygonObject_smooth_set)
    haveZ = property(_seisware_sdk_37.PolygonObject_haveZ_get, _seisware_sdk_37.PolygonObject_haveZ_set)
    z = property(_seisware_sdk_37.PolygonObject_z_get, _seisware_sdk_37.PolygonObject_z_set)
    __swig_destroy__ = _seisware_sdk_37.delete_PolygonObject

# Register PolygonObject in _seisware_sdk_37:
_seisware_sdk_37.PolygonObject_swigregister(PolygonObject)

class CultureObjects(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.CultureObjects_swiginit(self, _seisware_sdk_37.new_CultureObjects(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_CultureObjects

    def PolygonObjects(self, polygonObjects):
        return _seisware_sdk_37.CultureObjects_PolygonObjects(self, polygonObjects)

    def SetPolygonObjects(self, polygonObjects):
        return _seisware_sdk_37.CultureObjects_SetPolygonObjects(self, polygonObjects)

    def TextObjects(self, textObjects):
        return _seisware_sdk_37.CultureObjects_TextObjects(self, textObjects)

    def SetTextObjects(self, textObjects):
        return _seisware_sdk_37.CultureObjects_SetTextObjects(self, textObjects)

# Register CultureObjects in _seisware_sdk_37:
_seisware_sdk_37.CultureObjects_swigregister(CultureObjects)

CultureType_Generic = _seisware_sdk_37.CultureType_Generic
CultureType_Heave = _seisware_sdk_37.CultureType_Heave
CultureType_Exclusion = _seisware_sdk_37.CultureType_Exclusion
CultureType_Inclusion = _seisware_sdk_37.CultureType_Inclusion
CultureType_Overlap = _seisware_sdk_37.CultureType_Overlap
CultureType_Contour = _seisware_sdk_37.CultureType_Contour
CultureType_BodiesOfWater = _seisware_sdk_37.CultureType_BodiesOfWater
CultureType_Grid = _seisware_sdk_37.CultureType_Grid
CultureType_LSD = _seisware_sdk_37.CultureType_LSD
CultureType_CrownLand = _seisware_sdk_37.CultureType_CrownLand
CultureType_ProprietaryLand = _seisware_sdk_37.CultureType_ProprietaryLand
CultureType_LandBoundaries = _seisware_sdk_37.CultureType_LandBoundaries
CultureType_LandReserves = _seisware_sdk_37.CultureType_LandReserves
CultureType_Pipelines = _seisware_sdk_37.CultureType_Pipelines
CultureType_Roads = _seisware_sdk_37.CultureType_Roads
CultureType_SectionLines = _seisware_sdk_37.CultureType_SectionLines
CultureType_Towns = _seisware_sdk_37.CultureType_Towns
CultureType_FaultLine = _seisware_sdk_37.CultureType_FaultLine
CultureType_TownshipGrid = _seisware_sdk_37.CultureType_TownshipGrid
CultureType_StickyNotes = _seisware_sdk_37.CultureType_StickyNotes
CultureType_GeologicEdges = _seisware_sdk_37.CultureType_GeologicEdges
CultureType_LandSales = _seisware_sdk_37.CultureType_LandSales
CultureType_Misc1 = _seisware_sdk_37.CultureType_Misc1
CultureType_Misc2 = _seisware_sdk_37.CultureType_Misc2
class Culture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Culture_swiginit(self, _seisware_sdk_37.new_Culture(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Culture

    def ID(self, *args):
        return _seisware_sdk_37.Culture_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Culture_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Culture_OwnerID(self)

    def Bounds(self):
        return _seisware_sdk_37.Culture_Bounds(self)

    def Description(self, *args):
        return _seisware_sdk_37.Culture_Description(self, *args)

    def CultureType(self, *args):
        return _seisware_sdk_37.Culture_CultureType(self, *args)

    def DataLastModified(self):
        return _seisware_sdk_37.Culture_DataLastModified(self)

    def Objects(self, objects):
        return _seisware_sdk_37.Culture_Objects(self, objects)

    def SetObjects(self, objects):
        return _seisware_sdk_37.Culture_SetObjects(self, objects)

# Register Culture in _seisware_sdk_37:
_seisware_sdk_37.Culture_swigregister(Culture)

class CultureManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_CultureManager

    def GetAll(self, items):
        return _seisware_sdk_37.CultureManager_GetAll(self, items)

    def GetByKeys(self, keys, culture, failedKeys):
        return _seisware_sdk_37.CultureManager_GetByKeys(self, keys, culture, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.CultureManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.CultureManager_Add(self, *args)

    def Remove(self, item):
        return _seisware_sdk_37.CultureManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.CultureManager_Update(self, item)

    def ChangeOwner(self, item, ownerID):
        return _seisware_sdk_37.CultureManager_ChangeOwner(self, item, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.CultureManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.CultureManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.CultureManager_CanUpdate(self, item)

    def CanChangeOwner(self, item):
        return _seisware_sdk_37.CultureManager_CanChangeOwner(self, item)

    def PopulateObjects(self, item):
        return _seisware_sdk_37.CultureManager_PopulateObjects(self, item)

    def PopulateObjectsByFilter(self, item, filter, clipObjects=False):
        return _seisware_sdk_37.CultureManager_PopulateObjectsByFilter(self, item, filter, clipObjects)

# Register CultureManager in _seisware_sdk_37:
_seisware_sdk_37.CultureManager_swigregister(CultureManager)

class CultureList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CultureList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CultureList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CultureList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CultureList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CultureList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CultureList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CultureList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CultureList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CultureList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CultureList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CultureList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CultureList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CultureList_empty(self)

    def size(self):
        return _seisware_sdk_37.CultureList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CultureList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CultureList_begin(self)

    def end(self):
        return _seisware_sdk_37.CultureList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CultureList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CultureList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CultureList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CultureList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CultureList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CultureList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CultureList_swiginit(self, _seisware_sdk_37.new_CultureList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CultureList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CultureList_front(self)

    def back(self):
        return _seisware_sdk_37.CultureList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CultureList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CultureList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CultureList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CultureList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CultureList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CultureList

# Register CultureList in _seisware_sdk_37:
_seisware_sdk_37.CultureList_swigregister(CultureList)

class TextObjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.TextObjectList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.TextObjectList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.TextObjectList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.TextObjectList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.TextObjectList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.TextObjectList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.TextObjectList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.TextObjectList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.TextObjectList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.TextObjectList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.TextObjectList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.TextObjectList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.TextObjectList_empty(self)

    def size(self):
        return _seisware_sdk_37.TextObjectList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.TextObjectList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.TextObjectList_begin(self)

    def end(self):
        return _seisware_sdk_37.TextObjectList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.TextObjectList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.TextObjectList_rend(self)

    def clear(self):
        return _seisware_sdk_37.TextObjectList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.TextObjectList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.TextObjectList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.TextObjectList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.TextObjectList_swiginit(self, _seisware_sdk_37.new_TextObjectList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.TextObjectList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.TextObjectList_front(self)

    def back(self):
        return _seisware_sdk_37.TextObjectList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.TextObjectList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.TextObjectList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.TextObjectList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.TextObjectList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.TextObjectList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_TextObjectList

# Register TextObjectList in _seisware_sdk_37:
_seisware_sdk_37.TextObjectList_swigregister(TextObjectList)

class PolygonObjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.PolygonObjectList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.PolygonObjectList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.PolygonObjectList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.PolygonObjectList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.PolygonObjectList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.PolygonObjectList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.PolygonObjectList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.PolygonObjectList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.PolygonObjectList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.PolygonObjectList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.PolygonObjectList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.PolygonObjectList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.PolygonObjectList_empty(self)

    def size(self):
        return _seisware_sdk_37.PolygonObjectList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.PolygonObjectList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.PolygonObjectList_begin(self)

    def end(self):
        return _seisware_sdk_37.PolygonObjectList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.PolygonObjectList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.PolygonObjectList_rend(self)

    def clear(self):
        return _seisware_sdk_37.PolygonObjectList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.PolygonObjectList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.PolygonObjectList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.PolygonObjectList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.PolygonObjectList_swiginit(self, _seisware_sdk_37.new_PolygonObjectList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.PolygonObjectList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.PolygonObjectList_front(self)

    def back(self):
        return _seisware_sdk_37.PolygonObjectList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.PolygonObjectList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.PolygonObjectList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.PolygonObjectList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.PolygonObjectList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.PolygonObjectList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_PolygonObjectList

# Register PolygonObjectList in _seisware_sdk_37:
_seisware_sdk_37.PolygonObjectList_swigregister(PolygonObjectList)

class ProductionWell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ProductionWell_swiginit(self, _seisware_sdk_37.new_ProductionWell(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionWell

    def ZoneID(self):
        return _seisware_sdk_37.ProductionWell_ZoneID(self)

    def WellID(self, *args):
        return _seisware_sdk_37.ProductionWell_WellID(self, *args)

    def EntityID(self):
        return _seisware_sdk_37.ProductionWell_EntityID(self)

    def ZoneOwnerID(self):
        return _seisware_sdk_37.ProductionWell_ZoneOwnerID(self)

    def Source(self, *args):
        return _seisware_sdk_37.ProductionWell_Source(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.ProductionWell_Name(self, *args)

    def BaseMD(self, *args):
        return _seisware_sdk_37.ProductionWell_BaseMD(self, *args)

    def BaseTVD(self, *args):
        return _seisware_sdk_37.ProductionWell_BaseTVD(self, *args)

    def TopMD(self, *args):
        return _seisware_sdk_37.ProductionWell_TopMD(self, *args)

    def TopTVD(self, *args):
        return _seisware_sdk_37.ProductionWell_TopTVD(self, *args)

    def TopDeltaX(self, *args):
        return _seisware_sdk_37.ProductionWell_TopDeltaX(self, *args)

    def TopDeltaY(self, *args):
        return _seisware_sdk_37.ProductionWell_TopDeltaY(self, *args)

    def RowChanged(self, *args):
        return _seisware_sdk_37.ProductionWell_RowChanged(self, *args)

# Register ProductionWell in _seisware_sdk_37:
_seisware_sdk_37.ProductionWell_swigregister(ProductionWell)

ActivityType_Production = _seisware_sdk_37.ActivityType_Production
ActivityType_Injection = _seisware_sdk_37.ActivityType_Injection
ActivityType_Flare = _seisware_sdk_37.ActivityType_Flare
ActivityType_Sales = _seisware_sdk_37.ActivityType_Sales
ActivityType_NotSet = _seisware_sdk_37.ActivityType_NotSet
PeriodUnit_Hours = _seisware_sdk_37.PeriodUnit_Hours
PeriodUnit_Days = _seisware_sdk_37.PeriodUnit_Days
PeriodUnit_NotSet = _seisware_sdk_37.PeriodUnit_NotSet
PeriodType_Year = _seisware_sdk_37.PeriodType_Year
PeriodType_Month = _seisware_sdk_37.PeriodType_Month
PeriodType_Day = _seisware_sdk_37.PeriodType_Day
PeriodType_NotSet = _seisware_sdk_37.PeriodType_NotSet
MethodType_Measured = _seisware_sdk_37.MethodType_Measured
MethodType_Prorated = _seisware_sdk_37.MethodType_Prorated
MethodType_Study = _seisware_sdk_37.MethodType_Study
MethodType_NotSet = _seisware_sdk_37.MethodType_NotSet
VolumeUnit_CubicMeter = _seisware_sdk_37.VolumeUnit_CubicMeter
VolumeUnit_ThousandCubicMeter = _seisware_sdk_37.VolumeUnit_ThousandCubicMeter
VolumeUnit_Barrel = _seisware_sdk_37.VolumeUnit_Barrel
VolumeUnit_bbl = _seisware_sdk_37.VolumeUnit_bbl
VolumeUnit_CubicFoot = _seisware_sdk_37.VolumeUnit_CubicFoot
VolumeUnit_ThousandCubicFoot = _seisware_sdk_37.VolumeUnit_ThousandCubicFoot
VolumeUnit_mcf = _seisware_sdk_37.VolumeUnit_mcf
VolumeUnit_Ton = _seisware_sdk_37.VolumeUnit_Ton
VolumeUnit_Tonne = _seisware_sdk_37.VolumeUnit_Tonne
VolumeUnit_AcreFoot = _seisware_sdk_37.VolumeUnit_AcreFoot
VolumeUnit_NotSet = _seisware_sdk_37.VolumeUnit_NotSet
class ProductionVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ProductionVolume_swiginit(self, _seisware_sdk_37.new_ProductionVolume(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionVolume

    def ID(self, *args):
        return _seisware_sdk_37.ProductionVolume_ID(self, *args)

    def EntityID(self):
        return _seisware_sdk_37.ProductionVolume_EntityID(self)

    def PeriodType(self, *args):
        return _seisware_sdk_37.ProductionVolume_PeriodType(self, *args)

    def ActivityType(self, *args):
        return _seisware_sdk_37.ProductionVolume_ActivityType(self, *args)

    def VolumeDate(self, *args):
        return _seisware_sdk_37.ProductionVolume_VolumeDate(self, *args)

    def VolumeMethod(self, *args):
        return _seisware_sdk_37.ProductionVolume_VolumeMethod(self, *args)

    def Period(self, *args):
        return _seisware_sdk_37.ProductionVolume_Period(self, *args)

    def BOECumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_BOECumVolume(self, *args)

    def BOEVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_BOEVolume(self, *args)

    def BOEVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_BOEVolumeUnits(self, *args)

    def CO2CumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_CO2CumVolume(self, *args)

    def CO2Volume(self, *args):
        return _seisware_sdk_37.ProductionVolume_CO2Volume(self, *args)

    def CO2VolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_CO2VolumeUnits(self, *args)

    def GasCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_GasCumVolume(self, *args)

    def GasVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_GasVolume(self, *args)

    def GasVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_GasVolumeUnits(self, *args)

    def CondensateCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_CondensateCumVolume(self, *args)

    def CondensateVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_CondensateVolume(self, *args)

    def CondensateVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_CondensateVolumeUnits(self, *args)

    def NitrogenCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_NitrogenCumVolume(self, *args)

    def NitrogenVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_NitrogenVolume(self, *args)

    def NitrogenVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_NitrogenVolumeUnits(self, *args)

    def OilCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_OilCumVolume(self, *args)

    def OilVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_OilVolume(self, *args)

    def OilVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_OilVolumeUnits(self, *args)

    def SulphurCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_SulphurCumVolume(self, *args)

    def SulphurVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_SulphurVolume(self, *args)

    def SulphurVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_SulphurVolumeUnits(self, *args)

    def WaterCumVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_WaterCumVolume(self, *args)

    def WaterVolume(self, *args):
        return _seisware_sdk_37.ProductionVolume_WaterVolume(self, *args)

    def WaterVolumeUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_WaterVolumeUnits(self, *args)

    def PeriodOnInjection(self, *args):
        return _seisware_sdk_37.ProductionVolume_PeriodOnInjection(self, *args)

    def PeriodOnInjectionUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_PeriodOnInjectionUnits(self, *args)

    def PeriodOnProduction(self, *args):
        return _seisware_sdk_37.ProductionVolume_PeriodOnProduction(self, *args)

    def PeriodOnProductionUnits(self, *args):
        return _seisware_sdk_37.ProductionVolume_PeriodOnProductionUnits(self, *args)

    def RowChanged(self, *args):
        return _seisware_sdk_37.ProductionVolume_RowChanged(self, *args)

# Register ProductionVolume in _seisware_sdk_37:
_seisware_sdk_37.ProductionVolume_swigregister(ProductionVolume)

AreaType_Province = _seisware_sdk_37.AreaType_Province
AreaType_State = _seisware_sdk_37.AreaType_State
AreaType_Lease = _seisware_sdk_37.AreaType_Lease
AreaType_District = _seisware_sdk_37.AreaType_District
AreaType_NotSet = _seisware_sdk_37.AreaType_NotSet
Product_BOE = _seisware_sdk_37.Product_BOE
Product_CO2 = _seisware_sdk_37.Product_CO2
Product_Gas = _seisware_sdk_37.Product_Gas
Product_Condensate = _seisware_sdk_37.Product_Condensate
Product_Nitrogen = _seisware_sdk_37.Product_Nitrogen
Product_Oil = _seisware_sdk_37.Product_Oil
Product_Sulphur = _seisware_sdk_37.Product_Sulphur
Product_Water = _seisware_sdk_37.Product_Water
Product_NotSet = _seisware_sdk_37.Product_NotSet
ProductionMethod_Flowing = _seisware_sdk_37.ProductionMethod_Flowing
ProductionMethod_Pumping = _seisware_sdk_37.ProductionMethod_Pumping
ProductionMethod_Swabbing = _seisware_sdk_37.ProductionMethod_Swabbing
ProductionMethod_GasLift = _seisware_sdk_37.ProductionMethod_GasLift
ProductionMethod_AirLift = _seisware_sdk_37.ProductionMethod_AirLift
ProductionMethod_Baling = _seisware_sdk_37.ProductionMethod_Baling
ProductionMethod_FillUp = _seisware_sdk_37.ProductionMethod_FillUp
ProductionMethod_Jetted = _seisware_sdk_37.ProductionMethod_Jetted
ProductionMethod_PlungerLift = _seisware_sdk_37.ProductionMethod_PlungerLift
ProductionMethod_VacuumLift = _seisware_sdk_37.ProductionMethod_VacuumLift
ProductionMethod_WaterLift = _seisware_sdk_37.ProductionMethod_WaterLift
ProductionMethod_ReversedOut = _seisware_sdk_37.ProductionMethod_ReversedOut
ProductionMethod_Intermittent = _seisware_sdk_37.ProductionMethod_Intermittent
ProductionMethod_NotSet = _seisware_sdk_37.ProductionMethod_NotSet
ProductionType_Well = _seisware_sdk_37.ProductionType_Well
ProductionType_Field = _seisware_sdk_37.ProductionType_Field
ProductionType_County = _seisware_sdk_37.ProductionType_County
class Production(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Production_swiginit(self, _seisware_sdk_37.new_Production(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Production

    def ID(self, *args):
        return _seisware_sdk_37.Production_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Production_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Production_OwnerID(self)

    def Source(self, *args):
        return _seisware_sdk_37.Production_Source(self, *args)

    def EnhancedRecoveryType(self, *args):
        return _seisware_sdk_37.Production_EnhancedRecoveryType(self, *args)

    def PrimaryProduct(self, *args):
        return _seisware_sdk_37.Production_PrimaryProduct(self, *args)

    def ProductionMethod(self, *args):
        return _seisware_sdk_37.Production_ProductionMethod(self, *args)

    def Remark(self, *args):
        return _seisware_sdk_37.Production_Remark(self, *args)

    def Field(self, *args):
        return _seisware_sdk_37.Production_Field(self, *args)

    def Pool(self, *args):
        return _seisware_sdk_37.Production_Pool(self, *args)

    def Area(self, *args):
        return _seisware_sdk_37.Production_Area(self, *args)

    def AreaType(self, *args):
        return _seisware_sdk_37.Production_AreaType(self, *args)

    def ProdFormation(self, *args):
        return _seisware_sdk_37.Production_ProdFormation(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.Production_Type(self, *args)

    def Status(self, *args):
        return _seisware_sdk_37.Production_Status(self, *args)

    def LastInjectionDate(self, *args):
        return _seisware_sdk_37.Production_LastInjectionDate(self, *args)

    def LastProductionDate(self, *args):
        return _seisware_sdk_37.Production_LastProductionDate(self, *args)

    def OnInjectionDate(self, *args):
        return _seisware_sdk_37.Production_OnInjectionDate(self, *args)

    def OnProductionDate(self, *args):
        return _seisware_sdk_37.Production_OnProductionDate(self, *args)

    def LastReportedDate(self, *args):
        return _seisware_sdk_37.Production_LastReportedDate(self, *args)

    def RowChanged(self, *args):
        return _seisware_sdk_37.Production_RowChanged(self, *args)

    def ProductionVolumesCount(self):
        return _seisware_sdk_37.Production_ProductionVolumesCount(self)

    def ProductionWellsCount(self):
        return _seisware_sdk_37.Production_ProductionWellsCount(self)

    def Volumes(self, volumes):
        return _seisware_sdk_37.Production_Volumes(self, volumes)

    def SetVolumes(self, volumes):
        return _seisware_sdk_37.Production_SetVolumes(self, volumes)

    def Wells(self, wells):
        return _seisware_sdk_37.Production_Wells(self, wells)

    def SetWells(self, wells):
        return _seisware_sdk_37.Production_SetWells(self, wells)

# Register Production in _seisware_sdk_37:
_seisware_sdk_37.Production_swigregister(Production)

class ProductionManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionManager

    def GetAll(self, items):
        return _seisware_sdk_37.ProductionManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.ProductionManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.ProductionManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.ProductionManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.ProductionManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.ProductionManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.ProductionManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.ProductionManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.ProductionManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.ProductionManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.ProductionManager_CanChangeOwner(self, *args)

    def PopulateValues(self, *args):
        return _seisware_sdk_37.ProductionManager_PopulateValues(self, *args)

    def PopulateVolumes(self, *args):
        return _seisware_sdk_37.ProductionManager_PopulateVolumes(self, *args)

    def PopulateWells(self, *args):
        return _seisware_sdk_37.ProductionManager_PopulateWells(self, *args)

# Register ProductionManager in _seisware_sdk_37:
_seisware_sdk_37.ProductionManager_swigregister(ProductionManager)

class ProductionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ProductionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ProductionList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ProductionList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ProductionList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ProductionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ProductionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ProductionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ProductionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ProductionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ProductionList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ProductionList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ProductionList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ProductionList_empty(self)

    def size(self):
        return _seisware_sdk_37.ProductionList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ProductionList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ProductionList_begin(self)

    def end(self):
        return _seisware_sdk_37.ProductionList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ProductionList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ProductionList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ProductionList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ProductionList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ProductionList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ProductionList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ProductionList_swiginit(self, _seisware_sdk_37.new_ProductionList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ProductionList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ProductionList_front(self)

    def back(self):
        return _seisware_sdk_37.ProductionList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ProductionList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ProductionList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ProductionList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ProductionList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ProductionList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionList

# Register ProductionList in _seisware_sdk_37:
_seisware_sdk_37.ProductionList_swigregister(ProductionList)

class ProductionWellList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ProductionWellList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ProductionWellList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ProductionWellList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ProductionWellList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ProductionWellList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ProductionWellList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ProductionWellList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ProductionWellList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ProductionWellList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ProductionWellList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ProductionWellList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ProductionWellList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ProductionWellList_empty(self)

    def size(self):
        return _seisware_sdk_37.ProductionWellList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ProductionWellList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ProductionWellList_begin(self)

    def end(self):
        return _seisware_sdk_37.ProductionWellList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ProductionWellList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ProductionWellList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ProductionWellList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ProductionWellList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ProductionWellList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ProductionWellList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ProductionWellList_swiginit(self, _seisware_sdk_37.new_ProductionWellList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ProductionWellList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ProductionWellList_front(self)

    def back(self):
        return _seisware_sdk_37.ProductionWellList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ProductionWellList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ProductionWellList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ProductionWellList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ProductionWellList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ProductionWellList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionWellList

# Register ProductionWellList in _seisware_sdk_37:
_seisware_sdk_37.ProductionWellList_swigregister(ProductionWellList)

class ProductionVolumeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ProductionVolumeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ProductionVolumeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ProductionVolumeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ProductionVolumeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ProductionVolumeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ProductionVolumeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ProductionVolumeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ProductionVolumeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ProductionVolumeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ProductionVolumeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ProductionVolumeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ProductionVolumeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ProductionVolumeList_empty(self)

    def size(self):
        return _seisware_sdk_37.ProductionVolumeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ProductionVolumeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ProductionVolumeList_begin(self)

    def end(self):
        return _seisware_sdk_37.ProductionVolumeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ProductionVolumeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ProductionVolumeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ProductionVolumeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ProductionVolumeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ProductionVolumeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ProductionVolumeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ProductionVolumeList_swiginit(self, _seisware_sdk_37.new_ProductionVolumeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ProductionVolumeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ProductionVolumeList_front(self)

    def back(self):
        return _seisware_sdk_37.ProductionVolumeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ProductionVolumeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ProductionVolumeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ProductionVolumeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ProductionVolumeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ProductionVolumeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ProductionVolumeList

# Register ProductionVolumeList in _seisware_sdk_37:
_seisware_sdk_37.ProductionVolumeList_swigregister(ProductionVolumeList)

SeismicGeometry_Unknown = _seisware_sdk_37.SeismicGeometry_Unknown
SeismicGeometry_Seismic2D = _seisware_sdk_37.SeismicGeometry_Seismic2D
SeismicGeometry_Seismic3D = _seisware_sdk_37.SeismicGeometry_Seismic3D
class SurveyDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.SurveyDefinition_swiginit(self, _seisware_sdk_37.new_SurveyDefinition(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_SurveyDefinition

    def Geometry(self):
        return _seisware_sdk_37.SurveyDefinition_Geometry(self)

    def Define2D(self, tracePoints, cdp, shotPoint, traceRange):
        return _seisware_sdk_37.SurveyDefinition_Define2D(self, tracePoints, cdp, shotPoint, traceRange)

    def Define3D(self, firstInlineFirstCrossline, firstInlineLastCrossline, lastInlineLastCrossline, lastInlineFirstCrossline, inlines, crosslines):
        return _seisware_sdk_37.SurveyDefinition_Define3D(self, firstInlineFirstCrossline, firstInlineLastCrossline, lastInlineLastCrossline, lastInlineFirstCrossline, inlines, crosslines)

    def SurfaceBounds(self):
        return _seisware_sdk_37.SurveyDefinition_SurfaceBounds(self)

    def Size(self):
        return _seisware_sdk_37.SurveyDefinition_Size(self)

    def CDP(self, traceNum):
        return _seisware_sdk_37.SurveyDefinition_CDP(self, traceNum)

    def ShotPoint(self, traceNum):
        return _seisware_sdk_37.SurveyDefinition_ShotPoint(self, traceNum)

    def TracePoints(self):
        return _seisware_sdk_37.SurveyDefinition_TracePoints(self)

    def TraceRange(self):
        return _seisware_sdk_37.SurveyDefinition_TraceRange(self)

    def NumInline(self):
        return _seisware_sdk_37.SurveyDefinition_NumInline(self)

    def NumCrossline(self):
        return _seisware_sdk_37.SurveyDefinition_NumCrossline(self)

    def CornerFiFc(self):
        return _seisware_sdk_37.SurveyDefinition_CornerFiFc(self)

    def CornerFiLc(self):
        return _seisware_sdk_37.SurveyDefinition_CornerFiLc(self)

    def CornerLiLc(self):
        return _seisware_sdk_37.SurveyDefinition_CornerLiLc(self)

    def CornerLiFc(self):
        return _seisware_sdk_37.SurveyDefinition_CornerLiFc(self)

    def InlineRange(self):
        return _seisware_sdk_37.SurveyDefinition_InlineRange(self)

    def CrosslineRange(self):
        return _seisware_sdk_37.SurveyDefinition_CrosslineRange(self)

    def ToGrid(self, *args):
        return _seisware_sdk_37.SurveyDefinition_ToGrid(self, *args)

    def ToNearestGrid(self, *args):
        return _seisware_sdk_37.SurveyDefinition_ToNearestGrid(self, *args)

    def ToSeismic(self, *args):
        return _seisware_sdk_37.SurveyDefinition_ToSeismic(self, *args)

    def ToWorld(self, *args):
        return _seisware_sdk_37.SurveyDefinition_ToWorld(self, *args)

# Register SurveyDefinition in _seisware_sdk_37:
_seisware_sdk_37.SurveyDefinition_swigregister(SurveyDefinition)

class SurveyDefinitionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.SurveyDefinitionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.SurveyDefinitionList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.SurveyDefinitionList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.SurveyDefinitionList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.SurveyDefinitionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.SurveyDefinitionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.SurveyDefinitionList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.SurveyDefinitionList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.SurveyDefinitionList_empty(self)

    def size(self):
        return _seisware_sdk_37.SurveyDefinitionList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.SurveyDefinitionList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.SurveyDefinitionList_begin(self)

    def end(self):
        return _seisware_sdk_37.SurveyDefinitionList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.SurveyDefinitionList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.SurveyDefinitionList_rend(self)

    def clear(self):
        return _seisware_sdk_37.SurveyDefinitionList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.SurveyDefinitionList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.SurveyDefinitionList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.SurveyDefinitionList_swiginit(self, _seisware_sdk_37.new_SurveyDefinitionList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.SurveyDefinitionList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.SurveyDefinitionList_front(self)

    def back(self):
        return _seisware_sdk_37.SurveyDefinitionList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.SurveyDefinitionList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.SurveyDefinitionList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.SurveyDefinitionList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.SurveyDefinitionList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_SurveyDefinitionList

# Register SurveyDefinitionList in _seisware_sdk_37:
_seisware_sdk_37.SurveyDefinitionList_swigregister(SurveyDefinitionList)

class WorldPosList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WorldPosList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WorldPosList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WorldPosList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WorldPosList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WorldPosList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WorldPosList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WorldPosList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WorldPosList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WorldPosList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WorldPosList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WorldPosList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WorldPosList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WorldPosList_empty(self)

    def size(self):
        return _seisware_sdk_37.WorldPosList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WorldPosList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WorldPosList_begin(self)

    def end(self):
        return _seisware_sdk_37.WorldPosList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WorldPosList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WorldPosList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WorldPosList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WorldPosList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WorldPosList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WorldPosList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WorldPosList_swiginit(self, _seisware_sdk_37.new_WorldPosList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WorldPosList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WorldPosList_front(self)

    def back(self):
        return _seisware_sdk_37.WorldPosList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WorldPosList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WorldPosList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WorldPosList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WorldPosList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WorldPosList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WorldPosList

# Register WorldPosList in _seisware_sdk_37:
_seisware_sdk_37.WorldPosList_swigregister(WorldPosList)

class SeismicSurvey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.SeismicSurvey_swiginit(self, _seisware_sdk_37.new_SeismicSurvey(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicSurvey

    def ID(self):
        return _seisware_sdk_37.SeismicSurvey_ID(self)

    def OwnerID(self):
        return _seisware_sdk_37.SeismicSurvey_OwnerID(self)

    def Name(self, *args):
        return _seisware_sdk_37.SeismicSurvey_Name(self, *args)

    def Survey(self, *args):
        return _seisware_sdk_37.SeismicSurvey_Survey(self, *args)

    def DefaultWorkingSetVolume(self):
        return _seisware_sdk_37.SeismicSurvey_DefaultWorkingSetVolume(self)

# Register SeismicSurvey in _seisware_sdk_37:
_seisware_sdk_37.SeismicSurvey_swigregister(SeismicSurvey)

class SeismicSurveyManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicSurveyManager

    def GetAll(self, items):
        return _seisware_sdk_37.SeismicSurveyManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedItems):
        return _seisware_sdk_37.SeismicSurveyManager_GetByKeys(self, keys, items, failedItems)

    def GetByNaturalKeys(self, keys, items, failedItems):
        return _seisware_sdk_37.SeismicSurveyManager_GetByNaturalKeys(self, keys, items, failedItems)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.SeismicSurveyManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetWorkingSet(self, *args):
        return _seisware_sdk_37.SeismicSurveyManager_GetWorkingSet(self, *args)

    def GetWorkingSetsForSurvey(self, key):
        return _seisware_sdk_37.SeismicSurveyManager_GetWorkingSetsForSurvey(self, key)

    def GetWorkingSets(self):
        return _seisware_sdk_37.SeismicSurveyManager_GetWorkingSets(self)

# Register SeismicSurveyManager in _seisware_sdk_37:
_seisware_sdk_37.SeismicSurveyManager_swigregister(SeismicSurveyManager)

class SeismicSurveyList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.SeismicSurveyList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.SeismicSurveyList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.SeismicSurveyList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.SeismicSurveyList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.SeismicSurveyList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.SeismicSurveyList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.SeismicSurveyList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.SeismicSurveyList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.SeismicSurveyList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.SeismicSurveyList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.SeismicSurveyList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.SeismicSurveyList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.SeismicSurveyList_empty(self)

    def size(self):
        return _seisware_sdk_37.SeismicSurveyList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.SeismicSurveyList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.SeismicSurveyList_begin(self)

    def end(self):
        return _seisware_sdk_37.SeismicSurveyList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.SeismicSurveyList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.SeismicSurveyList_rend(self)

    def clear(self):
        return _seisware_sdk_37.SeismicSurveyList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.SeismicSurveyList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.SeismicSurveyList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.SeismicSurveyList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.SeismicSurveyList_swiginit(self, _seisware_sdk_37.new_SeismicSurveyList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.SeismicSurveyList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.SeismicSurveyList_front(self)

    def back(self):
        return _seisware_sdk_37.SeismicSurveyList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.SeismicSurveyList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.SeismicSurveyList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.SeismicSurveyList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.SeismicSurveyList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.SeismicSurveyList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicSurveyList

# Register SeismicSurveyList in _seisware_sdk_37:
_seisware_sdk_37.SeismicSurveyList_swigregister(SeismicSurveyList)

class VolumeLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.VolumeLookup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.VolumeLookup___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.VolumeLookup___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.VolumeLookup___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.VolumeLookup___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.VolumeLookup___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.VolumeLookup_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.VolumeLookup_keys(self)

    def values(self):
        return _seisware_sdk_37.VolumeLookup_values(self)

    def items(self):
        return _seisware_sdk_37.VolumeLookup_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.VolumeLookup___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.VolumeLookup_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.VolumeLookup_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.VolumeLookup___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.VolumeLookup_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.VolumeLookup_swiginit(self, _seisware_sdk_37.new_VolumeLookup(*args))

    def empty(self):
        return _seisware_sdk_37.VolumeLookup_empty(self)

    def size(self):
        return _seisware_sdk_37.VolumeLookup_size(self)

    def swap(self, v):
        return _seisware_sdk_37.VolumeLookup_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.VolumeLookup_begin(self)

    def end(self):
        return _seisware_sdk_37.VolumeLookup_end(self)

    def rbegin(self):
        return _seisware_sdk_37.VolumeLookup_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.VolumeLookup_rend(self)

    def clear(self):
        return _seisware_sdk_37.VolumeLookup_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.VolumeLookup_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.VolumeLookup_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.VolumeLookup_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.VolumeLookup_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.VolumeLookup_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.VolumeLookup_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_VolumeLookup

# Register VolumeLookup in _seisware_sdk_37:
_seisware_sdk_37.VolumeLookup_swigregister(VolumeLookup)

class SeismicVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.SeismicVolume_swiginit(self, _seisware_sdk_37.new_SeismicVolume(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicVolume

    def ID(self):
        return _seisware_sdk_37.SeismicVolume_ID(self)

    def OwnerID(self):
        return _seisware_sdk_37.SeismicVolume_OwnerID(self)

    def OwnerName(self):
        return _seisware_sdk_37.SeismicVolume_OwnerName(self)

    def ParentID(self):
        return _seisware_sdk_37.SeismicVolume_ParentID(self)

    def Survey(self, *args):
        return _seisware_sdk_37.SeismicVolume_Survey(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.SeismicVolume_Type(self, *args)

    def Version(self, *args):
        return _seisware_sdk_37.SeismicVolume_Version(self, *args)

    def FilePath(self, *args):
        return _seisware_sdk_37.SeismicVolume_FilePath(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.SeismicVolume_Description(self, *args)

    def VerticalStart(self, *args):
        return _seisware_sdk_37.SeismicVolume_VerticalStart(self, *args)

    def VerticalInc(self, *args):
        return _seisware_sdk_37.SeismicVolume_VerticalInc(self, *args)

    def VerticalCount(self, *args):
        return _seisware_sdk_37.SeismicVolume_VerticalCount(self, *args)

    def VerticalEnd(self):
        return _seisware_sdk_37.SeismicVolume_VerticalEnd(self)

    def Domain(self, *args):
        return _seisware_sdk_37.SeismicVolume_Domain(self, *args)

    def TotalNonNullTraces(self, *args):
        return _seisware_sdk_37.SeismicVolume_TotalNonNullTraces(self, *args)

    def Gain(self, *args):
        return _seisware_sdk_37.SeismicVolume_Gain(self, *args)

    def GainExponent(self, *args):
        return _seisware_sdk_37.SeismicVolume_GainExponent(self, *args)

    def Peak(self, *args):
        return _seisware_sdk_37.SeismicVolume_Peak(self, *args)

    def Average(self, *args):
        return _seisware_sdk_37.SeismicVolume_Average(self, *args)

    def RMS(self, *args):
        return _seisware_sdk_37.SeismicVolume_RMS(self, *args)

    def Size(self):
        return _seisware_sdk_37.SeismicVolume_Size(self)

    def ToGrid(self, *args):
        return _seisware_sdk_37.SeismicVolume_ToGrid(self, *args)

    def ToNearestGrid(self, *args):
        return _seisware_sdk_37.SeismicVolume_ToNearestGrid(self, *args)

    def ToSeismic(self, *args):
        return _seisware_sdk_37.SeismicVolume_ToSeismic(self, *args)

    def ToWorld(self, *args):
        return _seisware_sdk_37.SeismicVolume_ToWorld(self, *args)

# Register SeismicVolume in _seisware_sdk_37:
_seisware_sdk_37.SeismicVolume_swigregister(SeismicVolume)

class SeismicVolumeManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicVolumeManager

    def GetAll(self, items):
        return _seisware_sdk_37.SeismicVolumeManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedItems):
        return _seisware_sdk_37.SeismicVolumeManager_GetByKeys(self, keys, items, failedItems)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.SeismicVolumeManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForSeismicSurvey(self, seismicSurveyKey, seimicVolumeList):
        return _seisware_sdk_37.SeismicVolumeManager_GetAllForSeismicSurvey(self, seismicSurveyKey, seimicVolumeList)

    def GetBulkShift(self, seismicVolumeKey):
        return _seisware_sdk_37.SeismicVolumeManager_GetBulkShift(self, seismicVolumeKey)

    def GetBulkShiftForOwner(self, seismicVolumeKey, ownerKey):
        return _seisware_sdk_37.SeismicVolumeManager_GetBulkShiftForOwner(self, seismicVolumeKey, ownerKey)

    def GetBulkShiftOwnerPairForVolume(self, seismicVolumeKey, ownerMeasurementDic):
        return _seisware_sdk_37.SeismicVolumeManager_GetBulkShiftOwnerPairForVolume(self, seismicVolumeKey, ownerMeasurementDic)

    def GetBulkShifts(self, values):
        return _seisware_sdk_37.SeismicVolumeManager_GetBulkShifts(self, values)

# Register SeismicVolumeManager in _seisware_sdk_37:
_seisware_sdk_37.SeismicVolumeManager_swigregister(SeismicVolumeManager)

class SeismicVolumeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.SeismicVolumeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.SeismicVolumeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.SeismicVolumeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.SeismicVolumeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.SeismicVolumeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.SeismicVolumeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.SeismicVolumeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.SeismicVolumeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.SeismicVolumeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.SeismicVolumeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.SeismicVolumeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.SeismicVolumeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.SeismicVolumeList_empty(self)

    def size(self):
        return _seisware_sdk_37.SeismicVolumeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.SeismicVolumeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.SeismicVolumeList_begin(self)

    def end(self):
        return _seisware_sdk_37.SeismicVolumeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.SeismicVolumeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.SeismicVolumeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.SeismicVolumeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.SeismicVolumeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.SeismicVolumeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.SeismicVolumeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.SeismicVolumeList_swiginit(self, _seisware_sdk_37.new_SeismicVolumeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.SeismicVolumeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.SeismicVolumeList_front(self)

    def back(self):
        return _seisware_sdk_37.SeismicVolumeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.SeismicVolumeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.SeismicVolumeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.SeismicVolumeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.SeismicVolumeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.SeismicVolumeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_SeismicVolumeList

# Register SeismicVolumeList in _seisware_sdk_37:
_seisware_sdk_37.SeismicVolumeList_swigregister(SeismicVolumeList)

class IDMeasurementLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.IDMeasurementLookup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.IDMeasurementLookup___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.IDMeasurementLookup___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.IDMeasurementLookup___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.IDMeasurementLookup___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.IDMeasurementLookup___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.IDMeasurementLookup_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.IDMeasurementLookup_keys(self)

    def values(self):
        return _seisware_sdk_37.IDMeasurementLookup_values(self)

    def items(self):
        return _seisware_sdk_37.IDMeasurementLookup_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.IDMeasurementLookup___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.IDMeasurementLookup_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.IDMeasurementLookup_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.IDMeasurementLookup___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.IDMeasurementLookup_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.IDMeasurementLookup_swiginit(self, _seisware_sdk_37.new_IDMeasurementLookup(*args))

    def empty(self):
        return _seisware_sdk_37.IDMeasurementLookup_empty(self)

    def size(self):
        return _seisware_sdk_37.IDMeasurementLookup_size(self)

    def swap(self, v):
        return _seisware_sdk_37.IDMeasurementLookup_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.IDMeasurementLookup_begin(self)

    def end(self):
        return _seisware_sdk_37.IDMeasurementLookup_end(self)

    def rbegin(self):
        return _seisware_sdk_37.IDMeasurementLookup_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.IDMeasurementLookup_rend(self)

    def clear(self):
        return _seisware_sdk_37.IDMeasurementLookup_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.IDMeasurementLookup_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.IDMeasurementLookup_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.IDMeasurementLookup_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.IDMeasurementLookup_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.IDMeasurementLookup_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.IDMeasurementLookup_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_IDMeasurementLookup

# Register IDMeasurementLookup in _seisware_sdk_37:
_seisware_sdk_37.IDMeasurementLookup_swigregister(IDMeasurementLookup)

class BulkShiftLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.BulkShiftLookup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.BulkShiftLookup___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.BulkShiftLookup___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.BulkShiftLookup___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.BulkShiftLookup___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.BulkShiftLookup___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.BulkShiftLookup_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.BulkShiftLookup_keys(self)

    def values(self):
        return _seisware_sdk_37.BulkShiftLookup_values(self)

    def items(self):
        return _seisware_sdk_37.BulkShiftLookup_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.BulkShiftLookup___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.BulkShiftLookup_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.BulkShiftLookup_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.BulkShiftLookup___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.BulkShiftLookup_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.BulkShiftLookup_swiginit(self, _seisware_sdk_37.new_BulkShiftLookup(*args))

    def empty(self):
        return _seisware_sdk_37.BulkShiftLookup_empty(self)

    def size(self):
        return _seisware_sdk_37.BulkShiftLookup_size(self)

    def swap(self, v):
        return _seisware_sdk_37.BulkShiftLookup_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.BulkShiftLookup_begin(self)

    def end(self):
        return _seisware_sdk_37.BulkShiftLookup_end(self)

    def rbegin(self):
        return _seisware_sdk_37.BulkShiftLookup_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.BulkShiftLookup_rend(self)

    def clear(self):
        return _seisware_sdk_37.BulkShiftLookup_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.BulkShiftLookup_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.BulkShiftLookup_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.BulkShiftLookup_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.BulkShiftLookup_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.BulkShiftLookup_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.BulkShiftLookup_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_BulkShiftLookup

# Register BulkShiftLookup in _seisware_sdk_37:
_seisware_sdk_37.BulkShiftLookup_swigregister(BulkShiftLookup)

class HorizonPick(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amplitude = property(_seisware_sdk_37.HorizonPick_amplitude_get, _seisware_sdk_37.HorizonPick_amplitude_set)
    structure = property(_seisware_sdk_37.HorizonPick_structure_get, _seisware_sdk_37.HorizonPick_structure_set)

    def __init__(self, *args):
        _seisware_sdk_37.HorizonPick_swiginit(self, _seisware_sdk_37.new_HorizonPick(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPick

# Register HorizonPick in _seisware_sdk_37:
_seisware_sdk_37.HorizonPick_swigregister(HorizonPick)

class HorizonPicks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.HorizonPicks_swiginit(self, _seisware_sdk_37.new_HorizonPicks(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPicks

    def HorizonID(self):
        return _seisware_sdk_37.HorizonPicks_HorizonID(self)

    def SeismicSurveyID(self):
        return _seisware_sdk_37.HorizonPicks_SeismicSurveyID(self)

    def Domain(self):
        return _seisware_sdk_37.HorizonPicks_Domain(self)

    def HasStructure(self):
        return _seisware_sdk_37.HorizonPicks_HasStructure(self)

    def HasAmplitude(self):
        return _seisware_sdk_37.HorizonPicks_HasAmplitude(self)

    def HasExtents(self):
        return _seisware_sdk_37.HorizonPicks_HasExtents(self)

    def Extents(self):
        return _seisware_sdk_37.HorizonPicks_Extents(self)

    def DataLastModified(self):
        return _seisware_sdk_37.HorizonPicks_DataLastModified(self)

    def Values(self, values):
        return _seisware_sdk_37.HorizonPicks_Values(self, values)

    def SetValues(self, values):
        return _seisware_sdk_37.HorizonPicks_SetValues(self, values)

# Register HorizonPicks in _seisware_sdk_37:
_seisware_sdk_37.HorizonPicks_swigregister(HorizonPicks)

class HorizonPickValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.HorizonPickValues_swiginit(self, _seisware_sdk_37.new_HorizonPickValues(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPickValues

    def InlineCount(self):
        return _seisware_sdk_37.HorizonPickValues_InlineCount(self)

    def CrosslineCount(self):
        return _seisware_sdk_37.HorizonPickValues_CrosslineCount(self)

    def Domain(self):
        return _seisware_sdk_37.HorizonPickValues_Domain(self)

    def IsPicked(self, location):
        return _seisware_sdk_37.HorizonPickValues_IsPicked(self, location)

    def Clear(self):
        return _seisware_sdk_37.HorizonPickValues_Clear(self)

    def RemovePick(self, location):
        return _seisware_sdk_37.HorizonPickValues_RemovePick(self, location)

    def Picks(self):
        return _seisware_sdk_37.HorizonPickValues_Picks(self)

    def AllPicks(self, *args):
        return _seisware_sdk_37.HorizonPickValues_AllPicks(self, *args)

    def Pick(self, *args):
        return _seisware_sdk_37.HorizonPickValues_Pick(self, *args)

# Register HorizonPickValues in _seisware_sdk_37:
_seisware_sdk_37.HorizonPickValues_swigregister(HorizonPickValues)

class HorizonPicksManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPicksManager

    def GetAll(self, items):
        return _seisware_sdk_37.HorizonPicksManager_GetAll(self, items)

    def GetByHorizonKeys(self, horizons, items):
        return _seisware_sdk_37.HorizonPicksManager_GetByHorizonKeys(self, horizons, items)

    def GetBySeismicSurveyKeys(self, seismicSurveys, items):
        return _seisware_sdk_37.HorizonPicksManager_GetBySeismicSurveyKeys(self, seismicSurveys, items)

    def GetByHorizonAndSeismicSurveyKeys(self, horizonsAndSeismicSurveys, items):
        return _seisware_sdk_37.HorizonPicksManager_GetByHorizonAndSeismicSurveyKeys(self, horizonsAndSeismicSurveys, items)

    def SetValues(self, horizonID, seismicSurveyID, picks):
        return _seisware_sdk_37.HorizonPicksManager_SetValues(self, horizonID, seismicSurveyID, picks)

    def ClearValues(self, horizonID, seismicSurveyID, picks):
        return _seisware_sdk_37.HorizonPicksManager_ClearValues(self, horizonID, seismicSurveyID, picks)

    def Update(self, item):
        return _seisware_sdk_37.HorizonPicksManager_Update(self, item)

    def CanAdd(self, horizonID):
        return _seisware_sdk_37.HorizonPicksManager_CanAdd(self, horizonID)

    def CanRemove(self, horizonID):
        return _seisware_sdk_37.HorizonPicksManager_CanRemove(self, horizonID)

    def CanUpdate(self, horizonID):
        return _seisware_sdk_37.HorizonPicksManager_CanUpdate(self, horizonID)

    def PopulateValues(self, *args):
        return _seisware_sdk_37.HorizonPicksManager_PopulateValues(self, *args)

# Register HorizonPicksManager in _seisware_sdk_37:
_seisware_sdk_37.HorizonPicksManager_swigregister(HorizonPicksManager)

class HorizonPicksList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.HorizonPicksList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.HorizonPicksList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.HorizonPicksList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.HorizonPicksList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.HorizonPicksList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.HorizonPicksList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.HorizonPicksList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.HorizonPicksList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.HorizonPicksList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.HorizonPicksList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.HorizonPicksList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.HorizonPicksList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.HorizonPicksList_empty(self)

    def size(self):
        return _seisware_sdk_37.HorizonPicksList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.HorizonPicksList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.HorizonPicksList_begin(self)

    def end(self):
        return _seisware_sdk_37.HorizonPicksList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.HorizonPicksList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.HorizonPicksList_rend(self)

    def clear(self):
        return _seisware_sdk_37.HorizonPicksList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.HorizonPicksList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.HorizonPicksList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.HorizonPicksList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.HorizonPicksList_swiginit(self, _seisware_sdk_37.new_HorizonPicksList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.HorizonPicksList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.HorizonPicksList_front(self)

    def back(self):
        return _seisware_sdk_37.HorizonPicksList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.HorizonPicksList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.HorizonPicksList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.HorizonPicksList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.HorizonPicksList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.HorizonPicksList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPicksList

# Register HorizonPicksList in _seisware_sdk_37:
_seisware_sdk_37.HorizonPicksList_swigregister(HorizonPicksList)

class HorizonPickMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.HorizonPickMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.HorizonPickMap___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.HorizonPickMap___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.HorizonPickMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.HorizonPickMap___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.HorizonPickMap___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.HorizonPickMap_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.HorizonPickMap_keys(self)

    def values(self):
        return _seisware_sdk_37.HorizonPickMap_values(self)

    def items(self):
        return _seisware_sdk_37.HorizonPickMap_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.HorizonPickMap___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.HorizonPickMap_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.HorizonPickMap_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.HorizonPickMap___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.HorizonPickMap_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.HorizonPickMap_swiginit(self, _seisware_sdk_37.new_HorizonPickMap(*args))

    def empty(self):
        return _seisware_sdk_37.HorizonPickMap_empty(self)

    def size(self):
        return _seisware_sdk_37.HorizonPickMap_size(self)

    def swap(self, v):
        return _seisware_sdk_37.HorizonPickMap_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.HorizonPickMap_begin(self)

    def end(self):
        return _seisware_sdk_37.HorizonPickMap_end(self)

    def rbegin(self):
        return _seisware_sdk_37.HorizonPickMap_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.HorizonPickMap_rend(self)

    def clear(self):
        return _seisware_sdk_37.HorizonPickMap_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.HorizonPickMap_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.HorizonPickMap_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.HorizonPickMap_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.HorizonPickMap_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.HorizonPickMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.HorizonPickMap_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonPickMap

# Register HorizonPickMap in _seisware_sdk_37:
_seisware_sdk_37.HorizonPickMap_swigregister(HorizonPickMap)

class GridIndexHorizonPickPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.GridIndexHorizonPickPair_swiginit(self, _seisware_sdk_37.new_GridIndexHorizonPickPair(*args))
    first = property(_seisware_sdk_37.GridIndexHorizonPickPair_first_get, _seisware_sdk_37.GridIndexHorizonPickPair_first_set)
    second = property(_seisware_sdk_37.GridIndexHorizonPickPair_second_get, _seisware_sdk_37.GridIndexHorizonPickPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndexHorizonPickPair

# Register GridIndexHorizonPickPair in _seisware_sdk_37:
_seisware_sdk_37.GridIndexHorizonPickPair_swigregister(GridIndexHorizonPickPair)

class GridIndexHorizonPickPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.GridIndexHorizonPickPairList_swiginit(self, _seisware_sdk_37.new_GridIndexHorizonPickPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_front(self)

    def back(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.GridIndexHorizonPickPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_GridIndexHorizonPickPairList

# Register GridIndexHorizonPickPairList in _seisware_sdk_37:
_seisware_sdk_37.GridIndexHorizonPickPairList_swigregister(GridIndexHorizonPickPairList)

HorizonType_Peak = _seisware_sdk_37.HorizonType_Peak
HorizonType_Trough = _seisware_sdk_37.HorizonType_Trough
HorizonType_ZeroCrossing = _seisware_sdk_37.HorizonType_ZeroCrossing
HorizonType_PeakTroughZeroCrossing = _seisware_sdk_37.HorizonType_PeakTroughZeroCrossing
HorizonType_TroughPeakZeroCrossing = _seisware_sdk_37.HorizonType_TroughPeakZeroCrossing
HorizonType_ComputedTime = _seisware_sdk_37.HorizonType_ComputedTime
HorizonType_ComputedAmplitude = _seisware_sdk_37.HorizonType_ComputedAmplitude
HorizonType_Value = _seisware_sdk_37.HorizonType_Value
HorizonPickMode_AutoPick = _seisware_sdk_37.HorizonPickMode_AutoPick
HorizonPickMode_SnapStream = _seisware_sdk_37.HorizonPickMode_SnapStream
HorizonPickMode_Manual = _seisware_sdk_37.HorizonPickMode_Manual
HorizonPickMode_StraightLine = _seisware_sdk_37.HorizonPickMode_StraightLine
HorizonPickMode_Guide = _seisware_sdk_37.HorizonPickMode_Guide
HorizonPickMode_Datum = _seisware_sdk_37.HorizonPickMode_Datum
class Horizon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Horizon_swiginit(self, _seisware_sdk_37.new_Horizon(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Horizon

    def ID(self, *args):
        return _seisware_sdk_37.Horizon_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Horizon_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Horizon_OwnerID(self)

    def Description(self, *args):
        return _seisware_sdk_37.Horizon_Description(self, *args)

    def Color(self, *args):
        return _seisware_sdk_37.Horizon_Color(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.Horizon_Type(self, *args)

    def HasExtents(self):
        return _seisware_sdk_37.Horizon_HasExtents(self)

    def Extents(self):
        return _seisware_sdk_37.Horizon_Extents(self)

    def PickMode(self, *args):
        return _seisware_sdk_37.Horizon_PickMode(self, *args)

    def SearchGate(self, *args):
        return _seisware_sdk_37.Horizon_SearchGate(self, *args)

    def PickValue(self, *args):
        return _seisware_sdk_37.Horizon_PickValue(self, *args)

    def SearchClosest(self, *args):
        return _seisware_sdk_37.Horizon_SearchClosest(self, *args)

# Register Horizon in _seisware_sdk_37:
_seisware_sdk_37.Horizon_swigregister(Horizon)

class HorizonManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonManager

    def GetAll(self, items):
        return _seisware_sdk_37.HorizonManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.HorizonManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.HorizonManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.HorizonManager_Add(self, *args)

    def Remove(self, item):
        return _seisware_sdk_37.HorizonManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.HorizonManager_Update(self, item)

    def ChangeOwner(self, item, ownerID):
        return _seisware_sdk_37.HorizonManager_ChangeOwner(self, item, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.HorizonManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.HorizonManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.HorizonManager_CanUpdate(self, item)

    def CanChangeOwner(self, item):
        return _seisware_sdk_37.HorizonManager_CanChangeOwner(self, item)

# Register HorizonManager in _seisware_sdk_37:
_seisware_sdk_37.HorizonManager_swigregister(HorizonManager)

class HorizonList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.HorizonList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.HorizonList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.HorizonList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.HorizonList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.HorizonList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.HorizonList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.HorizonList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.HorizonList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.HorizonList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.HorizonList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.HorizonList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.HorizonList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.HorizonList_empty(self)

    def size(self):
        return _seisware_sdk_37.HorizonList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.HorizonList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.HorizonList_begin(self)

    def end(self):
        return _seisware_sdk_37.HorizonList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.HorizonList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.HorizonList_rend(self)

    def clear(self):
        return _seisware_sdk_37.HorizonList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.HorizonList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.HorizonList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.HorizonList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.HorizonList_swiginit(self, _seisware_sdk_37.new_HorizonList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.HorizonList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.HorizonList_front(self)

    def back(self):
        return _seisware_sdk_37.HorizonList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.HorizonList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.HorizonList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.HorizonList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.HorizonList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.HorizonList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_HorizonList

# Register HorizonList in _seisware_sdk_37:
_seisware_sdk_37.HorizonList_swigregister(HorizonList)

class FaultPick(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.FaultPick_swiginit(self, _seisware_sdk_37.new_FaultPick(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_FaultPick

    def ID(self):
        return _seisware_sdk_37.FaultPick_ID(self)

    def Line(self, *args):
        return _seisware_sdk_37.FaultPick_Line(self, *args)

    def Trace(self, *args):
        return _seisware_sdk_37.FaultPick_Trace(self, *args)

    def Position(self, *args):
        return _seisware_sdk_37.FaultPick_Position(self, *args)

    def OnTrace(self, *args):
        return _seisware_sdk_37.FaultPick_OnTrace(self, *args)

    def SeismicSurveyID(self, *args):
        return _seisware_sdk_37.FaultPick_SeismicSurveyID(self, *args)

# Register FaultPick in _seisware_sdk_37:
_seisware_sdk_37.FaultPick_swigregister(FaultPick)

class FaultSegment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.FaultSegment_swiginit(self, _seisware_sdk_37.new_FaultSegment(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_FaultSegment

    def ID(self):
        return _seisware_sdk_37.FaultSegment_ID(self)

    def IsSlice(self, *args):
        return _seisware_sdk_37.FaultSegment_IsSlice(self, *args)

    def Picks(self, picks):
        return _seisware_sdk_37.FaultSegment_Picks(self, picks)

    def SetPicks(self, picks):
        return _seisware_sdk_37.FaultSegment_SetPicks(self, picks)

# Register FaultSegment in _seisware_sdk_37:
_seisware_sdk_37.FaultSegment_swigregister(FaultSegment)

class FaultTriangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.FaultTriangle_swiginit(self, _seisware_sdk_37.new_FaultTriangle(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_FaultTriangle

    def ID(self):
        return _seisware_sdk_37.FaultTriangle_ID(self)

    def Picks(self, pick1, pick2, pick3):
        return _seisware_sdk_37.FaultTriangle_Picks(self, pick1, pick2, pick3)

    def SetPicks(self, pick1, pick2, pick3):
        return _seisware_sdk_37.FaultTriangle_SetPicks(self, pick1, pick2, pick3)

# Register FaultTriangle in _seisware_sdk_37:
_seisware_sdk_37.FaultTriangle_swigregister(FaultTriangle)

FaultType_Unassigned = _seisware_sdk_37.FaultType_Unassigned
FaultType_Normal = _seisware_sdk_37.FaultType_Normal
FaultType_Overthrust = _seisware_sdk_37.FaultType_Overthrust
class Fault(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Fault_swiginit(self, _seisware_sdk_37.new_Fault(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Fault

    def ID(self, *args):
        return _seisware_sdk_37.Fault_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Fault_Name(self, *args)

    def Sorted(self, *args):
        return _seisware_sdk_37.Fault_Sorted(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Fault_OwnerID(self)

    def Type(self, *args):
        return _seisware_sdk_37.Fault_Type(self, *args)

    def VerticalDomain(self, *args):
        return _seisware_sdk_37.Fault_VerticalDomain(self, *args)

    def Color(self, *args):
        return _seisware_sdk_37.Fault_Color(self, *args)

    def HasExtents(self):
        return _seisware_sdk_37.Fault_HasExtents(self)

    def Bounds(self):
        return _seisware_sdk_37.Fault_Bounds(self)

    def MinZ(self):
        return _seisware_sdk_37.Fault_MinZ(self)

    def MaxZ(self):
        return _seisware_sdk_37.Fault_MaxZ(self)

    def Segments(self, segments):
        return _seisware_sdk_37.Fault_Segments(self, segments)

    def SetSegments(self, segments):
        return _seisware_sdk_37.Fault_SetSegments(self, segments)

    def Triangles(self, triangles):
        return _seisware_sdk_37.Fault_Triangles(self, triangles)

# Register Fault in _seisware_sdk_37:
_seisware_sdk_37.Fault_swigregister(Fault)

class FaultManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_FaultManager

    def GetAll(self, items):
        return _seisware_sdk_37.FaultManager_GetAll(self, items)

    def GetByKeys(self, keys, faults, failedKeys):
        return _seisware_sdk_37.FaultManager_GetByKeys(self, keys, faults, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.FaultManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.FaultManager_Add(self, *args)

    def Remove(self, item):
        return _seisware_sdk_37.FaultManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.FaultManager_Update(self, item)

    def ChangeOwner(self, item, ownerID):
        return _seisware_sdk_37.FaultManager_ChangeOwner(self, item, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.FaultManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.FaultManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.FaultManager_CanUpdate(self, item)

    def CanChangeOwner(self, item):
        return _seisware_sdk_37.FaultManager_CanChangeOwner(self, item)

    def PopulateSegmentsAndTriangles(self, fault):
        return _seisware_sdk_37.FaultManager_PopulateSegmentsAndTriangles(self, fault)

    def PopulateSegments(self, fault):
        return _seisware_sdk_37.FaultManager_PopulateSegments(self, fault)

    def PopulateTriangles(self, fault):
        return _seisware_sdk_37.FaultManager_PopulateTriangles(self, fault)

# Register FaultManager in _seisware_sdk_37:
_seisware_sdk_37.FaultManager_swigregister(FaultManager)

class FaultList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FaultList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FaultList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FaultList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FaultList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FaultList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FaultList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FaultList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FaultList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FaultList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FaultList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FaultList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FaultList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FaultList_empty(self)

    def size(self):
        return _seisware_sdk_37.FaultList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FaultList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FaultList_begin(self)

    def end(self):
        return _seisware_sdk_37.FaultList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FaultList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FaultList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FaultList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FaultList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FaultList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FaultList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FaultList_swiginit(self, _seisware_sdk_37.new_FaultList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FaultList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FaultList_front(self)

    def back(self):
        return _seisware_sdk_37.FaultList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FaultList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FaultList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FaultList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FaultList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FaultList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FaultList

# Register FaultList in _seisware_sdk_37:
_seisware_sdk_37.FaultList_swigregister(FaultList)

class FaultPickList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FaultPickList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FaultPickList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FaultPickList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FaultPickList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FaultPickList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FaultPickList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FaultPickList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FaultPickList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FaultPickList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FaultPickList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FaultPickList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FaultPickList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FaultPickList_empty(self)

    def size(self):
        return _seisware_sdk_37.FaultPickList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FaultPickList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FaultPickList_begin(self)

    def end(self):
        return _seisware_sdk_37.FaultPickList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FaultPickList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FaultPickList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FaultPickList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FaultPickList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FaultPickList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FaultPickList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FaultPickList_swiginit(self, _seisware_sdk_37.new_FaultPickList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FaultPickList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FaultPickList_front(self)

    def back(self):
        return _seisware_sdk_37.FaultPickList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FaultPickList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FaultPickList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FaultPickList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FaultPickList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FaultPickList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FaultPickList

# Register FaultPickList in _seisware_sdk_37:
_seisware_sdk_37.FaultPickList_swigregister(FaultPickList)

class FaultSegmentList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FaultSegmentList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FaultSegmentList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FaultSegmentList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FaultSegmentList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FaultSegmentList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FaultSegmentList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FaultSegmentList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FaultSegmentList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FaultSegmentList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FaultSegmentList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FaultSegmentList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FaultSegmentList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FaultSegmentList_empty(self)

    def size(self):
        return _seisware_sdk_37.FaultSegmentList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FaultSegmentList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FaultSegmentList_begin(self)

    def end(self):
        return _seisware_sdk_37.FaultSegmentList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FaultSegmentList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FaultSegmentList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FaultSegmentList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FaultSegmentList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FaultSegmentList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FaultSegmentList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FaultSegmentList_swiginit(self, _seisware_sdk_37.new_FaultSegmentList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FaultSegmentList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FaultSegmentList_front(self)

    def back(self):
        return _seisware_sdk_37.FaultSegmentList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FaultSegmentList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FaultSegmentList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FaultSegmentList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FaultSegmentList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FaultSegmentList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FaultSegmentList

# Register FaultSegmentList in _seisware_sdk_37:
_seisware_sdk_37.FaultSegmentList_swigregister(FaultSegmentList)

class FaultTriangleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FaultTriangleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FaultTriangleList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FaultTriangleList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FaultTriangleList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FaultTriangleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FaultTriangleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FaultTriangleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FaultTriangleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FaultTriangleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FaultTriangleList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FaultTriangleList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FaultTriangleList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FaultTriangleList_empty(self)

    def size(self):
        return _seisware_sdk_37.FaultTriangleList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FaultTriangleList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FaultTriangleList_begin(self)

    def end(self):
        return _seisware_sdk_37.FaultTriangleList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FaultTriangleList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FaultTriangleList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FaultTriangleList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FaultTriangleList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FaultTriangleList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FaultTriangleList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FaultTriangleList_swiginit(self, _seisware_sdk_37.new_FaultTriangleList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FaultTriangleList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FaultTriangleList_front(self)

    def back(self):
        return _seisware_sdk_37.FaultTriangleList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FaultTriangleList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FaultTriangleList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FaultTriangleList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FaultTriangleList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FaultTriangleList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FaultTriangleList

# Register FaultTriangleList in _seisware_sdk_37:
_seisware_sdk_37.FaultTriangleList_swigregister(FaultTriangleList)

class Blob(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Blob_swiginit(self, _seisware_sdk_37.new_Blob(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Blob

    def ID(self, *args):
        return _seisware_sdk_37.Blob_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Blob_OwnerID(self)

    def AddTag(self, tag):
        return _seisware_sdk_37.Blob_AddTag(self, tag)

    def RemoveTag(self, tag):
        return _seisware_sdk_37.Blob_RemoveTag(self, tag)

    def HasTag(self, tag):
        return _seisware_sdk_37.Blob_HasTag(self, tag)

    def Tags(self, *args):
        return _seisware_sdk_37.Blob_Tags(self, *args)

    def Version(self):
        return _seisware_sdk_37.Blob_Version(self)

    def Data(self, *args):
        return _seisware_sdk_37.Blob_Data(self, *args)

    def Size(self):
        return _seisware_sdk_37.Blob_Size(self)

# Register Blob in _seisware_sdk_37:
_seisware_sdk_37.Blob_swigregister(Blob)

ParameterType__None = _seisware_sdk_37.ParameterType__None
ParameterType_Int = _seisware_sdk_37.ParameterType_Int
ParameterType_Int64 = _seisware_sdk_37.ParameterType_Int64
ParameterType_Double = _seisware_sdk_37.ParameterType_Double
ParameterType_String = _seisware_sdk_37.ParameterType_String
ParameterType_IntVector = _seisware_sdk_37.ParameterType_IntVector
ParameterType_DoubleVector = _seisware_sdk_37.ParameterType_DoubleVector
ParameterType_StringVector = _seisware_sdk_37.ParameterType_StringVector
ParameterType_ID = _seisware_sdk_37.ParameterType_ID
ParameterType_IDVector = _seisware_sdk_37.ParameterType_IDVector
ParameterType_Blob = _seisware_sdk_37.ParameterType_Blob
ParameterType_BlobVector = _seisware_sdk_37.ParameterType_BlobVector
class ParameterValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ParameterValue_swiginit(self, _seisware_sdk_37.new_ParameterValue(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_ParameterValue

    def Type(self):
        return _seisware_sdk_37.ParameterValue_Type(self)

    def ToInt(self):
        return _seisware_sdk_37.ParameterValue_ToInt(self)

    def ToLong(self):
        return _seisware_sdk_37.ParameterValue_ToLong(self)

    def ToDouble(self):
        return _seisware_sdk_37.ParameterValue_ToDouble(self)

    def ToString(self):
        return _seisware_sdk_37.ParameterValue_ToString(self)

    def ToIntVector(self):
        return _seisware_sdk_37.ParameterValue_ToIntVector(self)

    def ToDoubleVector(self):
        return _seisware_sdk_37.ParameterValue_ToDoubleVector(self)

    def ToStringVector(self):
        return _seisware_sdk_37.ParameterValue_ToStringVector(self)

    def ToID(self):
        return _seisware_sdk_37.ParameterValue_ToID(self)

    def ToIDVector(self):
        return _seisware_sdk_37.ParameterValue_ToIDVector(self)

    def ToBlob(self):
        return _seisware_sdk_37.ParameterValue_ToBlob(self)

    def ToBlobVector(self):
        return _seisware_sdk_37.ParameterValue_ToBlobVector(self)

# Register ParameterValue in _seisware_sdk_37:
_seisware_sdk_37.ParameterValue_swigregister(ParameterValue)

class Message(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Message_swiginit(self, _seisware_sdk_37.new_Message(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Message

    def Type(self):
        return _seisware_sdk_37.Message_Type(self)

    def Operation(self):
        return _seisware_sdk_37.Message_Operation(self)

    def AddParameter(self, name, value):
        return _seisware_sdk_37.Message_AddParameter(self, name, value)

    def GetParameterNames(self, names):
        return _seisware_sdk_37.Message_GetParameterNames(self, names)

    def GetParameterValue(self, i):
        return _seisware_sdk_37.Message_GetParameterValue(self, i)

# Register Message in _seisware_sdk_37:
_seisware_sdk_37.Message_swigregister(Message)

class MessageManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_MessageManager

    def GetMessages(self, messages):
        return _seisware_sdk_37.MessageManager_GetMessages(self, messages)

    def Subscribe(self, *args):
        return _seisware_sdk_37.MessageManager_Subscribe(self, *args)

    def Unsubscribe(self, *args):
        return _seisware_sdk_37.MessageManager_Unsubscribe(self, *args)

    def Subscriptions(self, subscriptions):
        return _seisware_sdk_37.MessageManager_Subscriptions(self, subscriptions)

    def Dispatch(self, message):
        return _seisware_sdk_37.MessageManager_Dispatch(self, message)

# Register MessageManager in _seisware_sdk_37:
_seisware_sdk_37.MessageManager_swigregister(MessageManager)

class MessageList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.MessageList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.MessageList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.MessageList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.MessageList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.MessageList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.MessageList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.MessageList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.MessageList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.MessageList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.MessageList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.MessageList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.MessageList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.MessageList_empty(self)

    def size(self):
        return _seisware_sdk_37.MessageList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.MessageList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.MessageList_begin(self)

    def end(self):
        return _seisware_sdk_37.MessageList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.MessageList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.MessageList_rend(self)

    def clear(self):
        return _seisware_sdk_37.MessageList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.MessageList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.MessageList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.MessageList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.MessageList_swiginit(self, _seisware_sdk_37.new_MessageList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.MessageList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.MessageList_front(self)

    def back(self):
        return _seisware_sdk_37.MessageList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.MessageList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.MessageList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.MessageList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.MessageList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.MessageList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_MessageList

# Register MessageList in _seisware_sdk_37:
_seisware_sdk_37.MessageList_swigregister(MessageList)

FilterType_Unknown = _seisware_sdk_37.FilterType_Unknown
FilterType_AOI = _seisware_sdk_37.FilterType_AOI
FilterType_Owner = _seisware_sdk_37.FilterType_Owner
FilterType_WellData = _seisware_sdk_37.FilterType_WellData
FilterType_FaultData = _seisware_sdk_37.FilterType_FaultData
FilterType_GridData = _seisware_sdk_37.FilterType_GridData
FilterType_CultureData = _seisware_sdk_37.FilterType_CultureData
FilterType_HorizonData = _seisware_sdk_37.FilterType_HorizonData
FilterType_SeismicSurveyData = _seisware_sdk_37.FilterType_SeismicSurveyData
class Filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Filter_swiginit(self, _seisware_sdk_37.new_Filter(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Filter

    def ID(self):
        return _seisware_sdk_37.Filter_ID(self)

    def Name(self):
        return _seisware_sdk_37.Filter_Name(self)

    def FilterType(self):
        return _seisware_sdk_37.Filter_FilterType(self)

# Register Filter in _seisware_sdk_37:
_seisware_sdk_37.Filter_swigregister(Filter)

class FilterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_FilterManager

    def GetAll(self, items):
        return _seisware_sdk_37.FilterManager_GetAll(self, items)

    def GetByKeys(self, keys, filter, failedKeys):
        return _seisware_sdk_37.FilterManager_GetByKeys(self, keys, filter, failedKeys)

# Register FilterManager in _seisware_sdk_37:
_seisware_sdk_37.FilterManager_swigregister(FilterManager)

class FilterList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FilterList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FilterList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FilterList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FilterList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FilterList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FilterList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FilterList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FilterList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FilterList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FilterList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FilterList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FilterList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FilterList_empty(self)

    def size(self):
        return _seisware_sdk_37.FilterList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FilterList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FilterList_begin(self)

    def end(self):
        return _seisware_sdk_37.FilterList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FilterList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FilterList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FilterList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FilterList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FilterList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FilterList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FilterList_swiginit(self, _seisware_sdk_37.new_FilterList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FilterList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FilterList_front(self)

    def back(self):
        return _seisware_sdk_37.FilterList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FilterList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FilterList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FilterList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FilterList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FilterList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FilterList

# Register FilterList in _seisware_sdk_37:
_seisware_sdk_37.FilterList_swigregister(FilterList)

RasterType_TIFF = _seisware_sdk_37.RasterType_TIFF
RasterType_JPEG = _seisware_sdk_37.RasterType_JPEG
RasterType_GIF = _seisware_sdk_37.RasterType_GIF
RasterType_Icon = _seisware_sdk_37.RasterType_Icon
RasterType_PNG = _seisware_sdk_37.RasterType_PNG
RasterType_WindowsBitmap = _seisware_sdk_37.RasterType_WindowsBitmap
RasterType_UnixBitmap = _seisware_sdk_37.RasterType_UnixBitmap
RasterType_Unknown = _seisware_sdk_37.RasterType_Unknown
class Raster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Raster_swiginit(self, _seisware_sdk_37.new_Raster(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Raster

    def ID(self, *args):
        return _seisware_sdk_37.Raster_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Raster_Name(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Raster_OwnerID(self)

    def Description(self, *args):
        return _seisware_sdk_37.Raster_Description(self, *args)

    def FileName(self, *args):
        return _seisware_sdk_37.Raster_FileName(self, *args)

    def PixelWidth(self, *args):
        return _seisware_sdk_37.Raster_PixelWidth(self, *args)

    def PixelHeight(self, *args):
        return _seisware_sdk_37.Raster_PixelHeight(self, *args)

    def LowerLeft(self, *args):
        return _seisware_sdk_37.Raster_LowerLeft(self, *args)

    def LowerRight(self, *args):
        return _seisware_sdk_37.Raster_LowerRight(self, *args)

    def UpperLeft(self, *args):
        return _seisware_sdk_37.Raster_UpperLeft(self, *args)

    def UpperRight(self, *args):
        return _seisware_sdk_37.Raster_UpperRight(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.Raster_Type(self, *args)

# Register Raster in _seisware_sdk_37:
_seisware_sdk_37.Raster_swigregister(Raster)

class RasterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_RasterManager

    def GetAll(self, rasterList):
        return _seisware_sdk_37.RasterManager_GetAll(self, rasterList)

    def GetByKeys(self, keys, rasterList, failedKeys):
        return _seisware_sdk_37.RasterManager_GetByKeys(self, keys, rasterList, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.RasterManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.RasterManager_Add(self, *args)

    def Remove(self, raster):
        return _seisware_sdk_37.RasterManager_Remove(self, raster)

    def Update(self, raster):
        return _seisware_sdk_37.RasterManager_Update(self, raster)

    def ChangeOwner(self, raster, ownerID):
        return _seisware_sdk_37.RasterManager_ChangeOwner(self, raster, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.RasterManager_CanAdd(self)

    def CanRemove(self, raster):
        return _seisware_sdk_37.RasterManager_CanRemove(self, raster)

    def CanUpdate(self, raster):
        return _seisware_sdk_37.RasterManager_CanUpdate(self, raster)

    def CanChangeOwner(self, raster):
        return _seisware_sdk_37.RasterManager_CanChangeOwner(self, raster)

# Register RasterManager in _seisware_sdk_37:
_seisware_sdk_37.RasterManager_swigregister(RasterManager)

class RasterList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.RasterList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.RasterList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.RasterList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.RasterList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.RasterList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.RasterList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.RasterList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.RasterList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.RasterList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.RasterList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.RasterList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.RasterList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.RasterList_empty(self)

    def size(self):
        return _seisware_sdk_37.RasterList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.RasterList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.RasterList_begin(self)

    def end(self):
        return _seisware_sdk_37.RasterList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.RasterList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.RasterList_rend(self)

    def clear(self):
        return _seisware_sdk_37.RasterList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.RasterList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.RasterList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.RasterList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.RasterList_swiginit(self, _seisware_sdk_37.new_RasterList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.RasterList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.RasterList_front(self)

    def back(self):
        return _seisware_sdk_37.RasterList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.RasterList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.RasterList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.RasterList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.RasterList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.RasterList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_RasterList

# Register RasterList in _seisware_sdk_37:
_seisware_sdk_37.RasterList_swigregister(RasterList)

TimeDepthCurveType_Unknown = _seisware_sdk_37.TimeDepthCurveType_Unknown
TimeDepthCurveType_CheckShot = _seisware_sdk_37.TimeDepthCurveType_CheckShot
TimeDepthCurveType_SonicGenTVD = _seisware_sdk_37.TimeDepthCurveType_SonicGenTVD
TimeDepthCurveType_HrznTopEquiv = _seisware_sdk_37.TimeDepthCurveType_HrznTopEquiv
TimeDepthCurveType_User = _seisware_sdk_37.TimeDepthCurveType_User
TimeDepthCurveType_VelModelGen = _seisware_sdk_37.TimeDepthCurveType_VelModelGen
class TimeDepthCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.TimeDepthCurve_swiginit(self, _seisware_sdk_37.new_TimeDepthCurve(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_TimeDepthCurve

    def Name(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_Name(self, *args)

    def ID(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.TimeDepthCurve_OwnerID(self)

    def Type(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_Type(self, *args)

    def UserShift(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_UserShift(self, *args)

    def CurveDatum(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_CurveDatum(self, *args)

    def ReplacementVelocity(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_ReplacementVelocity(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_Description(self, *args)

    def Source(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_Source(self, *args)

    def ParentID(self, *args):
        return _seisware_sdk_37.TimeDepthCurve_ParentID(self, *args)

    def DataLastModified(self):
        return _seisware_sdk_37.TimeDepthCurve_DataLastModified(self)

    def Values(self, values):
        return _seisware_sdk_37.TimeDepthCurve_Values(self, values)

    def SetValues(self, values):
        return _seisware_sdk_37.TimeDepthCurve_SetValues(self, values)

# Register TimeDepthCurve in _seisware_sdk_37:
_seisware_sdk_37.TimeDepthCurve_swigregister(TimeDepthCurve)

class TimeDepthCurveManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_TimeDepthCurveManager

    def LoadCache(self):
        return _seisware_sdk_37.TimeDepthCurveManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.TimeDepthCurveManager_GetAll(self, items)

    def GetByKeys(self, keys, items):
        return _seisware_sdk_37.TimeDepthCurveManager_GetByKeys(self, keys, items)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.TimeDepthCurveManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForWell(self, wellKey, items):
        return _seisware_sdk_37.TimeDepthCurveManager_GetAllForWell(self, wellKey, items)

    def Add(self, *args):
        return _seisware_sdk_37.TimeDepthCurveManager_Add(self, *args)

    def Remove(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_Update(self, item)

    def ChangeOwner(self, item, ownerID):
        return _seisware_sdk_37.TimeDepthCurveManager_ChangeOwner(self, item, ownerID)

    def CanAdd(self):
        return _seisware_sdk_37.TimeDepthCurveManager_CanAdd(self)

    def CanRemove(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_CanRemove(self, item)

    def CanUpdate(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_CanUpdate(self, item)

    def CanChangeOwner(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_CanChangeOwner(self, item)

    def PopulateValues(self, item):
        return _seisware_sdk_37.TimeDepthCurveManager_PopulateValues(self, item)

    def GetActiveTDCurve(self, wellKey):
        return _seisware_sdk_37.TimeDepthCurveManager_GetActiveTDCurve(self, wellKey)

    def GetActiveTDCurveForUser(self, wellKey, userKey, userName):
        return _seisware_sdk_37.TimeDepthCurveManager_GetActiveTDCurveForUser(self, wellKey, userKey, userName)

    def GetAllActiveTDCurvesForUser(self, userKey, userName):
        return _seisware_sdk_37.TimeDepthCurveManager_GetAllActiveTDCurvesForUser(self, userKey, userName)

    def SetActiveTDCurve(self, wellKey, timeDepthCurveKey):
        return _seisware_sdk_37.TimeDepthCurveManager_SetActiveTDCurve(self, wellKey, timeDepthCurveKey)

# Register TimeDepthCurveManager in _seisware_sdk_37:
_seisware_sdk_37.TimeDepthCurveManager_swigregister(TimeDepthCurveManager)

class TimeDepthPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.TimeDepthPair_swiginit(self, _seisware_sdk_37.new_TimeDepthPair(*args))
    first = property(_seisware_sdk_37.TimeDepthPair_first_get, _seisware_sdk_37.TimeDepthPair_first_set)
    second = property(_seisware_sdk_37.TimeDepthPair_second_get, _seisware_sdk_37.TimeDepthPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_TimeDepthPair

# Register TimeDepthPair in _seisware_sdk_37:
_seisware_sdk_37.TimeDepthPair_swigregister(TimeDepthPair)

class TimeDepthPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.TimeDepthPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.TimeDepthPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.TimeDepthPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.TimeDepthPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.TimeDepthPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.TimeDepthPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.TimeDepthPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.TimeDepthPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.TimeDepthPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.TimeDepthPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.TimeDepthPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.TimeDepthPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.TimeDepthPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.TimeDepthPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.TimeDepthPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.TimeDepthPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.TimeDepthPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.TimeDepthPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.TimeDepthPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.TimeDepthPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.TimeDepthPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.TimeDepthPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.TimeDepthPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.TimeDepthPairList_swiginit(self, _seisware_sdk_37.new_TimeDepthPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.TimeDepthPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.TimeDepthPairList_front(self)

    def back(self):
        return _seisware_sdk_37.TimeDepthPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.TimeDepthPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.TimeDepthPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.TimeDepthPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.TimeDepthPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.TimeDepthPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_TimeDepthPairList

# Register TimeDepthPairList in _seisware_sdk_37:
_seisware_sdk_37.TimeDepthPairList_swigregister(TimeDepthPairList)

class TimeDepthCurveList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.TimeDepthCurveList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.TimeDepthCurveList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.TimeDepthCurveList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.TimeDepthCurveList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.TimeDepthCurveList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.TimeDepthCurveList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.TimeDepthCurveList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.TimeDepthCurveList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.TimeDepthCurveList_empty(self)

    def size(self):
        return _seisware_sdk_37.TimeDepthCurveList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.TimeDepthCurveList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.TimeDepthCurveList_begin(self)

    def end(self):
        return _seisware_sdk_37.TimeDepthCurveList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.TimeDepthCurveList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.TimeDepthCurveList_rend(self)

    def clear(self):
        return _seisware_sdk_37.TimeDepthCurveList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.TimeDepthCurveList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.TimeDepthCurveList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.TimeDepthCurveList_swiginit(self, _seisware_sdk_37.new_TimeDepthCurveList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.TimeDepthCurveList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.TimeDepthCurveList_front(self)

    def back(self):
        return _seisware_sdk_37.TimeDepthCurveList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.TimeDepthCurveList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.TimeDepthCurveList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.TimeDepthCurveList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.TimeDepthCurveList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_TimeDepthCurveList

# Register TimeDepthCurveList in _seisware_sdk_37:
_seisware_sdk_37.TimeDepthCurveList_swigregister(TimeDepthCurveList)

class BlobManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_BlobManager

    def GetAll(self, *args):
        return _seisware_sdk_37.BlobManager_GetAll(self, *args)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.BlobManager_GetByKeys(self, keys, items, failedKeys)

    def Add(self, item):
        return _seisware_sdk_37.BlobManager_Add(self, item)

    def Remove(self, *args):
        return _seisware_sdk_37.BlobManager_Remove(self, *args)

    def Update(self, item):
        return _seisware_sdk_37.BlobManager_Update(self, item)

    def PopulateData(self, blob):
        return _seisware_sdk_37.BlobManager_PopulateData(self, blob)

    def CanAdd(self):
        return _seisware_sdk_37.BlobManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.BlobManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.BlobManager_CanUpdate(self, *args)

# Register BlobManager in _seisware_sdk_37:
_seisware_sdk_37.BlobManager_swigregister(BlobManager)

class BlobList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.BlobList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.BlobList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.BlobList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.BlobList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.BlobList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.BlobList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.BlobList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.BlobList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.BlobList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.BlobList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.BlobList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.BlobList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.BlobList_empty(self)

    def size(self):
        return _seisware_sdk_37.BlobList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.BlobList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.BlobList_begin(self)

    def end(self):
        return _seisware_sdk_37.BlobList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.BlobList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.BlobList_rend(self)

    def clear(self):
        return _seisware_sdk_37.BlobList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.BlobList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.BlobList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.BlobList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.BlobList_swiginit(self, _seisware_sdk_37.new_BlobList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.BlobList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.BlobList_front(self)

    def back(self):
        return _seisware_sdk_37.BlobList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.BlobList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.BlobList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.BlobList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.BlobList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.BlobList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_BlobList

# Register BlobList in _seisware_sdk_37:
_seisware_sdk_37.BlobList_swigregister(BlobList)

class Zone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Zone_swiginit(self, _seisware_sdk_37.new_Zone(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Zone

    def ID(self, *args):
        return _seisware_sdk_37.Zone_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Zone_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.Zone_Description(self, *args)

# Register Zone in _seisware_sdk_37:
_seisware_sdk_37.Zone_swigregister(Zone)

class ZoneManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneManager

    def GetAll(self, items):
        return _seisware_sdk_37.ZoneManager_GetAll(self, items)

    def GetByKeys(self, keys, Zone, failedKeys):
        return _seisware_sdk_37.ZoneManager_GetByKeys(self, keys, Zone, failedKeys)

    def Add(self, item):
        return _seisware_sdk_37.ZoneManager_Add(self, item)

    def Remove(self, item):
        return _seisware_sdk_37.ZoneManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.ZoneManager_Update(self, item)

# Register ZoneManager in _seisware_sdk_37:
_seisware_sdk_37.ZoneManager_swigregister(ZoneManager)

class ZoneList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ZoneList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ZoneList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ZoneList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ZoneList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ZoneList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ZoneList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ZoneList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ZoneList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ZoneList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ZoneList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ZoneList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ZoneList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ZoneList_empty(self)

    def size(self):
        return _seisware_sdk_37.ZoneList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ZoneList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ZoneList_begin(self)

    def end(self):
        return _seisware_sdk_37.ZoneList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ZoneList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ZoneList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ZoneList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ZoneList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ZoneList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ZoneList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ZoneList_swiginit(self, _seisware_sdk_37.new_ZoneList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ZoneList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ZoneList_front(self)

    def back(self):
        return _seisware_sdk_37.ZoneList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ZoneList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ZoneList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ZoneList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ZoneList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ZoneList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneList

# Register ZoneList in _seisware_sdk_37:
_seisware_sdk_37.ZoneList_swigregister(ZoneList)

class ZoneAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ZoneAttribute_swiginit(self, _seisware_sdk_37.new_ZoneAttribute(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneAttribute

    def ID(self, *args):
        return _seisware_sdk_37.ZoneAttribute_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.ZoneAttribute_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.ZoneAttribute_Description(self, *args)

    def ZoneTypeID(self, *args):
        return _seisware_sdk_37.ZoneAttribute_ZoneTypeID(self, *args)

    def Category(self, *args):
        return _seisware_sdk_37.ZoneAttribute_Category(self, *args)

# Register ZoneAttribute in _seisware_sdk_37:
_seisware_sdk_37.ZoneAttribute_swigregister(ZoneAttribute)

class ZoneAttributeManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneAttributeManager

    def GetAll(self, items):
        return _seisware_sdk_37.ZoneAttributeManager_GetAll(self, items)

    def GetByKeys(self, keys, attributes, failedKeys):
        return _seisware_sdk_37.ZoneAttributeManager_GetByKeys(self, keys, attributes, failedKeys)

    def Add(self, item):
        return _seisware_sdk_37.ZoneAttributeManager_Add(self, item)

    def Remove(self, item):
        return _seisware_sdk_37.ZoneAttributeManager_Remove(self, item)

    def Update(self, item):
        return _seisware_sdk_37.ZoneAttributeManager_Update(self, item)

# Register ZoneAttributeManager in _seisware_sdk_37:
_seisware_sdk_37.ZoneAttributeManager_swigregister(ZoneAttributeManager)

class ZoneAttributeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ZoneAttributeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ZoneAttributeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ZoneAttributeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ZoneAttributeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ZoneAttributeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ZoneAttributeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ZoneAttributeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ZoneAttributeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ZoneAttributeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ZoneAttributeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ZoneAttributeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ZoneAttributeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ZoneAttributeList_empty(self)

    def size(self):
        return _seisware_sdk_37.ZoneAttributeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ZoneAttributeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ZoneAttributeList_begin(self)

    def end(self):
        return _seisware_sdk_37.ZoneAttributeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ZoneAttributeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ZoneAttributeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ZoneAttributeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ZoneAttributeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ZoneAttributeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ZoneAttributeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ZoneAttributeList_swiginit(self, _seisware_sdk_37.new_ZoneAttributeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ZoneAttributeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ZoneAttributeList_front(self)

    def back(self):
        return _seisware_sdk_37.ZoneAttributeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ZoneAttributeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ZoneAttributeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ZoneAttributeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ZoneAttributeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ZoneAttributeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneAttributeList

# Register ZoneAttributeList in _seisware_sdk_37:
_seisware_sdk_37.ZoneAttributeList_swigregister(ZoneAttributeList)

class WellZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellZone_swiginit(self, _seisware_sdk_37.new_WellZone(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_WellZone

    def ID(self, *args):
        return _seisware_sdk_37.WellZone_ID(self, *args)

    def WellID(self, *args):
        return _seisware_sdk_37.WellZone_WellID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.WellZone_OwnerID(self)

    def Zone(self, *args):
        return _seisware_sdk_37.WellZone_Zone(self, *args)

    def Source(self, *args):
        return _seisware_sdk_37.WellZone_Source(self, *args)

    def ZoneTypeID(self, *args):
        return _seisware_sdk_37.WellZone_ZoneTypeID(self, *args)

    def Category(self, *args):
        return _seisware_sdk_37.WellZone_Category(self, *args)

    def TopMD(self, *args):
        return _seisware_sdk_37.WellZone_TopMD(self, *args)

    def BaseMD(self, *args):
        return _seisware_sdk_37.WellZone_BaseMD(self, *args)

    def RowChangedDate(self):
        return _seisware_sdk_37.WellZone_RowChangedDate(self)

    def Attributes(self):
        return _seisware_sdk_37.WellZone_Attributes(self)

    def SetAttributes(self, attributes):
        return _seisware_sdk_37.WellZone_SetAttributes(self, attributes)

# Register WellZone in _seisware_sdk_37:
_seisware_sdk_37.WellZone_swigregister(WellZone)

class WellZoneAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneAttribute_swiginit(self, _seisware_sdk_37.new_WellZoneAttribute(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneAttribute

    def ID(self, *args):
        return _seisware_sdk_37.WellZoneAttribute_ID(self, *args)

    def ZoneAttribute(self, *args):
        return _seisware_sdk_37.WellZoneAttribute_ZoneAttribute(self, *args)

    def AttributeValue(self, *args):
        return _seisware_sdk_37.WellZoneAttribute_AttributeValue(self, *args)

    def RowChangedDate(self):
        return _seisware_sdk_37.WellZoneAttribute_RowChangedDate(self)

# Register WellZoneAttribute in _seisware_sdk_37:
_seisware_sdk_37.WellZoneAttribute_swigregister(WellZoneAttribute)

class WellZoneAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneAttributes_swiginit(self, _seisware_sdk_37.new_WellZoneAttributes(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneAttributes

    def Contains(self, name, category):
        return _seisware_sdk_37.WellZoneAttributes_Contains(self, name, category)

    def Find(self, name, category):
        return _seisware_sdk_37.WellZoneAttributes_Find(self, name, category)

    def Count(self):
        return _seisware_sdk_37.WellZoneAttributes_Count(self)

    def Attributes(self, attrs):
        return _seisware_sdk_37.WellZoneAttributes_Attributes(self, attrs)

    def SetAttributes(self, attrs):
        return _seisware_sdk_37.WellZoneAttributes_SetAttributes(self, attrs)

# Register WellZoneAttributes in _seisware_sdk_37:
_seisware_sdk_37.WellZoneAttributes_swigregister(WellZoneAttributes)

class WellZoneManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneManager

    def LoadCache(self):
        return _seisware_sdk_37.WellZoneManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.WellZoneManager_GetAll(self, items)

    def GetByKeys(self, keys, wellZones, failedKeys):
        return _seisware_sdk_37.WellZoneManager_GetByKeys(self, keys, wellZones, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.WellZoneManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllForWell(self, wellKey, wellZoneList):
        return _seisware_sdk_37.WellZoneManager_GetAllForWell(self, wellKey, wellZoneList)

    def Add(self, *args):
        return _seisware_sdk_37.WellZoneManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.WellZoneManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.WellZoneManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.WellZoneManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.WellZoneManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.WellZoneManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.WellZoneManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.WellZoneManager_CanChangeOwner(self, *args)

    def PopulateAttributes(self, *args):
        return _seisware_sdk_37.WellZoneManager_PopulateAttributes(self, *args)

# Register WellZoneManager in _seisware_sdk_37:
_seisware_sdk_37.WellZoneManager_swigregister(WellZoneManager)

class WellZoneList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellZoneList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellZoneList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellZoneList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellZoneList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellZoneList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellZoneList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellZoneList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellZoneList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellZoneList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellZoneList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellZoneList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellZoneList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellZoneList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellZoneList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellZoneList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellZoneList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellZoneList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellZoneList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellZoneList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellZoneList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellZoneList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellZoneList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellZoneList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneList_swiginit(self, _seisware_sdk_37.new_WellZoneList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellZoneList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellZoneList_front(self)

    def back(self):
        return _seisware_sdk_37.WellZoneList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellZoneList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellZoneList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellZoneList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellZoneList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellZoneList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneList

# Register WellZoneList in _seisware_sdk_37:
_seisware_sdk_37.WellZoneList_swigregister(WellZoneList)

class WellZoneAttributeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellZoneAttributeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellZoneAttributeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellZoneAttributeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellZoneAttributeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellZoneAttributeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellZoneAttributeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellZoneAttributeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellZoneAttributeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellZoneAttributeList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellZoneAttributeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellZoneAttributeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellZoneAttributeList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellZoneAttributeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellZoneAttributeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellZoneAttributeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellZoneAttributeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellZoneAttributeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellZoneAttributeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneAttributeList_swiginit(self, _seisware_sdk_37.new_WellZoneAttributeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellZoneAttributeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellZoneAttributeList_front(self)

    def back(self):
        return _seisware_sdk_37.WellZoneAttributeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellZoneAttributeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellZoneAttributeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellZoneAttributeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellZoneAttributeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneAttributeList

# Register WellZoneAttributeList in _seisware_sdk_37:
_seisware_sdk_37.WellZoneAttributeList_swigregister(WellZoneAttributeList)

class WellZoneOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneOwnerPair_swiginit(self, _seisware_sdk_37.new_WellZoneOwnerPair(*args))
    first = property(_seisware_sdk_37.WellZoneOwnerPair_first_get, _seisware_sdk_37.WellZoneOwnerPair_first_set)
    second = property(_seisware_sdk_37.WellZoneOwnerPair_second_get, _seisware_sdk_37.WellZoneOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneOwnerPair

# Register WellZoneOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.WellZoneOwnerPair_swigregister(WellZoneOwnerPair)

class WellZoneOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.WellZoneOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.WellZoneOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.WellZoneOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.WellZoneOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.WellZoneOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.WellZoneOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.WellZoneOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.WellZoneOwnerPairList_swiginit(self, _seisware_sdk_37.new_WellZoneOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.WellZoneOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.WellZoneOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.WellZoneOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.WellZoneOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.WellZoneOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_WellZoneOwnerPairList

# Register WellZoneOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.WellZoneOwnerPairList_swigregister(WellZoneOwnerPairList)

class Formation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Formation_swiginit(self, _seisware_sdk_37.new_Formation(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Formation

    def ID(self, *args):
        return _seisware_sdk_37.Formation_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Formation_Name(self, *args)

    def ShortName(self, *args):
        return _seisware_sdk_37.Formation_ShortName(self, *args)

    def LongName(self, *args):
        return _seisware_sdk_37.Formation_LongName(self, *args)

# Register Formation in _seisware_sdk_37:
_seisware_sdk_37.Formation_swigregister(Formation)

class FormationManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_FormationManager

    def GetAll(self, formations):
        return _seisware_sdk_37.FormationManager_GetAll(self, formations)

    def GetByKeys(self, keys, formations, failedKeys):
        return _seisware_sdk_37.FormationManager_GetByKeys(self, keys, formations, failedKeys)

    def Add(self, formation):
        return _seisware_sdk_37.FormationManager_Add(self, formation)

    def Remove(self, formation):
        return _seisware_sdk_37.FormationManager_Remove(self, formation)

    def Update(self, formation):
        return _seisware_sdk_37.FormationManager_Update(self, formation)

    def CanAdd(self):
        return _seisware_sdk_37.FormationManager_CanAdd(self)

    def CanRemove(self):
        return _seisware_sdk_37.FormationManager_CanRemove(self)

    def CanUpdate(self):
        return _seisware_sdk_37.FormationManager_CanUpdate(self)

# Register FormationManager in _seisware_sdk_37:
_seisware_sdk_37.FormationManager_swigregister(FormationManager)

class FormationList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.FormationList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.FormationList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.FormationList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.FormationList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.FormationList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.FormationList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.FormationList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.FormationList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.FormationList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.FormationList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.FormationList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.FormationList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.FormationList_empty(self)

    def size(self):
        return _seisware_sdk_37.FormationList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.FormationList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.FormationList_begin(self)

    def end(self):
        return _seisware_sdk_37.FormationList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.FormationList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.FormationList_rend(self)

    def clear(self):
        return _seisware_sdk_37.FormationList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.FormationList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.FormationList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.FormationList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.FormationList_swiginit(self, _seisware_sdk_37.new_FormationList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.FormationList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.FormationList_front(self)

    def back(self):
        return _seisware_sdk_37.FormationList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.FormationList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.FormationList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.FormationList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.FormationList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.FormationList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_FormationList

# Register FormationList in _seisware_sdk_37:
_seisware_sdk_37.FormationList_swigregister(FormationList)

class Source(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Source_swiginit(self, _seisware_sdk_37.new_Source(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Source

    def ID(self, *args):
        return _seisware_sdk_37.Source_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.Source_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.Source_Description(self, *args)

    def LongName(self, *args):
        return _seisware_sdk_37.Source_LongName(self, *args)

# Register Source in _seisware_sdk_37:
_seisware_sdk_37.Source_swigregister(Source)

class SourceManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_SourceManager

    def GetAll(self, Sources):
        return _seisware_sdk_37.SourceManager_GetAll(self, Sources)

    def GetByKeys(self, keys, sources, failedKeys):
        return _seisware_sdk_37.SourceManager_GetByKeys(self, keys, sources, failedKeys)

    def Add(self, Source):
        return _seisware_sdk_37.SourceManager_Add(self, Source)

    def Remove(self, Source):
        return _seisware_sdk_37.SourceManager_Remove(self, Source)

    def Update(self, Source):
        return _seisware_sdk_37.SourceManager_Update(self, Source)

    def CanAdd(self):
        return _seisware_sdk_37.SourceManager_CanAdd(self)

    def CanRemove(self):
        return _seisware_sdk_37.SourceManager_CanRemove(self)

    def CanUpdate(self):
        return _seisware_sdk_37.SourceManager_CanUpdate(self)

# Register SourceManager in _seisware_sdk_37:
_seisware_sdk_37.SourceManager_swigregister(SourceManager)

class SourceList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.SourceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.SourceList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.SourceList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.SourceList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.SourceList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.SourceList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.SourceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.SourceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.SourceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.SourceList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.SourceList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.SourceList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.SourceList_empty(self)

    def size(self):
        return _seisware_sdk_37.SourceList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.SourceList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.SourceList_begin(self)

    def end(self):
        return _seisware_sdk_37.SourceList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.SourceList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.SourceList_rend(self)

    def clear(self):
        return _seisware_sdk_37.SourceList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.SourceList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.SourceList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.SourceList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.SourceList_swiginit(self, _seisware_sdk_37.new_SourceList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.SourceList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.SourceList_front(self)

    def back(self):
        return _seisware_sdk_37.SourceList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.SourceList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.SourceList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.SourceList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.SourceList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.SourceList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_SourceList

# Register SourceList in _seisware_sdk_37:
_seisware_sdk_37.SourceList_swigregister(SourceList)

class User(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.User_swiginit(self, _seisware_sdk_37.new_User(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_User

    def __eq__(self, rhs):
        return _seisware_sdk_37.User___eq__(self, rhs)

    def __ne__(self, rhs):
        return _seisware_sdk_37.User___ne__(self, rhs)

    def ID(self, *args):
        return _seisware_sdk_37.User_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.User_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.User_Description(self, *args)

    def Logins(self, *args):
        return _seisware_sdk_37.User_Logins(self, *args)

    def HomeFolder(self):
        return _seisware_sdk_37.User_HomeFolder(self)

    def DefaultRole(self, *args):
        return _seisware_sdk_37.User_DefaultRole(self, *args)

    def Roles(self, *args):
        return _seisware_sdk_37.User_Roles(self, *args)

# Register User in _seisware_sdk_37:
_seisware_sdk_37.User_swigregister(User)

class UserManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_UserManager

    def GetAll(self, items):
        return _seisware_sdk_37.UserManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.UserManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.UserManager_GetKeysByFilter(self, filter, keysInFilter)

    def GetAllRoles(self):
        return _seisware_sdk_37.UserManager_GetAllRoles(self)

    def GetRolesByName(self, names):
        return _seisware_sdk_37.UserManager_GetRolesByName(self, names)

    def GetProjectDataCounts(self, name):
        return _seisware_sdk_37.UserManager_GetProjectDataCounts(self, name)

    def Add(self, *args):
        return _seisware_sdk_37.UserManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.UserManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.UserManager_Update(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.UserManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.UserManager_CanRemove(self, *args)

    def CanUpdate(self):
        return _seisware_sdk_37.UserManager_CanUpdate(self)

# Register UserManager in _seisware_sdk_37:
_seisware_sdk_37.UserManager_swigregister(UserManager)

class Role(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Role_swiginit(self, _seisware_sdk_37.new_Role(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Role

    def ID(self):
        return _seisware_sdk_37.Role_ID(self)

    def Name(self):
        return _seisware_sdk_37.Role_Name(self)

    def Permissions(self):
        return _seisware_sdk_37.Role_Permissions(self)

# Register Role in _seisware_sdk_37:
_seisware_sdk_37.Role_swigregister(Role)

class Permission(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Permission_swiginit(self, _seisware_sdk_37.new_Permission(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Permission

    def ID(self):
        return _seisware_sdk_37.Permission_ID(self)

    def RestrictedEntities(self):
        return _seisware_sdk_37.Permission_RestrictedEntities(self)

# Register Permission in _seisware_sdk_37:
_seisware_sdk_37.Permission_swigregister(Permission)

class UserList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.UserList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.UserList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.UserList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.UserList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.UserList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.UserList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.UserList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.UserList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.UserList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.UserList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.UserList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.UserList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.UserList_empty(self)

    def size(self):
        return _seisware_sdk_37.UserList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.UserList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.UserList_begin(self)

    def end(self):
        return _seisware_sdk_37.UserList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.UserList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.UserList_rend(self)

    def clear(self):
        return _seisware_sdk_37.UserList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.UserList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.UserList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.UserList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.UserList_swiginit(self, _seisware_sdk_37.new_UserList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.UserList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.UserList_front(self)

    def back(self):
        return _seisware_sdk_37.UserList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.UserList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.UserList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.UserList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.UserList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.UserList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_UserList

# Register UserList in _seisware_sdk_37:
_seisware_sdk_37.UserList_swigregister(UserList)

class RoleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.RoleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.RoleMap___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.RoleMap___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.RoleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.RoleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.RoleMap___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.RoleMap_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.RoleMap_keys(self)

    def values(self):
        return _seisware_sdk_37.RoleMap_values(self)

    def items(self):
        return _seisware_sdk_37.RoleMap_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.RoleMap___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.RoleMap_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.RoleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.RoleMap___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.RoleMap_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.RoleMap_swiginit(self, _seisware_sdk_37.new_RoleMap(*args))

    def empty(self):
        return _seisware_sdk_37.RoleMap_empty(self)

    def size(self):
        return _seisware_sdk_37.RoleMap_size(self)

    def swap(self, v):
        return _seisware_sdk_37.RoleMap_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.RoleMap_begin(self)

    def end(self):
        return _seisware_sdk_37.RoleMap_end(self)

    def rbegin(self):
        return _seisware_sdk_37.RoleMap_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.RoleMap_rend(self)

    def clear(self):
        return _seisware_sdk_37.RoleMap_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.RoleMap_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.RoleMap_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.RoleMap_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.RoleMap_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.RoleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.RoleMap_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_RoleMap

# Register RoleMap in _seisware_sdk_37:
_seisware_sdk_37.RoleMap_swigregister(RoleMap)

class RoleNameMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.RoleNameMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.RoleNameMap___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.RoleNameMap___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.RoleNameMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.RoleNameMap___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.RoleNameMap___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.RoleNameMap_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.RoleNameMap_keys(self)

    def values(self):
        return _seisware_sdk_37.RoleNameMap_values(self)

    def items(self):
        return _seisware_sdk_37.RoleNameMap_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.RoleNameMap___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.RoleNameMap_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.RoleNameMap_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.RoleNameMap___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.RoleNameMap_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.RoleNameMap_swiginit(self, _seisware_sdk_37.new_RoleNameMap(*args))

    def empty(self):
        return _seisware_sdk_37.RoleNameMap_empty(self)

    def size(self):
        return _seisware_sdk_37.RoleNameMap_size(self)

    def swap(self, v):
        return _seisware_sdk_37.RoleNameMap_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.RoleNameMap_begin(self)

    def end(self):
        return _seisware_sdk_37.RoleNameMap_end(self)

    def rbegin(self):
        return _seisware_sdk_37.RoleNameMap_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.RoleNameMap_rend(self)

    def clear(self):
        return _seisware_sdk_37.RoleNameMap_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.RoleNameMap_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.RoleNameMap_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.RoleNameMap_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.RoleNameMap_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.RoleNameMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.RoleNameMap_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_RoleNameMap

# Register RoleNameMap in _seisware_sdk_37:
_seisware_sdk_37.RoleNameMap_swigregister(RoleNameMap)

class PermissionMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.PermissionMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.PermissionMap___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.PermissionMap___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.PermissionMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _seisware_sdk_37.PermissionMap___getitem__(self, key)

    def __delitem__(self, key):
        return _seisware_sdk_37.PermissionMap___delitem__(self, key)

    def has_key(self, key):
        return _seisware_sdk_37.PermissionMap_has_key(self, key)

    def keys(self):
        return _seisware_sdk_37.PermissionMap_keys(self)

    def values(self):
        return _seisware_sdk_37.PermissionMap_values(self)

    def items(self):
        return _seisware_sdk_37.PermissionMap_items(self)

    def __contains__(self, key):
        return _seisware_sdk_37.PermissionMap___contains__(self, key)

    def key_iterator(self):
        return _seisware_sdk_37.PermissionMap_key_iterator(self)

    def value_iterator(self):
        return _seisware_sdk_37.PermissionMap_value_iterator(self)

    def __setitem__(self, *args):
        return _seisware_sdk_37.PermissionMap___setitem__(self, *args)

    def asdict(self):
        return _seisware_sdk_37.PermissionMap_asdict(self)

    def __init__(self, *args):
        _seisware_sdk_37.PermissionMap_swiginit(self, _seisware_sdk_37.new_PermissionMap(*args))

    def empty(self):
        return _seisware_sdk_37.PermissionMap_empty(self)

    def size(self):
        return _seisware_sdk_37.PermissionMap_size(self)

    def swap(self, v):
        return _seisware_sdk_37.PermissionMap_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.PermissionMap_begin(self)

    def end(self):
        return _seisware_sdk_37.PermissionMap_end(self)

    def rbegin(self):
        return _seisware_sdk_37.PermissionMap_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.PermissionMap_rend(self)

    def clear(self):
        return _seisware_sdk_37.PermissionMap_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.PermissionMap_get_allocator(self)

    def count(self, x):
        return _seisware_sdk_37.PermissionMap_count(self, x)

    def erase(self, *args):
        return _seisware_sdk_37.PermissionMap_erase(self, *args)

    def find(self, x):
        return _seisware_sdk_37.PermissionMap_find(self, x)

    def lower_bound(self, x):
        return _seisware_sdk_37.PermissionMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _seisware_sdk_37.PermissionMap_upper_bound(self, x)
    __swig_destroy__ = _seisware_sdk_37.delete_PermissionMap

# Register PermissionMap in _seisware_sdk_37:
_seisware_sdk_37.PermissionMap_swigregister(PermissionMap)

class Completion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Completion_swiginit(self, _seisware_sdk_37.new_Completion(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Completion

    def ID(self, *args):
        return _seisware_sdk_37.Completion_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Completion_OwnerID(self)

    def OwnerName(self):
        return _seisware_sdk_37.Completion_OwnerName(self)

    def Source(self, *args):
        return _seisware_sdk_37.Completion_Source(self, *args)

    def Number(self, *args):
        return _seisware_sdk_37.Completion_Number(self, *args)

    def TopFormation(self, *args):
        return _seisware_sdk_37.Completion_TopFormation(self, *args)

    def BaseFormation(self, *args):
        return _seisware_sdk_37.Completion_BaseFormation(self, *args)

    def WellID(self, *args):
        return _seisware_sdk_37.Completion_WellID(self, *args)

    def TopMD(self, *args):
        return _seisware_sdk_37.Completion_TopMD(self, *args)

    def BaseMD(self, *args):
        return _seisware_sdk_37.Completion_BaseMD(self, *args)

    def CompletionDate(self, *args):
        return _seisware_sdk_37.Completion_CompletionDate(self, *args)

    def LastChangeDate(self):
        return _seisware_sdk_37.Completion_LastChangeDate(self)

    def Type(self, *args):
        return _seisware_sdk_37.Completion_Type(self, *args)

    def Method(self, *args):
        return _seisware_sdk_37.Completion_Method(self, *args)

# Register Completion in _seisware_sdk_37:
_seisware_sdk_37.Completion_swigregister(Completion)

class CompletionManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_CompletionManager

    def GetAll(self, items):
        return _seisware_sdk_37.CompletionManager_GetAll(self, items)

    def GetByKeys(self, keys, items, failedKeys):
        return _seisware_sdk_37.CompletionManager_GetByKeys(self, keys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.CompletionManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.CompletionManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.CompletionManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.CompletionManager_Update(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.CompletionManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.CompletionManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.CompletionManager_CanUpdate(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.CompletionManager_ChangeOwner(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.CompletionManager_CanChangeOwner(self, *args)

# Register CompletionManager in _seisware_sdk_37:
_seisware_sdk_37.CompletionManager_swigregister(CompletionManager)

class CompletionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CompletionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CompletionList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CompletionList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CompletionList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CompletionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CompletionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CompletionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CompletionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CompletionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CompletionList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CompletionList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CompletionList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CompletionList_empty(self)

    def size(self):
        return _seisware_sdk_37.CompletionList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CompletionList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CompletionList_begin(self)

    def end(self):
        return _seisware_sdk_37.CompletionList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CompletionList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CompletionList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CompletionList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CompletionList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CompletionList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CompletionList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CompletionList_swiginit(self, _seisware_sdk_37.new_CompletionList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CompletionList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CompletionList_front(self)

    def back(self):
        return _seisware_sdk_37.CompletionList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CompletionList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CompletionList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CompletionList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CompletionList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CompletionList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CompletionList

# Register CompletionList in _seisware_sdk_37:
_seisware_sdk_37.CompletionList_swigregister(CompletionList)

class CompletionOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.CompletionOwnerPair_swiginit(self, _seisware_sdk_37.new_CompletionOwnerPair(*args))
    first = property(_seisware_sdk_37.CompletionOwnerPair_first_get, _seisware_sdk_37.CompletionOwnerPair_first_set)
    second = property(_seisware_sdk_37.CompletionOwnerPair_second_get, _seisware_sdk_37.CompletionOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_CompletionOwnerPair

# Register CompletionOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.CompletionOwnerPair_swigregister(CompletionOwnerPair)

class CompletionOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CompletionOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CompletionOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CompletionOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CompletionOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CompletionOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CompletionOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CompletionOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CompletionOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CompletionOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.CompletionOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CompletionOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CompletionOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.CompletionOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CompletionOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CompletionOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CompletionOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CompletionOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CompletionOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CompletionOwnerPairList_swiginit(self, _seisware_sdk_37.new_CompletionOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CompletionOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CompletionOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.CompletionOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CompletionOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CompletionOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CompletionOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CompletionOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CompletionOwnerPairList

# Register CompletionOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.CompletionOwnerPairList_swigregister(CompletionOwnerPairList)

class Alias(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.Alias_swiginit(self, _seisware_sdk_37.new_Alias(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_Alias

    def ID(self, *args):
        return _seisware_sdk_37.Alias_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.Alias_OwnerID(self)

    def Name(self, *args):
        return _seisware_sdk_37.Alias_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.Alias_Description(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.Alias_Type(self, *args)

    def Priorities(self, *args):
        return _seisware_sdk_37.Alias_Priorities(self, *args)

# Register Alias in _seisware_sdk_37:
_seisware_sdk_37.Alias_swigregister(Alias)

class AliasManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_AliasManager

    def GetAll(self, items):
        return _seisware_sdk_37.AliasManager_GetAll(self, items)

    def GetByKeys(self, itemKeys, items, failedKeys):
        return _seisware_sdk_37.AliasManager_GetByKeys(self, itemKeys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.AliasManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.AliasManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.AliasManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.AliasManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.AliasManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.AliasManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.AliasManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.AliasManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.AliasManager_CanChangeOwner(self, *args)

# Register AliasManager in _seisware_sdk_37:
_seisware_sdk_37.AliasManager_swigregister(AliasManager)

class AliasField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.AliasField_swiginit(self, _seisware_sdk_37.new_AliasField(*args))
    name = property(_seisware_sdk_37.AliasField_name_get, _seisware_sdk_37.AliasField_name_set)
    matches = property(_seisware_sdk_37.AliasField_matches_get, _seisware_sdk_37.AliasField_matches_set)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasField

# Register AliasField in _seisware_sdk_37:
_seisware_sdk_37.AliasField_swigregister(AliasField)

class AliasPriorityOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.AliasPriorityOrder_swiginit(self, _seisware_sdk_37.new_AliasPriorityOrder(*args))
    fields = property(_seisware_sdk_37.AliasPriorityOrder_fields_get, _seisware_sdk_37.AliasPriorityOrder_fields_set)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasPriorityOrder

# Register AliasPriorityOrder in _seisware_sdk_37:
_seisware_sdk_37.AliasPriorityOrder_swigregister(AliasPriorityOrder)

class AliasList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.AliasList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.AliasList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.AliasList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.AliasList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.AliasList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.AliasList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.AliasList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.AliasList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.AliasList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.AliasList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.AliasList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.AliasList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.AliasList_empty(self)

    def size(self):
        return _seisware_sdk_37.AliasList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.AliasList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.AliasList_begin(self)

    def end(self):
        return _seisware_sdk_37.AliasList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.AliasList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.AliasList_rend(self)

    def clear(self):
        return _seisware_sdk_37.AliasList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.AliasList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.AliasList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.AliasList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.AliasList_swiginit(self, _seisware_sdk_37.new_AliasList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.AliasList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.AliasList_front(self)

    def back(self):
        return _seisware_sdk_37.AliasList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.AliasList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.AliasList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.AliasList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.AliasList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.AliasList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasList

# Register AliasList in _seisware_sdk_37:
_seisware_sdk_37.AliasList_swigregister(AliasList)

class AliasFieldList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.AliasFieldList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.AliasFieldList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.AliasFieldList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.AliasFieldList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.AliasFieldList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.AliasFieldList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.AliasFieldList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.AliasFieldList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.AliasFieldList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.AliasFieldList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.AliasFieldList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.AliasFieldList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.AliasFieldList_empty(self)

    def size(self):
        return _seisware_sdk_37.AliasFieldList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.AliasFieldList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.AliasFieldList_begin(self)

    def end(self):
        return _seisware_sdk_37.AliasFieldList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.AliasFieldList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.AliasFieldList_rend(self)

    def clear(self):
        return _seisware_sdk_37.AliasFieldList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.AliasFieldList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.AliasFieldList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.AliasFieldList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.AliasFieldList_swiginit(self, _seisware_sdk_37.new_AliasFieldList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.AliasFieldList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.AliasFieldList_front(self)

    def back(self):
        return _seisware_sdk_37.AliasFieldList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.AliasFieldList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.AliasFieldList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.AliasFieldList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.AliasFieldList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.AliasFieldList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasFieldList

# Register AliasFieldList in _seisware_sdk_37:
_seisware_sdk_37.AliasFieldList_swigregister(AliasFieldList)

class AliasPriorityList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.AliasPriorityList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.AliasPriorityList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.AliasPriorityList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.AliasPriorityList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.AliasPriorityList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.AliasPriorityList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.AliasPriorityList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.AliasPriorityList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.AliasPriorityList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.AliasPriorityList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.AliasPriorityList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.AliasPriorityList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.AliasPriorityList_empty(self)

    def size(self):
        return _seisware_sdk_37.AliasPriorityList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.AliasPriorityList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.AliasPriorityList_begin(self)

    def end(self):
        return _seisware_sdk_37.AliasPriorityList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.AliasPriorityList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.AliasPriorityList_rend(self)

    def clear(self):
        return _seisware_sdk_37.AliasPriorityList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.AliasPriorityList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.AliasPriorityList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.AliasPriorityList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.AliasPriorityList_swiginit(self, _seisware_sdk_37.new_AliasPriorityList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.AliasPriorityList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.AliasPriorityList_front(self)

    def back(self):
        return _seisware_sdk_37.AliasPriorityList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.AliasPriorityList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.AliasPriorityList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.AliasPriorityList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.AliasPriorityList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.AliasPriorityList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasPriorityList

# Register AliasPriorityList in _seisware_sdk_37:
_seisware_sdk_37.AliasPriorityList_swigregister(AliasPriorityList)

class AliasOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.AliasOwnerPair_swiginit(self, _seisware_sdk_37.new_AliasOwnerPair(*args))
    first = property(_seisware_sdk_37.AliasOwnerPair_first_get, _seisware_sdk_37.AliasOwnerPair_first_set)
    second = property(_seisware_sdk_37.AliasOwnerPair_second_get, _seisware_sdk_37.AliasOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_AliasOwnerPair

# Register AliasOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.AliasOwnerPair_swigregister(AliasOwnerPair)

class AliasOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.AliasOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.AliasOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.AliasOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.AliasOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.AliasOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.AliasOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.AliasOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.AliasOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.AliasOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.AliasOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.AliasOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.AliasOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.AliasOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.AliasOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.AliasOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.AliasOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.AliasOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.AliasOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.AliasOwnerPairList_swiginit(self, _seisware_sdk_37.new_AliasOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.AliasOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.AliasOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.AliasOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.AliasOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.AliasOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.AliasOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.AliasOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_AliasOwnerPairList

# Register AliasOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.AliasOwnerPairList_swigregister(AliasOwnerPairList)

class CrossSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.CrossSection_swiginit(self, _seisware_sdk_37.new_CrossSection(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSection

    def ID(self, *args):
        return _seisware_sdk_37.CrossSection_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.CrossSection_OwnerID(self)

    def OwnerName(self):
        return _seisware_sdk_37.CrossSection_OwnerName(self)

    def Name(self, *args):
        return _seisware_sdk_37.CrossSection_Name(self, *args)

    def Type(self, *args):
        return _seisware_sdk_37.CrossSection_Type(self, *args)

    def ProjectionDistance(self, *args):
        return _seisware_sdk_37.CrossSection_ProjectionDistance(self, *args)

    def Properties(self, *args):
        return _seisware_sdk_37.CrossSection_Properties(self, *args)

    def Nodes(self, *args):
        return _seisware_sdk_37.CrossSection_Nodes(self, *args)

    def DataLastModified(self):
        return _seisware_sdk_37.CrossSection_DataLastModified(self)

# Register CrossSection in _seisware_sdk_37:
_seisware_sdk_37.CrossSection_swigregister(CrossSection)

class CrossSectionManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionManager

    def GetAll(self, items):
        return _seisware_sdk_37.CrossSectionManager_GetAll(self, items)

    def GetByKeys(self, itemKeys, items, failedKeys):
        return _seisware_sdk_37.CrossSectionManager_GetByKeys(self, itemKeys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.CrossSectionManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.CrossSectionManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.CrossSectionManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.CrossSectionManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.CrossSectionManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.CrossSectionManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.CrossSectionManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.CrossSectionManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.CrossSectionManager_CanChangeOwner(self, *args)

    def PopulateNodes(self, *args):
        return _seisware_sdk_37.CrossSectionManager_PopulateNodes(self, *args)

# Register CrossSectionManager in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionManager_swigregister(CrossSectionManager)

class CrossSectionNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WellID = property(_seisware_sdk_37.CrossSectionNode_WellID_get, _seisware_sdk_37.CrossSectionNode_WellID_set)
    Location = property(_seisware_sdk_37.CrossSectionNode_Location_get, _seisware_sdk_37.CrossSectionNode_Location_set)

    def __init__(self):
        _seisware_sdk_37.CrossSectionNode_swiginit(self, _seisware_sdk_37.new_CrossSectionNode())
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionNode

# Register CrossSectionNode in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionNode_swigregister(CrossSectionNode)

class CrossSectionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CrossSectionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CrossSectionList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CrossSectionList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CrossSectionList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CrossSectionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CrossSectionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CrossSectionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CrossSectionList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CrossSectionList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CrossSectionList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CrossSectionList_empty(self)

    def size(self):
        return _seisware_sdk_37.CrossSectionList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CrossSectionList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CrossSectionList_begin(self)

    def end(self):
        return _seisware_sdk_37.CrossSectionList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CrossSectionList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CrossSectionList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CrossSectionList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CrossSectionList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CrossSectionList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CrossSectionList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CrossSectionList_swiginit(self, _seisware_sdk_37.new_CrossSectionList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CrossSectionList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CrossSectionList_front(self)

    def back(self):
        return _seisware_sdk_37.CrossSectionList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CrossSectionList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CrossSectionList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CrossSectionList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CrossSectionList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CrossSectionList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionList

# Register CrossSectionList in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionList_swigregister(CrossSectionList)

class CrossSectionNodeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CrossSectionNodeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CrossSectionNodeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CrossSectionNodeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CrossSectionNodeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionNodeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionNodeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CrossSectionNodeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CrossSectionNodeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CrossSectionNodeList_empty(self)

    def size(self):
        return _seisware_sdk_37.CrossSectionNodeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CrossSectionNodeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CrossSectionNodeList_begin(self)

    def end(self):
        return _seisware_sdk_37.CrossSectionNodeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CrossSectionNodeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CrossSectionNodeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CrossSectionNodeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CrossSectionNodeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CrossSectionNodeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CrossSectionNodeList_swiginit(self, _seisware_sdk_37.new_CrossSectionNodeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CrossSectionNodeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CrossSectionNodeList_front(self)

    def back(self):
        return _seisware_sdk_37.CrossSectionNodeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CrossSectionNodeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CrossSectionNodeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CrossSectionNodeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CrossSectionNodeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionNodeList

# Register CrossSectionNodeList in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionNodeList_swigregister(CrossSectionNodeList)

class CrossSectionOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.CrossSectionOwnerPair_swiginit(self, _seisware_sdk_37.new_CrossSectionOwnerPair(*args))
    first = property(_seisware_sdk_37.CrossSectionOwnerPair_first_get, _seisware_sdk_37.CrossSectionOwnerPair_first_set)
    second = property(_seisware_sdk_37.CrossSectionOwnerPair_second_get, _seisware_sdk_37.CrossSectionOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionOwnerPair

# Register CrossSectionOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionOwnerPair_swigregister(CrossSectionOwnerPair)

class CrossSectionOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.CrossSectionOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.CrossSectionOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.CrossSectionOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.CrossSectionOwnerPairList_swiginit(self, _seisware_sdk_37.new_CrossSectionOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.CrossSectionOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.CrossSectionOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.CrossSectionOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.CrossSectionOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.CrossSectionOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_CrossSectionOwnerPairList

# Register CrossSectionOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.CrossSectionOwnerPairList_swigregister(CrossSectionOwnerPairList)

class TracksTemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.TracksTemplate_swiginit(self, _seisware_sdk_37.new_TracksTemplate(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_TracksTemplate

    def ID(self, *args):
        return _seisware_sdk_37.TracksTemplate_ID(self, *args)

    def OwnerID(self):
        return _seisware_sdk_37.TracksTemplate_OwnerID(self)

    def Name(self, *args):
        return _seisware_sdk_37.TracksTemplate_Name(self, *args)

    def Description(self, *args):
        return _seisware_sdk_37.TracksTemplate_Description(self, *args)

    def Properties(self, *args):
        return _seisware_sdk_37.TracksTemplate_Properties(self, *args)

    def Tracks(self, *args):
        return _seisware_sdk_37.TracksTemplate_Tracks(self, *args)

# Register TracksTemplate in _seisware_sdk_37:
_seisware_sdk_37.TracksTemplate_swigregister(TracksTemplate)

class TracksTemplateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_TracksTemplateManager

    def LoadCache(self):
        return _seisware_sdk_37.TracksTemplateManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.TracksTemplateManager_GetAll(self, items)

    def GetByKeys(self, itemKeys, items, failedKeys):
        return _seisware_sdk_37.TracksTemplateManager_GetByKeys(self, itemKeys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.TracksTemplateManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.TracksTemplateManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.TracksTemplateManager_CanChangeOwner(self, *args)

# Register TracksTemplateManager in _seisware_sdk_37:
_seisware_sdk_37.TracksTemplateManager_swigregister(TracksTemplateManager)

class TracksTemplateList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.TracksTemplateList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.TracksTemplateList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.TracksTemplateList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.TracksTemplateList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.TracksTemplateList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.TracksTemplateList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.TracksTemplateList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.TracksTemplateList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.TracksTemplateList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.TracksTemplateList_empty(self)

    def size(self):
        return _seisware_sdk_37.TracksTemplateList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.TracksTemplateList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.TracksTemplateList_begin(self)

    def end(self):
        return _seisware_sdk_37.TracksTemplateList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.TracksTemplateList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.TracksTemplateList_rend(self)

    def clear(self):
        return _seisware_sdk_37.TracksTemplateList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.TracksTemplateList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.TracksTemplateList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.TracksTemplateList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.TracksTemplateList_swiginit(self, _seisware_sdk_37.new_TracksTemplateList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.TracksTemplateList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.TracksTemplateList_front(self)

    def back(self):
        return _seisware_sdk_37.TracksTemplateList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.TracksTemplateList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.TracksTemplateList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.TracksTemplateList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.TracksTemplateList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.TracksTemplateList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_TracksTemplateList

# Register TracksTemplateList in _seisware_sdk_37:
_seisware_sdk_37.TracksTemplateList_swigregister(TracksTemplateList)

class TracksTemplateOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.TracksTemplateOwnerPair_swiginit(self, _seisware_sdk_37.new_TracksTemplateOwnerPair(*args))
    first = property(_seisware_sdk_37.TracksTemplateOwnerPair_first_get, _seisware_sdk_37.TracksTemplateOwnerPair_first_set)
    second = property(_seisware_sdk_37.TracksTemplateOwnerPair_second_get, _seisware_sdk_37.TracksTemplateOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_TracksTemplateOwnerPair

# Register TracksTemplateOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.TracksTemplateOwnerPair_swigregister(TracksTemplateOwnerPair)

class TracksTemplateOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.TracksTemplateOwnerPairList_swiginit(self, _seisware_sdk_37.new_TracksTemplateOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.TracksTemplateOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_TracksTemplateOwnerPairList

# Register TracksTemplateOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.TracksTemplateOwnerPairList_swigregister(TracksTemplateOwnerPairList)

class ZoneType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ZoneType_swiginit(self, _seisware_sdk_37.new_ZoneType(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneType

    def ID(self, *args):
        return _seisware_sdk_37.ZoneType_ID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.ZoneType_Name(self, *args)

# Register ZoneType in _seisware_sdk_37:
_seisware_sdk_37.ZoneType_swigregister(ZoneType)

class ZoneTypeManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneTypeManager

    def LoadCache(self):
        return _seisware_sdk_37.ZoneTypeManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.ZoneTypeManager_GetAll(self, items)

    def GetByKeys(self, itemKeys, items, failedKeys):
        return _seisware_sdk_37.ZoneTypeManager_GetByKeys(self, itemKeys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.ZoneTypeManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.ZoneTypeManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.ZoneTypeManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.ZoneTypeManager_Update(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.ZoneTypeManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.ZoneTypeManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.ZoneTypeManager_CanUpdate(self, *args)

# Register ZoneTypeManager in _seisware_sdk_37:
_seisware_sdk_37.ZoneTypeManager_swigregister(ZoneTypeManager)

class ZoneTypeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ZoneTypeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ZoneTypeList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ZoneTypeList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ZoneTypeList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ZoneTypeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ZoneTypeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ZoneTypeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ZoneTypeList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ZoneTypeList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ZoneTypeList_empty(self)

    def size(self):
        return _seisware_sdk_37.ZoneTypeList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ZoneTypeList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ZoneTypeList_begin(self)

    def end(self):
        return _seisware_sdk_37.ZoneTypeList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ZoneTypeList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ZoneTypeList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ZoneTypeList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ZoneTypeList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ZoneTypeList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ZoneTypeList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ZoneTypeList_swiginit(self, _seisware_sdk_37.new_ZoneTypeList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ZoneTypeList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ZoneTypeList_front(self)

    def back(self):
        return _seisware_sdk_37.ZoneTypeList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ZoneTypeList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ZoneTypeList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ZoneTypeList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ZoneTypeList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ZoneTypeList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneTypeList

# Register ZoneTypeList in _seisware_sdk_37:
_seisware_sdk_37.ZoneTypeList_swigregister(ZoneTypeList)

class ZoneTypeOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.ZoneTypeOwnerPair_swiginit(self, _seisware_sdk_37.new_ZoneTypeOwnerPair(*args))
    first = property(_seisware_sdk_37.ZoneTypeOwnerPair_first_get, _seisware_sdk_37.ZoneTypeOwnerPair_first_set)
    second = property(_seisware_sdk_37.ZoneTypeOwnerPair_second_get, _seisware_sdk_37.ZoneTypeOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneTypeOwnerPair

# Register ZoneTypeOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.ZoneTypeOwnerPair_swigregister(ZoneTypeOwnerPair)

class ZoneTypeOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.ZoneTypeOwnerPairList_swiginit(self, _seisware_sdk_37.new_ZoneTypeOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.ZoneTypeOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_ZoneTypeOwnerPairList

# Register ZoneTypeOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.ZoneTypeOwnerPairList_swigregister(ZoneTypeOwnerPairList)

class DisplayedZones(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.DisplayedZones_swiginit(self, _seisware_sdk_37.new_DisplayedZones(*args))
    __swig_destroy__ = _seisware_sdk_37.delete_DisplayedZones

    def ID(self, *args):
        return _seisware_sdk_37.DisplayedZones_ID(self, *args)

    def OwnerID(self, *args):
        return _seisware_sdk_37.DisplayedZones_OwnerID(self, *args)

    def Name(self, *args):
        return _seisware_sdk_37.DisplayedZones_Name(self, *args)

    def DisplayedZonesDataID(self, *args):
        return _seisware_sdk_37.DisplayedZones_DisplayedZonesDataID(self, *args)

# Register DisplayedZones in _seisware_sdk_37:
_seisware_sdk_37.DisplayedZones_swigregister(DisplayedZones)

class DisplayedZonesManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _seisware_sdk_37.delete_DisplayedZonesManager

    def LoadCache(self):
        return _seisware_sdk_37.DisplayedZonesManager_LoadCache(self)

    def GetAll(self, items):
        return _seisware_sdk_37.DisplayedZonesManager_GetAll(self, items)

    def GetByKeys(self, itemKeys, items, failedKeys):
        return _seisware_sdk_37.DisplayedZonesManager_GetByKeys(self, itemKeys, items, failedKeys)

    def GetKeysByFilter(self, filter, keysInFilter):
        return _seisware_sdk_37.DisplayedZonesManager_GetKeysByFilter(self, filter, keysInFilter)

    def Add(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_Add(self, *args)

    def Remove(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_Remove(self, *args)

    def Update(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_Update(self, *args)

    def ChangeOwner(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_ChangeOwner(self, *args)

    def CanAdd(self):
        return _seisware_sdk_37.DisplayedZonesManager_CanAdd(self)

    def CanRemove(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_CanRemove(self, *args)

    def CanUpdate(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_CanUpdate(self, *args)

    def CanChangeOwner(self, *args):
        return _seisware_sdk_37.DisplayedZonesManager_CanChangeOwner(self, *args)

# Register DisplayedZonesManager in _seisware_sdk_37:
_seisware_sdk_37.DisplayedZonesManager_swigregister(DisplayedZonesManager)

class DisplayedZonesList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DisplayedZonesList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DisplayedZonesList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DisplayedZonesList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DisplayedZonesList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DisplayedZonesList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DisplayedZonesList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DisplayedZonesList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DisplayedZonesList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DisplayedZonesList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DisplayedZonesList_empty(self)

    def size(self):
        return _seisware_sdk_37.DisplayedZonesList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DisplayedZonesList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DisplayedZonesList_begin(self)

    def end(self):
        return _seisware_sdk_37.DisplayedZonesList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DisplayedZonesList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DisplayedZonesList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DisplayedZonesList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DisplayedZonesList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DisplayedZonesList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DisplayedZonesList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DisplayedZonesList_swiginit(self, _seisware_sdk_37.new_DisplayedZonesList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DisplayedZonesList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DisplayedZonesList_front(self)

    def back(self):
        return _seisware_sdk_37.DisplayedZonesList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DisplayedZonesList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DisplayedZonesList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DisplayedZonesList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DisplayedZonesList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DisplayedZonesList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DisplayedZonesList

# Register DisplayedZonesList in _seisware_sdk_37:
_seisware_sdk_37.DisplayedZonesList_swigregister(DisplayedZonesList)

class DisplayedZonesOwnerPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _seisware_sdk_37.DisplayedZonesOwnerPair_swiginit(self, _seisware_sdk_37.new_DisplayedZonesOwnerPair(*args))
    first = property(_seisware_sdk_37.DisplayedZonesOwnerPair_first_get, _seisware_sdk_37.DisplayedZonesOwnerPair_first_set)
    second = property(_seisware_sdk_37.DisplayedZonesOwnerPair_second_get, _seisware_sdk_37.DisplayedZonesOwnerPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _seisware_sdk_37.delete_DisplayedZonesOwnerPair

# Register DisplayedZonesOwnerPair in _seisware_sdk_37:
_seisware_sdk_37.DisplayedZonesOwnerPair_swigregister(DisplayedZonesOwnerPair)

class DisplayedZonesOwnerPairList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___nonzero__(self)

    def __bool__(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___bool__(self)

    def __len__(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___len__(self)

    def __getslice__(self, i, j):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList___setitem__(self, *args)

    def pop(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_pop(self)

    def append(self, x):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_append(self, x)

    def empty(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_empty(self)

    def size(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_size(self)

    def swap(self, v):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_swap(self, v)

    def begin(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_begin(self)

    def end(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_end(self)

    def rbegin(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_rbegin(self)

    def rend(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_rend(self)

    def clear(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_clear(self)

    def get_allocator(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_get_allocator(self)

    def pop_back(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_pop_back(self)

    def erase(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_erase(self, *args)

    def __init__(self, *args):
        _seisware_sdk_37.DisplayedZonesOwnerPairList_swiginit(self, _seisware_sdk_37.new_DisplayedZonesOwnerPairList(*args))

    def push_back(self, x):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_push_back(self, x)

    def front(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_front(self)

    def back(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_back(self)

    def assign(self, n, x):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_assign(self, n, x)

    def resize(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_resize(self, *args)

    def insert(self, *args):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_insert(self, *args)

    def reserve(self, n):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_reserve(self, n)

    def capacity(self):
        return _seisware_sdk_37.DisplayedZonesOwnerPairList_capacity(self)
    __swig_destroy__ = _seisware_sdk_37.delete_DisplayedZonesOwnerPairList

# Register DisplayedZonesOwnerPairList in _seisware_sdk_37:
_seisware_sdk_37.DisplayedZonesOwnerPairList_swigregister(DisplayedZonesOwnerPairList)



